
CTD_v02_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000940c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080095ac  080095ac  000195ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a0  080099a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080099a0  080099a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099a0  080099a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080099a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b24  20000070  08009a18  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b94  08009a18  00020b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f7e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047ec  00000000  00000000  0004801e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  0004c810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0004dc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d81  00000000  00000000  0004ee98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000170c7  00000000  00000000  00071c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb235  00000000  00000000  00088ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143f15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005708  00000000  00000000  00143f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009594 	.word	0x08009594

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08009594 	.word	0x08009594

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_f2ulz>:
 8000290:	b5d0      	push	{r4, r6, r7, lr}
 8000292:	f000 f985 	bl	80005a0 <__aeabi_f2d>
 8000296:	2200      	movs	r2, #0
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <__aeabi_f2ulz+0x40>)
 800029a:	4606      	mov	r6, r0
 800029c:	460f      	mov	r7, r1
 800029e:	f000 f9d7 	bl	8000650 <__aeabi_dmul>
 80002a2:	f000 fbe7 	bl	8000a74 <__aeabi_d2uiz>
 80002a6:	4604      	mov	r4, r0
 80002a8:	f000 f958 	bl	800055c <__aeabi_ui2d>
 80002ac:	2200      	movs	r2, #0
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <__aeabi_f2ulz+0x44>)
 80002b0:	f000 f9ce 	bl	8000650 <__aeabi_dmul>
 80002b4:	4602      	mov	r2, r0
 80002b6:	460b      	mov	r3, r1
 80002b8:	4630      	mov	r0, r6
 80002ba:	4639      	mov	r1, r7
 80002bc:	f000 f810 	bl	80002e0 <__aeabi_dsub>
 80002c0:	f000 fbd8 	bl	8000a74 <__aeabi_d2uiz>
 80002c4:	2200      	movs	r2, #0
 80002c6:	4623      	mov	r3, r4
 80002c8:	4310      	orrs	r0, r2
 80002ca:	4619      	mov	r1, r3
 80002cc:	bdd0      	pop	{r4, r6, r7, pc}
 80002ce:	bf00      	nop
 80002d0:	3df00000 	.word	0x3df00000
 80002d4:	41f00000 	.word	0x41f00000

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000416:	f1a4 0401 	sub.w	r4, r4, #1
 800041a:	d1e9      	bne.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f001 f9e3 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f007 fc88 	bl	80083e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f9fb 	bl	8001efa <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, 12, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	210c      	movs	r1, #12
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f001 f9c3 	bl	8001ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	20000000 	.word	0x20000000

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000004 	.word	0x20000004
 8000b64:	200000a8 	.word	0x200000a8

08000b68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200000a8 	.word	0x200000a8

08000b80 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_Delay+0x40>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09c      	sub	sp, #112	; 0x70
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e1e2      	b.n	8000faa <HAL_ADC_Init+0x3e6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d176      	bne.n	8000ce4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d152      	bne.n	8000ca4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f007 fc07 	bl	800842c <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d13b      	bne.n	8000ca4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 ff55 	bl	8001adc <ADC_Disable>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d12f      	bne.n	8000ca4 <HAL_ADC_Init+0xe0>
 8000c44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d12b      	bne.n	8000ca4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c54:	f023 0302 	bic.w	r3, r3, #2
 8000c58:	f043 0202 	orr.w	r2, r3, #2
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c6e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c7e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c80:	4b92      	ldr	r3, [pc, #584]	; (8000ecc <HAL_ADC_Init+0x308>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a92      	ldr	r2, [pc, #584]	; (8000ed0 <HAL_ADC_Init+0x30c>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	0c9a      	lsrs	r2, r3, #18
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000c96:	e002      	b.n	8000c9e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f9      	bne.n	8000c98 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cc0:	d110      	bne.n	8000ce4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f023 0312 	bic.w	r3, r3, #18
 8000cca:	f043 0210 	orr.w	r2, r3, #16
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cd6:	f043 0201 	orr.w	r2, r3, #1
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f040 814f 	bne.w	8000f90 <HAL_ADC_Init+0x3cc>
 8000cf2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 814a 	bne.w	8000f90 <HAL_ADC_Init+0x3cc>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f040 8142 	bne.w	8000f90 <HAL_ADC_Init+0x3cc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d14:	f043 0202 	orr.w	r2, r3, #2
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d24:	d004      	beq.n	8000d30 <HAL_ADC_Init+0x16c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a6a      	ldr	r2, [pc, #424]	; (8000ed4 <HAL_ADC_Init+0x310>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <HAL_ADC_Init+0x170>
 8000d30:	4b69      	ldr	r3, [pc, #420]	; (8000ed8 <HAL_ADC_Init+0x314>)
 8000d32:	e000      	b.n	8000d36 <HAL_ADC_Init+0x172>
 8000d34:	4b69      	ldr	r3, [pc, #420]	; (8000edc <HAL_ADC_Init+0x318>)
 8000d36:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d40:	d102      	bne.n	8000d48 <HAL_ADC_Init+0x184>
 8000d42:	4b64      	ldr	r3, [pc, #400]	; (8000ed4 <HAL_ADC_Init+0x310>)
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	e01a      	b.n	8000d7e <HAL_ADC_Init+0x1ba>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a61      	ldr	r2, [pc, #388]	; (8000ed4 <HAL_ADC_Init+0x310>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d103      	bne.n	8000d5a <HAL_ADC_Init+0x196>
 8000d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	e011      	b.n	8000d7e <HAL_ADC_Init+0x1ba>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a60      	ldr	r2, [pc, #384]	; (8000ee0 <HAL_ADC_Init+0x31c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d102      	bne.n	8000d6a <HAL_ADC_Init+0x1a6>
 8000d64:	4b5f      	ldr	r3, [pc, #380]	; (8000ee4 <HAL_ADC_Init+0x320>)
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	e009      	b.n	8000d7e <HAL_ADC_Init+0x1ba>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a5d      	ldr	r2, [pc, #372]	; (8000ee4 <HAL_ADC_Init+0x320>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d102      	bne.n	8000d7a <HAL_ADC_Init+0x1b6>
 8000d74:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <HAL_ADC_Init+0x31c>)
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	e001      	b.n	8000d7e <HAL_ADC_Init+0x1ba>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d108      	bne.n	8000d9e <HAL_ADC_Init+0x1da>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d101      	bne.n	8000d9e <HAL_ADC_Init+0x1da>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_ADC_Init+0x1dc>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d11c      	bne.n	8000dde <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000da4:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d010      	beq.n	8000dcc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d107      	bne.n	8000dc6 <HAL_ADC_Init+0x202>
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d101      	bne.n	8000dc6 <HAL_ADC_Init+0x202>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_ADC_Init+0x204>
 8000dc6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d108      	bne.n	8000dde <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ddc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	035b      	lsls	r3, r3, #13
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000de8:	2a01      	cmp	r2, #1
 8000dea:	d002      	beq.n	8000df2 <HAL_ADC_Init+0x22e>
 8000dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df0:	e000      	b.n	8000df4 <HAL_ADC_Init+0x230>
 8000df2:	2200      	movs	r2, #0
 8000df4:	431a      	orrs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000e04:	4313      	orrs	r3, r2
 8000e06:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d11b      	bne.n	8000e48 <HAL_ADC_Init+0x284>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d109      	bne.n	8000e2c <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	045a      	lsls	r2, r3, #17
 8000e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e22:	4313      	orrs	r3, r2
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e2a:	e00d      	b.n	8000e48 <HAL_ADC_Init+0x284>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e30:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e34:	f043 0220 	orr.w	r2, r3, #32
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e40:	f043 0201 	orr.w	r2, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d055      	beq.n	8000efc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <HAL_ADC_Init+0x31c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d004      	beq.n	8000e64 <HAL_ADC_Init+0x2a0>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <HAL_ADC_Init+0x320>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d141      	bne.n	8000ee8 <HAL_ADC_Init+0x324>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000e6c:	d02a      	beq.n	8000ec4 <HAL_ADC_Init+0x300>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e76:	d022      	beq.n	8000ebe <HAL_ADC_Init+0x2fa>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000e80:	d01a      	beq.n	8000eb8 <HAL_ADC_Init+0x2f4>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000e8a:	d012      	beq.n	8000eb2 <HAL_ADC_Init+0x2ee>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000e94:	d00a      	beq.n	8000eac <HAL_ADC_Init+0x2e8>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000e9e:	d002      	beq.n	8000ea6 <HAL_ADC_Init+0x2e2>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	e024      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000ea6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000eaa:	e021      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000eac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000eb0:	e01e      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000eb2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000eb6:	e01b      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebc:	e018      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000ebe:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000ec2:	e015      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000ec4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ec8:	e012      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	431bde83 	.word	0x431bde83
 8000ed4:	50000100 	.word	0x50000100
 8000ed8:	50000300 	.word	0x50000300
 8000edc:	50000700 	.word	0x50000700
 8000ee0:	50000400 	.word	0x50000400
 8000ee4:	50000500 	.word	0x50000500
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d113      	bne.n	8000f32 <HAL_ADC_Init+0x36e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	039a      	lsls	r2, r3, #14
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_ADC_Init+0x3f0>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000f42:	430b      	orrs	r3, r1
 8000f44:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d10c      	bne.n	8000f68 <HAL_ADC_Init+0x3a4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	f023 010f 	bic.w	r1, r3, #15
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	1e5a      	subs	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
 8000f66:	e007      	b.n	8000f78 <HAL_ADC_Init+0x3b4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 020f 	bic.w	r2, r2, #15
 8000f76:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f023 0303 	bic.w	r3, r3, #3
 8000f86:	f043 0201 	orr.w	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44
 8000f8e:	e00a      	b.n	8000fa6 <HAL_ADC_Init+0x3e2>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	f023 0312 	bic.w	r3, r3, #18
 8000f98:	f043 0210 	orr.w	r2, r3, #16
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000fa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3770      	adds	r7, #112	; 0x70
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	fff0c007 	.word	0xfff0c007

08000fb8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 80f9 	bne.w	80011c6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_Start+0x2a>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e0f4      	b.n	80011cc <HAL_ADC_Start+0x214>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fd18 	bl	8001a20 <ADC_Enable>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 80e0 	bne.w	80011bc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001000:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001018:	d004      	beq.n	8001024 <HAL_ADC_Start+0x6c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a6d      	ldr	r2, [pc, #436]	; (80011d4 <HAL_ADC_Start+0x21c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <HAL_ADC_Start+0x7a>
 8001024:	4b6c      	ldr	r3, [pc, #432]	; (80011d8 <HAL_ADC_Start+0x220>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	2b00      	cmp	r3, #0
 800102e:	d010      	beq.n	8001052 <HAL_ADC_Start+0x9a>
 8001030:	e005      	b.n	800103e <HAL_ADC_Start+0x86>
 8001032:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_ADC_Start+0x224>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	2b00      	cmp	r3, #0
 800103c:	d009      	beq.n	8001052 <HAL_ADC_Start+0x9a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001046:	d004      	beq.n	8001052 <HAL_ADC_Start+0x9a>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a64      	ldr	r2, [pc, #400]	; (80011e0 <HAL_ADC_Start+0x228>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d115      	bne.n	800107e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d036      	beq.n	80010da <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001074:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	645a      	str	r2, [r3, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800107c:	e02d      	b.n	80010da <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001092:	d004      	beq.n	800109e <HAL_ADC_Start+0xe6>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a4e      	ldr	r2, [pc, #312]	; (80011d4 <HAL_ADC_Start+0x21c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10a      	bne.n	80010b4 <HAL_ADC_Start+0xfc>
 800109e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	e008      	b.n	80010c6 <HAL_ADC_Start+0x10e>
 80010b4:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <HAL_ADC_Start+0x228>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	bf14      	ite	ne
 80010c0:	2301      	movne	r3, #1
 80010c2:	2300      	moveq	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e6:	d106      	bne.n	80010f6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ec:	f023 0206 	bic.w	r2, r3, #6
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	649a      	str	r2, [r3, #72]	; 0x48
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	221c      	movs	r2, #28
 800110a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001114:	d004      	beq.n	8001120 <HAL_ADC_Start+0x168>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <HAL_ADC_Start+0x21c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d106      	bne.n	800112e <HAL_ADC_Start+0x176>
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_ADC_Start+0x220>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	2b00      	cmp	r3, #0
 800112a:	d03e      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 800112c:	e005      	b.n	800113a <HAL_ADC_Start+0x182>
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_ADC_Start+0x224>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	2b00      	cmp	r3, #0
 8001138:	d037      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001142:	d004      	beq.n	800114e <HAL_ADC_Start+0x196>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <HAL_ADC_Start+0x21c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d106      	bne.n	800115c <HAL_ADC_Start+0x1a4>
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_ADC_Start+0x220>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2b05      	cmp	r3, #5
 8001158:	d027      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 800115a:	e005      	b.n	8001168 <HAL_ADC_Start+0x1b0>
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_ADC_Start+0x224>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	2b05      	cmp	r3, #5
 8001166:	d020      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001170:	d004      	beq.n	800117c <HAL_ADC_Start+0x1c4>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_ADC_Start+0x21c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d106      	bne.n	800118a <HAL_ADC_Start+0x1d2>
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_ADC_Start+0x220>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	2b09      	cmp	r3, #9
 8001186:	d010      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 8001188:	e005      	b.n	8001196 <HAL_ADC_Start+0x1de>
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_ADC_Start+0x224>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2b09      	cmp	r3, #9
 8001194:	d009      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119e:	d004      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_ADC_Start+0x228>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10f      	bne.n	80011ca <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 0204 	orr.w	r2, r2, #4
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	e006      	b.n	80011ca <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80011c4:	e001      	b.n	80011ca <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011c6:	2302      	movs	r3, #2
 80011c8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	50000100 	.word	0x50000100
 80011d8:	50000300 	.word	0x50000300
 80011dc:	50000700 	.word	0x50000700
 80011e0:	50000400 	.word	0x50000400

080011e4 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_ADC_Stop+0x1a>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e023      	b.n	8001246 <HAL_ADC_Stop+0x62>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001206:	216c      	movs	r1, #108	; 0x6c
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fcc7 	bl	8001b9c <ADC_ConversionStop>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d111      	bne.n	800123c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 fc5f 	bl	8001adc <ADC_Disable>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d109      	bne.n	800123c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	f043 0201 	orr.w	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001268:	b480      	push	{r7}
 800126a:	b09d      	sub	sp, #116	; 0x74
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_ADC_ConfigChannel+0x22>
 8001286:	2302      	movs	r3, #2
 8001288:	e2cb      	b.n	8001822 <HAL_ADC_ConfigChannel+0x5ba>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 82af 	bne.w	8001800 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d81c      	bhi.n	80012e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	461a      	mov	r2, r3
 80012be:	231f      	movs	r3, #31
 80012c0:	4093      	lsls	r3, r2
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4019      	ands	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa00 f203 	lsl.w	r2, r0, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
 80012e2:	e063      	b.n	80013ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	d81e      	bhi.n	800132a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	3b1e      	subs	r3, #30
 8001300:	221f      	movs	r2, #31
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	4019      	ands	r1, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	3b1e      	subs	r3, #30
 800131c:	fa00 f203 	lsl.w	r2, r0, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
 8001328:	e040      	b.n	80013ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b0e      	cmp	r3, #14
 8001330:	d81e      	bhi.n	8001370 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	3b3c      	subs	r3, #60	; 0x3c
 8001346:	221f      	movs	r2, #31
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	4019      	ands	r1, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	3b3c      	subs	r3, #60	; 0x3c
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	639a      	str	r2, [r3, #56]	; 0x38
 800136e:	e01d      	b.n	80013ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	3b5a      	subs	r3, #90	; 0x5a
 8001384:	221f      	movs	r2, #31
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	4019      	ands	r1, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	3b5a      	subs	r3, #90	; 0x5a
 80013a0:	fa00 f203 	lsl.w	r2, r0, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 80e5 	bne.w	8001586 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d91c      	bls.n	80013fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6999      	ldr	r1, [r3, #24]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	3b1e      	subs	r3, #30
 80013d6:	2207      	movs	r2, #7
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	4019      	ands	r1, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	6898      	ldr	r0, [r3, #8]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	3b1e      	subs	r3, #30
 80013f0:	fa00 f203 	lsl.w	r2, r0, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	e019      	b.n	8001432 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6959      	ldr	r1, [r3, #20]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	2207      	movs	r2, #7
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	4019      	ands	r1, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	6898      	ldr	r0, [r3, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	fa00 f203 	lsl.w	r2, r0, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	3b01      	subs	r3, #1
 8001450:	2b03      	cmp	r3, #3
 8001452:	d84f      	bhi.n	80014f4 <HAL_ADC_ConfigChannel+0x28c>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <HAL_ADC_ConfigChannel+0x1f4>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	0800146d 	.word	0x0800146d
 8001460:	0800148f 	.word	0x0800148f
 8001464:	080014b1 	.word	0x080014b1
 8001468:	080014d3 	.word	0x080014d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001472:	4b9f      	ldr	r3, [pc, #636]	; (80016f0 <HAL_ADC_ConfigChannel+0x488>)
 8001474:	4013      	ands	r3, r2
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	0691      	lsls	r1, r2, #26
 800147c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800147e:	430a      	orrs	r2, r1
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800148a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800148c:	e07e      	b.n	800158c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001494:	4b96      	ldr	r3, [pc, #600]	; (80016f0 <HAL_ADC_ConfigChannel+0x488>)
 8001496:	4013      	ands	r3, r2
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	0691      	lsls	r1, r2, #26
 800149e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014a0:	430a      	orrs	r2, r1
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014ac:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014ae:	e06d      	b.n	800158c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014b6:	4b8e      	ldr	r3, [pc, #568]	; (80016f0 <HAL_ADC_ConfigChannel+0x488>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	0691      	lsls	r1, r2, #26
 80014c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014c2:	430a      	orrs	r2, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014ce:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014d0:	e05c      	b.n	800158c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014d8:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <HAL_ADC_ConfigChannel+0x488>)
 80014da:	4013      	ands	r3, r2
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	0691      	lsls	r1, r2, #26
 80014e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014e4:	430a      	orrs	r2, r1
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014f0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014f2:	e04b      	b.n	800158c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	069b      	lsls	r3, r3, #26
 8001504:	429a      	cmp	r2, r3
 8001506:	d107      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001516:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800151e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	069b      	lsls	r3, r3, #26
 8001528:	429a      	cmp	r2, r3
 800152a:	d107      	bne.n	800153c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800153a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	069b      	lsls	r3, r3, #26
 800154c:	429a      	cmp	r2, r3
 800154e:	d107      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800155e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	069b      	lsls	r3, r3, #26
 8001570:	429a      	cmp	r2, r3
 8001572:	d10a      	bne.n	800158a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001582:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001584:	e001      	b.n	800158a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001586:	bf00      	nop
 8001588:	e000      	b.n	800158c <HAL_ADC_ConfigChannel+0x324>
      break;
 800158a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d108      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x344>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x344>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_ADC_ConfigChannel+0x346>
 80015ac:	2300      	movs	r3, #0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 8131 	bne.w	8001816 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d00f      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	400a      	ands	r2, r1
 80015d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80015da:	e049      	b.n	8001670 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	409a      	lsls	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b09      	cmp	r3, #9
 80015fc:	d91c      	bls.n	8001638 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6999      	ldr	r1, [r3, #24]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	3b1b      	subs	r3, #27
 8001610:	2207      	movs	r2, #7
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	4019      	ands	r1, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6898      	ldr	r0, [r3, #8]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	3b1b      	subs	r3, #27
 800162a:	fa00 f203 	lsl.w	r2, r0, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	619a      	str	r2, [r3, #24]
 8001636:	e01b      	b.n	8001670 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6959      	ldr	r1, [r3, #20]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	2207      	movs	r2, #7
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	4019      	ands	r1, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6898      	ldr	r0, [r3, #8]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	fa00 f203 	lsl.w	r2, r0, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001678:	d004      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x41c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_ADC_ConfigChannel+0x48c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x420>
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_ADC_ConfigChannel+0x490>)
 8001686:	e000      	b.n	800168a <HAL_ADC_ConfigChannel+0x422>
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_ADC_ConfigChannel+0x494>)
 800168a:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b10      	cmp	r3, #16
 8001692:	d105      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800169c:	2b00      	cmp	r3, #0
 800169e:	d015      	beq.n	80016cc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016a4:	2b11      	cmp	r3, #17
 80016a6:	d105      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00b      	beq.n	80016cc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016b8:	2b12      	cmp	r3, #18
 80016ba:	f040 80ac 	bne.w	8001816 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80016be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80a5 	bne.w	8001816 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d4:	d102      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x474>
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <HAL_ADC_ConfigChannel+0x48c>)
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	e023      	b.n	8001724 <HAL_ADC_ConfigChannel+0x4bc>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_ADC_ConfigChannel+0x48c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10c      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x498>
 80016e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	e01a      	b.n	8001724 <HAL_ADC_ConfigChannel+0x4bc>
 80016ee:	bf00      	nop
 80016f0:	83fff000 	.word	0x83fff000
 80016f4:	50000100 	.word	0x50000100
 80016f8:	50000300 	.word	0x50000300
 80016fc:	50000700 	.word	0x50000700
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <HAL_ADC_ConfigChannel+0x5c8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d102      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x4a8>
 800170a:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <HAL_ADC_ConfigChannel+0x5cc>)
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	e009      	b.n	8001724 <HAL_ADC_ConfigChannel+0x4bc>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a47      	ldr	r2, [pc, #284]	; (8001834 <HAL_ADC_ConfigChannel+0x5cc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x4b8>
 800171a:	4b45      	ldr	r3, [pc, #276]	; (8001830 <HAL_ADC_ConfigChannel+0x5c8>)
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	e001      	b.n	8001724 <HAL_ADC_ConfigChannel+0x4bc>
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x4dc>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x4dc>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_ADC_ConfigChannel+0x4de>
 8001744:	2300      	movs	r3, #0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d150      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800174a:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d010      	beq.n	8001772 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_ADC_ConfigChannel+0x504>
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x504>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_ADC_ConfigChannel+0x506>
 800176c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800176e:	2b00      	cmp	r3, #0
 8001770:	d13c      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b10      	cmp	r3, #16
 8001778:	d11d      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x54e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001782:	d118      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800178c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800178e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <HAL_ADC_ConfigChannel+0x5d0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a29      	ldr	r2, [pc, #164]	; (800183c <HAL_ADC_ConfigChannel+0x5d4>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9a      	lsrs	r2, r3, #18
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80017a6:	e002      	b.n	80017ae <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f9      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017b4:	e02e      	b.n	8001814 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b11      	cmp	r3, #17
 80017bc:	d10b      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x56e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017c6:	d106      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80017d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017d2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017d4:	e01e      	b.n	8001814 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d11a      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017e8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ea:	e013      	b.n	8001814 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	f043 0220 	orr.w	r2, r3, #32
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80017fe:	e00a      	b.n	8001816 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	f043 0220 	orr.w	r2, r3, #32
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001812:	e000      	b.n	8001816 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001814:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 800181e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001822:	4618      	mov	r0, r3
 8001824:	3774      	adds	r7, #116	; 0x74
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	50000400 	.word	0x50000400
 8001834:	50000500 	.word	0x50000500
 8001838:	20000008 	.word	0x20000008
 800183c:	431bde83 	.word	0x431bde83

08001840 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001840:	b480      	push	{r7}
 8001842:	b09b      	sub	sp, #108	; 0x6c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001858:	d102      	bne.n	8001860 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800185a:	4b6c      	ldr	r3, [pc, #432]	; (8001a0c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e01a      	b.n	8001896 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a69      	ldr	r2, [pc, #420]	; (8001a0c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d103      	bne.n	8001872 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800186a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e011      	b.n	8001896 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a66      	ldr	r2, [pc, #408]	; (8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d102      	bne.n	8001882 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800187c:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e009      	b.n	8001896 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a63      	ldr	r2, [pc, #396]	; (8001a14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d102      	bne.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800188c:	4b60      	ldr	r3, [pc, #384]	; (8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e001      	b.n	8001896 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0af      	b.n	8001a00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e0a8      	b.n	8001a00 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 808c 	bne.w	80019de <HAL_ADCEx_MultiModeConfigChannel+0x19e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 8085 	bne.w	80019de <HAL_ADCEx_MultiModeConfigChannel+0x19e>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018dc:	d004      	beq.n	80018e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a4a      	ldr	r2, [pc, #296]	; (8001a0c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d101      	bne.n	80018ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80018e8:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80018ea:	e000      	b.n	80018ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80018ee:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03f      	beq.n	8001978 <HAL_ADCEx_MultiModeConfigChannel+0x138>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	035b      	lsls	r3, r3, #13
 800190a:	430b      	orrs	r3, r1
 800190c:	431a      	orrs	r2, r3
 800190e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001910:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d108      	bne.n	8001932 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001932:	2300      	movs	r3, #0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d15c      	bne.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d107      	bne.n	8001954 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001954:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001956:	2b00      	cmp	r3, #0
 8001958:	d14b      	bne.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800195a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001962:	f023 030f 	bic.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	6811      	ldr	r1, [r2, #0]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	6892      	ldr	r2, [r2, #8]
 800196e:	430a      	orrs	r2, r1
 8001970:	431a      	orrs	r2, r3
 8001972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001974:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001976:	e03c      	b.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001982:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80019a4:	2300      	movs	r3, #0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d123      	bne.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80019c6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d112      	bne.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80019cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80019d4:	f023 030f 	bic.w	r3, r3, #15
 80019d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019da:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019dc:	e009      	b.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f043 0220 	orr.w	r2, r3, #32
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80019f0:	e000      	b.n	80019f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019f2:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 80019fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001a00:	4618      	mov	r0, r3
 8001a02:	376c      	adds	r7, #108	; 0x6c
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	50000100 	.word	0x50000100
 8001a10:	50000400 	.word	0x50000400
 8001a14:	50000500 	.word	0x50000500
 8001a18:	50000300 	.word	0x50000300
 8001a1c:	50000700 	.word	0x50000700

08001a20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d108      	bne.n	8001a4c <ADC_Enable+0x2c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <ADC_Enable+0x2c>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <ADC_Enable+0x2e>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d13c      	bne.n	8001acc <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <ADC_Enable+0xb8>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00d      	beq.n	8001a7c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e028      	b.n	8001ace <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a8c:	f7ff f86c 	bl	8000b68 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a92:	e014      	b.n	8001abe <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a94:	f7ff f868 	bl	8000b68 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d90d      	bls.n	8001abe <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f043 0210 	orr.w	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e007      	b.n	8001ace <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d1e3      	bne.n	8001a94 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	8000003f 	.word	0x8000003f

08001adc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <ADC_Disable+0x2c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <ADC_Disable+0x2c>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <ADC_Disable+0x2e>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d040      	beq.n	8001b90 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030d 	and.w	r3, r3, #13
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d10f      	bne.n	8001b3c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0202 	orr.w	r2, r2, #2
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2203      	movs	r2, #3
 8001b32:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b34:	f7ff f818 	bl	8000b68 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b3a:	e022      	b.n	8001b82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f043 0210 	orr.w	r2, r3, #16
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e01c      	b.n	8001b92 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b58:	f7ff f806 	bl	8000b68 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d90d      	bls.n	8001b82 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f043 0210 	orr.w	r2, r3, #16
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e007      	b.n	8001b92 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d0e3      	beq.n	8001b58 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8093 	beq.w	8001ce8 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bd0:	d12a      	bne.n	8001c28 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d126      	bne.n	8001c28 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d122      	bne.n	8001c28 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001be2:	230c      	movs	r3, #12
 8001be4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001be6:	e014      	b.n	8001c12 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4a42      	ldr	r2, [pc, #264]	; (8001cf4 <ADC_ConversionStop+0x158>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d90d      	bls.n	8001c0c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	649a      	str	r2, [r3, #72]	; 0x48
          
          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e06e      	b.n	8001cea <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1c:	2b40      	cmp	r3, #64	; 0x40
 8001c1e:	d1e3      	bne.n	8001be8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b60      	cmp	r3, #96	; 0x60
 8001c2c:	d015      	beq.n	8001c5a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d10e      	bne.n	8001c5a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0210 	orr.w	r2, r2, #16
 8001c58:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d015      	beq.n	8001c8c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d10e      	bne.n	8001c8c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0220 	orr.w	r2, r2, #32
 8001c8a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2b60      	cmp	r3, #96	; 0x60
 8001c90:	d004      	beq.n	8001c9c <ADC_ConversionStop+0x100>
 8001c92:	2b6c      	cmp	r3, #108	; 0x6c
 8001c94:	d105      	bne.n	8001ca2 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001c96:	230c      	movs	r3, #12
 8001c98:	617b      	str	r3, [r7, #20]
        break;
 8001c9a:	e005      	b.n	8001ca8 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	617b      	str	r3, [r7, #20]
        break;
 8001ca0:	e002      	b.n	8001ca8 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	617b      	str	r3, [r7, #20]
        break;
 8001ca6:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001ca8:	f7fe ff5e 	bl	8000b68 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001cae:	e014      	b.n	8001cda <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001cb0:	f7fe ff5a 	bl	8000b68 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b0b      	cmp	r3, #11
 8001cbc:	d90d      	bls.n	8001cda <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f043 0210 	orr.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e007      	b.n	8001cea <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e3      	bne.n	8001cb0 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	000993ff 	.word	0x000993ff

08001cf8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4907      	ldr	r1, [pc, #28]	; (8001d8c <NVIC_EnableIRQ+0x30>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	da0b      	bge.n	8001dbc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <NVIC_SetPriority+0x4c>)
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	3b04      	subs	r3, #4
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dba:	e009      	b.n	8001dd0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	4907      	ldr	r1, [pc, #28]	; (8001de0 <NVIC_SetPriority+0x50>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e5c:	d301      	bcc.n	8001e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <SysTick_Config+0x40>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f7ff ff8e 	bl	8001d90 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SysTick_Config+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <SysTick_Config+0x40>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff2d 	bl	8001cf8 <NVIC_SetPriorityGrouping>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff42 	bl	8001d40 <NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff8e 	bl	8001de4 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5d 	bl	8001d90 <NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff35 	bl	8001d5c <NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa2 	bl	8001e4c <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e014      	b.n	8001f4e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	791b      	ldrb	r3, [r3, #4]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f006 faf7 	bl	8008528 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001f56:	b480      	push	{r7}
 8001f58:	b087      	sub	sp, #28
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e004      	b.n	8001f8a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	3314      	adds	r3, #20
 8001f88:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	795b      	ldrb	r3, [r3, #5]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DAC_Start+0x16>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e039      	b.n	800202a <HAL_DAC_Start+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10f      	bne.n	8001ffc <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001fe6:	2b3c      	cmp	r3, #60	; 0x3c
 8001fe8:	d118      	bne.n	800201c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e00f      	b.n	800201c <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002006:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800200a:	d107      	bne.n	800201c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0202 	orr.w	r2, r2, #2
 800201a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002036:	b480      	push	{r7}
 8002038:	b087      	sub	sp, #28
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	795b      	ldrb	r3, [r3, #5]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_DAC_ConfigChannel+0x20>
 8002052:	2302      	movs	r3, #2
 8002054:	e036      	b.n	80020c4 <HAL_DAC_ConfigChannel+0x8e>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2202      	movs	r2, #2
 8002060:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800206a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4013      	ands	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	22c0      	movs	r2, #192	; 0xc0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43da      	mvns	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	400a      	ands	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80020ea:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_FLASH_Program+0xd8>)
 80020ec:	7e1b      	ldrb	r3, [r3, #24]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_FLASH_Program+0x26>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e054      	b.n	80021a0 <HAL_FLASH_Program+0xd0>
 80020f6:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_FLASH_Program+0xd8>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002100:	f000 f8a8 	bl	8002254 <FLASH_WaitForLastOperation>
 8002104:	4603      	mov	r3, r0
 8002106:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d144      	bne.n	8002198 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d102      	bne.n	800211a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002114:	2301      	movs	r3, #1
 8002116:	757b      	strb	r3, [r7, #21]
 8002118:	e007      	b.n	800212a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d102      	bne.n	8002126 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002120:	2302      	movs	r3, #2
 8002122:	757b      	strb	r3, [r7, #21]
 8002124:	e001      	b.n	800212a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002126:	2304      	movs	r3, #4
 8002128:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800212a:	2300      	movs	r3, #0
 800212c:	75bb      	strb	r3, [r7, #22]
 800212e:	e02d      	b.n	800218c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002130:	7dbb      	ldrb	r3, [r7, #22]
 8002132:	005a      	lsls	r2, r3, #1
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	eb02 0c03 	add.w	ip, r2, r3
 800213a:	7dbb      	ldrb	r3, [r7, #22]
 800213c:	0119      	lsls	r1, r3, #4
 800213e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002142:	f1c1 0620 	rsb	r6, r1, #32
 8002146:	f1a1 0020 	sub.w	r0, r1, #32
 800214a:	fa22 f401 	lsr.w	r4, r2, r1
 800214e:	fa03 f606 	lsl.w	r6, r3, r6
 8002152:	4334      	orrs	r4, r6
 8002154:	fa23 f000 	lsr.w	r0, r3, r0
 8002158:	4304      	orrs	r4, r0
 800215a:	fa23 f501 	lsr.w	r5, r3, r1
 800215e:	b2a3      	uxth	r3, r4
 8002160:	4619      	mov	r1, r3
 8002162:	4660      	mov	r0, ip
 8002164:	f000 f85a 	bl	800221c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800216c:	f000 f872 	bl	8002254 <FLASH_WaitForLastOperation>
 8002170:	4603      	mov	r3, r0
 8002172:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_FLASH_Program+0xdc>)
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <HAL_FLASH_Program+0xdc>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d107      	bne.n	8002196 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002186:	7dbb      	ldrb	r3, [r7, #22]
 8002188:	3301      	adds	r3, #1
 800218a:	75bb      	strb	r3, [r7, #22]
 800218c:	7dba      	ldrb	r2, [r7, #22]
 800218e:	7d7b      	ldrb	r3, [r7, #21]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3cd      	bcc.n	8002130 <HAL_FLASH_Program+0x60>
 8002194:	e000      	b.n	8002198 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002196:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_FLASH_Program+0xd8>)
 800219a:	2200      	movs	r2, #0
 800219c:	761a      	strb	r2, [r3, #24]

  return status;
 800219e:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a8:	200000b0 	.word	0x200000b0
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_FLASH_Unlock+0x40>)
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00d      	beq.n	80021e2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_FLASH_Unlock+0x40>)
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_FLASH_Unlock+0x44>)
 80021ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_FLASH_Unlock+0x40>)
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_FLASH_Unlock+0x48>)
 80021d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_FLASH_Unlock+0x40>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80021e2:	79fb      	ldrb	r3, [r7, #7]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40022000 	.word	0x40022000
 80021f4:	45670123 	.word	0x45670123
 80021f8:	cdef89ab 	.word	0xcdef89ab

080021fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_FLASH_Lock+0x1c>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_FLASH_Lock+0x1c>)
 8002206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40022000 	.word	0x40022000

0800221c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <FLASH_Program_HalfWord+0x30>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <FLASH_Program_HalfWord+0x34>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4a07      	ldr	r2, [pc, #28]	; (8002250 <FLASH_Program_HalfWord+0x34>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	887a      	ldrh	r2, [r7, #2]
 800223e:	801a      	strh	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	200000b0 	.word	0x200000b0
 8002250:	40022000 	.word	0x40022000

08002254 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7fe fc84 	bl	8000b68 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002262:	e010      	b.n	8002286 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d00c      	beq.n	8002286 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <FLASH_WaitForLastOperation+0x2e>
 8002272:	f7fe fc79 	bl	8000b68 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	d201      	bcs.n	8002286 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e01f      	b.n	80022c6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <FLASH_WaitForLastOperation+0x7c>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d0e8      	beq.n	8002264 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <FLASH_WaitForLastOperation+0x7c>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b20      	cmp	r3, #32
 800229c:	d102      	bne.n	80022a4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <FLASH_WaitForLastOperation+0x7c>)
 80022a0:	2220      	movs	r2, #32
 80022a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <FLASH_WaitForLastOperation+0x7c>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d005      	beq.n	80022bc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <FLASH_WaitForLastOperation+0x7c>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d103      	bne.n	80022c4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80022bc:	f000 f80a 	bl	80022d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000

080022d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <FLASH_SetErrorCode+0x5c>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d109      	bne.n	80022fe <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <FLASH_SetErrorCode+0x60>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f043 0302 	orr.w	r3, r3, #2
 80022f2:	4a10      	ldr	r2, [pc, #64]	; (8002334 <FLASH_SetErrorCode+0x60>)
 80022f4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f043 0310 	orr.w	r3, r3, #16
 80022fc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <FLASH_SetErrorCode+0x5c>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d109      	bne.n	800231e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <FLASH_SetErrorCode+0x60>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <FLASH_SetErrorCode+0x60>)
 8002314:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <FLASH_SetErrorCode+0x5c>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	60d3      	str	r3, [r2, #12]
}  
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40022000 	.word	0x40022000
 8002334:	200000b0 	.word	0x200000b0

08002338 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800234a:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <HAL_FLASHEx_Erase+0xcc>)
 800234c:	7e1b      	ldrb	r3, [r3, #24]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_FLASHEx_Erase+0x1e>
 8002352:	2302      	movs	r3, #2
 8002354:	e052      	b.n	80023fc <HAL_FLASHEx_Erase+0xc4>
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_FLASHEx_Erase+0xcc>)
 8002358:	2201      	movs	r2, #1
 800235a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d115      	bne.n	8002390 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002368:	f7ff ff74 	bl	8002254 <FLASH_WaitForLastOperation>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d140      	bne.n	80023f4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002372:	f000 f84b 	bl	800240c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002376:	f24c 3050 	movw	r0, #50000	; 0xc350
 800237a:	f7ff ff6b 	bl	8002254 <FLASH_WaitForLastOperation>
 800237e:	4603      	mov	r3, r0
 8002380:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_FLASHEx_Erase+0xd0>)
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	4a20      	ldr	r2, [pc, #128]	; (8002408 <HAL_FLASHEx_Erase+0xd0>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	6113      	str	r3, [r2, #16]
 800238e:	e031      	b.n	80023f4 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002390:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002394:	f7ff ff5e 	bl	8002254 <FLASH_WaitForLastOperation>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d12a      	bne.n	80023f4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	e019      	b.n	80023e2 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80023ae:	68b8      	ldr	r0, [r7, #8]
 80023b0:	f000 f846 	bl	8002440 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023b8:	f7ff ff4c 	bl	8002254 <FLASH_WaitForLastOperation>
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_FLASHEx_Erase+0xd0>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_FLASHEx_Erase+0xd0>)
 80023c6:	f023 0302 	bic.w	r3, r3, #2
 80023ca:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	601a      	str	r2, [r3, #0]
            break;
 80023d8:	e00c      	b.n	80023f4 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	02da      	lsls	r2, r3, #11
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3dc      	bcc.n	80023ae <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_FLASHEx_Erase+0xcc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	761a      	strb	r2, [r3, #24]

  return status;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200000b0 	.word	0x200000b0
 8002408:	40022000 	.word	0x40022000

0800240c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <FLASH_MassErase+0x2c>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <FLASH_MassErase+0x30>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <FLASH_MassErase+0x30>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <FLASH_MassErase+0x30>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <FLASH_MassErase+0x30>)
 8002428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242c:	6113      	str	r3, [r2, #16]
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	200000b0 	.word	0x200000b0
 800243c:	40022000 	.word	0x40022000

08002440 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <FLASH_PageErase+0x38>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <FLASH_PageErase+0x3c>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <FLASH_PageErase+0x3c>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800245a:	4a08      	ldr	r2, [pc, #32]	; (800247c <FLASH_PageErase+0x3c>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <FLASH_PageErase+0x3c>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	4a05      	ldr	r2, [pc, #20]	; (800247c <FLASH_PageErase+0x3c>)
 8002466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246a:	6113      	str	r3, [r2, #16]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	200000b0 	.word	0x200000b0
 800247c:	40022000 	.word	0x40022000

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002496:	e160      	b.n	800275a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8152 	beq.w	8002754 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x40>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b12      	cmp	r3, #18
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	6939      	ldr	r1, [r7, #16]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d00b      	beq.n	800255c <HAL_GPIO_Init+0xdc>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002550:	2b11      	cmp	r3, #17
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b12      	cmp	r3, #18
 800255a:	d130      	bne.n	80025be <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002592:	2201      	movs	r2, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 0201 	and.w	r2, r3, #1
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80ac 	beq.w	8002754 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fc:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a5d      	ldr	r2, [pc, #372]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002614:	4a59      	ldr	r2, [pc, #356]	; (800277c <HAL_GPIO_Init+0x2fc>)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800263e:	d025      	beq.n	800268c <HAL_GPIO_Init+0x20c>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a4f      	ldr	r2, [pc, #316]	; (8002780 <HAL_GPIO_Init+0x300>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d01f      	beq.n	8002688 <HAL_GPIO_Init+0x208>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a4e      	ldr	r2, [pc, #312]	; (8002784 <HAL_GPIO_Init+0x304>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d019      	beq.n	8002684 <HAL_GPIO_Init+0x204>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a4d      	ldr	r2, [pc, #308]	; (8002788 <HAL_GPIO_Init+0x308>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d013      	beq.n	8002680 <HAL_GPIO_Init+0x200>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a4c      	ldr	r2, [pc, #304]	; (800278c <HAL_GPIO_Init+0x30c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00d      	beq.n	800267c <HAL_GPIO_Init+0x1fc>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a4b      	ldr	r2, [pc, #300]	; (8002790 <HAL_GPIO_Init+0x310>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d007      	beq.n	8002678 <HAL_GPIO_Init+0x1f8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a4a      	ldr	r2, [pc, #296]	; (8002794 <HAL_GPIO_Init+0x314>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d101      	bne.n	8002674 <HAL_GPIO_Init+0x1f4>
 8002670:	2306      	movs	r3, #6
 8002672:	e00c      	b.n	800268e <HAL_GPIO_Init+0x20e>
 8002674:	2307      	movs	r3, #7
 8002676:	e00a      	b.n	800268e <HAL_GPIO_Init+0x20e>
 8002678:	2305      	movs	r3, #5
 800267a:	e008      	b.n	800268e <HAL_GPIO_Init+0x20e>
 800267c:	2304      	movs	r3, #4
 800267e:	e006      	b.n	800268e <HAL_GPIO_Init+0x20e>
 8002680:	2303      	movs	r3, #3
 8002682:	e004      	b.n	800268e <HAL_GPIO_Init+0x20e>
 8002684:	2302      	movs	r3, #2
 8002686:	e002      	b.n	800268e <HAL_GPIO_Init+0x20e>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_GPIO_Init+0x20e>
 800268c:	2300      	movs	r3, #0
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	f002 0203 	and.w	r2, r2, #3
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	4093      	lsls	r3, r2
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800269e:	4937      	ldr	r1, [pc, #220]	; (800277c <HAL_GPIO_Init+0x2fc>)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ac:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_GPIO_Init+0x318>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026d0:	4a31      	ldr	r2, [pc, #196]	; (8002798 <HAL_GPIO_Init+0x318>)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_GPIO_Init+0x318>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026fa:	4a27      	ldr	r2, [pc, #156]	; (8002798 <HAL_GPIO_Init+0x318>)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_GPIO_Init+0x318>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002724:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_GPIO_Init+0x318>)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_GPIO_Init+0x318>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_GPIO_Init+0x318>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	f47f ae97 	bne.w	8002498 <HAL_GPIO_Init+0x18>
  }
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40010000 	.word	0x40010000
 8002780:	48000400 	.word	0x48000400
 8002784:	48000800 	.word	0x48000800
 8002788:	48000c00 	.word	0x48000c00
 800278c:	48001000 	.word	0x48001000
 8002790:	48001400 	.word	0x48001400
 8002794:	48001800 	.word	0x48001800
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e001      	b.n	80027be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	405a      	eors	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	615a      	str	r2, [r3, #20]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e081      	b.n	8002936 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f005 feac 	bl	80085a4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	; 0x24
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	e006      	b.n	80028a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d104      	bne.n	80028ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	ea42 0103 	orr.w	r1, r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	021a      	lsls	r2, r3, #8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69d9      	ldr	r1, [r3, #28]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	461a      	mov	r2, r3
 800294c:	460b      	mov	r3, r1
 800294e:	817b      	strh	r3, [r7, #10]
 8002950:	4613      	mov	r3, r2
 8002952:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b20      	cmp	r3, #32
 8002962:	f040 80e4 	bne.w	8002b2e <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_I2C_Master_Transmit+0x34>
 8002970:	2302      	movs	r3, #2
 8002972:	e0dd      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x1f0>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800297c:	f7fe f8f4 	bl	8000b68 <HAL_GetTick>
 8002980:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2319      	movs	r3, #25
 8002988:	2201      	movs	r2, #1
 800298a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fc0c 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0c8      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2221      	movs	r2, #33	; 0x21
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2210      	movs	r2, #16
 80029aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	893a      	ldrh	r2, [r7, #8]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2bff      	cmp	r3, #255	; 0xff
 80029ce:	d90e      	bls.n	80029ee <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	22ff      	movs	r2, #255	; 0xff
 80029d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	8979      	ldrh	r1, [r7, #10]
 80029de:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <HAL_I2C_Master_Transmit+0x1f8>)
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fd60 	bl	80034ac <I2C_TransferConfig>
 80029ec:	e070      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	8979      	ldrh	r1, [r7, #10]
 8002a00:	4b4d      	ldr	r3, [pc, #308]	; (8002b38 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fd4f 	bl	80034ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a0e:	e05f      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	6a39      	ldr	r1, [r7, #32]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fc03 	bl	8003220 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d101      	bne.n	8002a2c <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e081      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e07f      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	1c59      	adds	r1, r3, #1
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	6251      	str	r1, [r2, #36]	; 0x24
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d135      	bne.n	8002ad0 <HAL_I2C_Master_Transmit+0x190>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d030      	beq.n	8002ad0 <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fb97 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e053      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2bff      	cmp	r3, #255	; 0xff
 8002a90:	d90e      	bls.n	8002ab0 <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fcff 	bl	80034ac <I2C_TransferConfig>
 8002aae:	e00f      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fcee 	bl	80034ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d19a      	bne.n	8002a10 <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	6a39      	ldr	r1, [r7, #32]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fbde 	bl	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d101      	bne.n	8002af6 <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e01c      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e01a      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2220      	movs	r2, #32
 8002b00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_I2C_Master_Transmit+0x1fc>)
 8002b0e:	400b      	ands	r3, r1
 8002b10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	80002000 	.word	0x80002000
 8002b3c:	fe00e800 	.word	0xfe00e800

08002b40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	817b      	strh	r3, [r7, #10]
 8002b50:	4613      	mov	r3, r2
 8002b52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	f040 80e5 	bne.w	8002d30 <HAL_I2C_Master_Receive+0x1f0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2C_Master_Receive+0x34>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e0de      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1f2>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b7c:	f7fd fff4 	bl	8000b68 <HAL_GetTick>
 8002b80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2319      	movs	r3, #25
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fb0c 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0c9      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1f2>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2222      	movs	r2, #34	; 0x22
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	893a      	ldrh	r2, [r7, #8]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2bff      	cmp	r3, #255	; 0xff
 8002bce:	d90e      	bls.n	8002bee <HAL_I2C_Master_Receive+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	22ff      	movs	r2, #255	; 0xff
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	8979      	ldrh	r1, [r7, #10]
 8002bde:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <HAL_I2C_Master_Receive+0x1fc>)
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fc60 	bl	80034ac <I2C_TransferConfig>
 8002bec:	e071      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x192>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	8979      	ldrh	r1, [r7, #10]
 8002c00:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <HAL_I2C_Master_Receive+0x1fc>)
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fc4f 	bl	80034ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c0e:	e060      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x192>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	6a39      	ldr	r1, [r7, #32]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fb7f 	bl	8003318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_I2C_Master_Receive+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d101      	bne.n	8002c2c <HAL_I2C_Master_Receive+0xec>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e082      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1f2>
        }
        else
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e080      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1f2>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c59      	adds	r1, r3, #1
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	6251      	str	r1, [r2, #36]	; 0x24
 8002c40:	b2c2      	uxtb	r2, r0
 8002c42:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d135      	bne.n	8002cd2 <HAL_I2C_Master_Receive+0x192>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d030      	beq.n	8002cd2 <HAL_I2C_Master_Receive+0x192>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fa96 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Master_Receive+0x14a>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e053      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1f2>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2bff      	cmp	r3, #255	; 0xff
 8002c92:	d90e      	bls.n	8002cb2 <HAL_I2C_Master_Receive+0x172>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	22ff      	movs	r2, #255	; 0xff
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	8979      	ldrh	r1, [r7, #10]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fbfe 	bl	80034ac <I2C_TransferConfig>
 8002cb0:	e00f      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x192>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	8979      	ldrh	r1, [r7, #10]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fbed 	bl	80034ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d199      	bne.n	8002c10 <HAL_I2C_Master_Receive+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	6a39      	ldr	r1, [r7, #32]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fadd 	bl	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_I2C_Master_Receive+0x1bc>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d101      	bne.n	8002cf8 <HAL_I2C_Master_Receive+0x1b8>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e01c      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1f2>
      }
      else
      {
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e01a      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1f2>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2220      	movs	r2, #32
 8002d02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_I2C_Master_Receive+0x200>)
 8002d10:	400b      	ands	r3, r1
 8002d12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1f2>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	80002400 	.word	0x80002400
 8002d40:	fe00e800 	.word	0xfe00e800

08002d44 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	f040 80f5 	bne.w	8002f50 <HAL_I2C_Slave_Transmit+0x20c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_I2C_Slave_Transmit+0x2e>
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_I2C_Slave_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0ed      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2C_Slave_Transmit+0x40>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0e6      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d8c:	f7fd feec 	bl	8000b68 <HAL_GetTick>
 8002d90:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2221      	movs	r2, #33	; 0x21
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	88fa      	ldrh	r2, [r7, #6]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc8:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2108      	movs	r1, #8
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f9e9 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_I2C_Slave_Transmit+0xb0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dee:	605a      	str	r2, [r3, #4]
      return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0ae      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2208      	movs	r2, #8
 8002dfa:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d118      	bne.n	8002e36 <HAL_I2C_Slave_Transmit+0xf2>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2108      	movs	r1, #8
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f9cc 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_I2C_Slave_Transmit+0xea>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e28:	605a      	str	r2, [r3, #4]
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e091      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2208      	movs	r2, #8
 8002e34:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f9b2 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d031      	beq.n	8002eb2 <HAL_I2C_Slave_Transmit+0x16e>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e5c:	605a      	str	r2, [r3, #4]
      return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e077      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f9da 	bl	8003220 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00f      	beq.n	8002e92 <HAL_I2C_Slave_Transmit+0x14e>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e80:	605a      	str	r2, [r3, #4]

        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d101      	bne.n	8002e8e <HAL_I2C_Slave_Transmit+0x14a>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e061      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
        }
        else
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e05f      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	1c59      	adds	r1, r3, #1
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	6251      	str	r1, [r2, #36]	; 0x24
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1d2      	bne.n	8002e62 <HAL_I2C_Slave_Transmit+0x11e>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	6839      	ldr	r1, [r7, #0]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f9ed 	bl	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d011      	beq.n	8002ef0 <HAL_I2C_Slave_Transmit+0x1ac>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eda:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d103      	bne.n	8002eec <HAL_I2C_Slave_Transmit+0x1a8>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
 8002eea:	e001      	b.n	8002ef0 <HAL_I2C_Slave_Transmit+0x1ac>
      }
      else
      {
        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e030      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f951 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <HAL_I2C_Slave_Transmit+0x1e0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1e:	605a      	str	r2, [r3, #4]
      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e016      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f32:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e000      	b.n	8002f52 <HAL_I2C_Slave_Transmit+0x20e>
  }
  else
  {
    return HAL_BUSY;
 8002f50:	2302      	movs	r3, #2
  }
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b088      	sub	sp, #32
 8002f5e:	af02      	add	r7, sp, #8
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	f040 80ef 	bne.w	800315a <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_I2C_Slave_Receive+0x2e>
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_I2C_Slave_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0e7      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Slave_Receive+0x40>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e0e0      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fa2:	f7fd fde1 	bl	8000b68 <HAL_GetTick>
 8002fa6:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2222      	movs	r2, #34	; 0x22
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fde:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2108      	movs	r1, #8
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f8de 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_I2C_Slave_Receive+0xb0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003004:	605a      	str	r2, [r3, #4]
      return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0a8      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2208      	movs	r2, #8
 8003010:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2201      	movs	r2, #1
 800301a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f8c4 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d04a      	beq.n	80030c0 <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003038:	605a      	str	r2, [r3, #4]
      return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e08e      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f968 	bl	8003318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d027      	beq.n	800309e <HAL_I2C_Slave_Receive+0x144>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305c:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d110      	bne.n	800308e <HAL_I2C_Slave_Receive+0x134>
        {
          /* Read data from RXDR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	6251      	str	r1, [r2, #36]	; 0x24
 800307c:	b2c2      	uxtb	r2, r0
 800307e:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	2b20      	cmp	r3, #32
 8003094:	d101      	bne.n	800309a <HAL_I2C_Slave_Receive+0x140>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e060      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
        }
        else
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e05e      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	1c59      	adds	r1, r3, #1
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	6251      	str	r1, [r2, #36]	; 0x24
 80030ae:	b2c2      	uxtb	r2, r0
 80030b0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1b9      	bne.n	800303e <HAL_I2C_Slave_Receive+0xe4>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f8e6 	bl	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00f      	beq.n	80030fa <HAL_I2C_Slave_Receive+0x1a0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e8:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d101      	bne.n	80030f6 <HAL_I2C_Slave_Receive+0x19c>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e032      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e030      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2220      	movs	r2, #32
 8003100:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f84c 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_I2C_Slave_Receive+0x1d4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003128:	605a      	str	r2, [r3, #4]
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e016      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800313c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d103      	bne.n	8003182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d007      	beq.n	80031a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	619a      	str	r2, [r3, #24]
  }
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031bc:	e01c      	b.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d018      	beq.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031cc:	f7fd fccc 	bl	8000b68 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d20d      	bcs.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e00f      	b.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	429a      	cmp	r2, r3
 8003214:	d0d3      	beq.n	80031be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800322c:	e02c      	b.n	8003288 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f8dc 	bl	80033f0 <I2C_IsAcknowledgeFailed>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e02a      	b.n	8003298 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d01e      	beq.n	8003288 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003250:	f7fd fc8a 	bl	8000b68 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	d213      	bcs.n	8003288 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e007      	b.n	8003298 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b02      	cmp	r3, #2
 8003294:	d1cb      	bne.n	800322e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ac:	e028      	b.n	8003300 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f89c 	bl	80033f0 <I2C_IsAcknowledgeFailed>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e026      	b.n	8003310 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032c8:	f7fd fc4e 	bl	8000b68 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d213      	bcs.n	8003300 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e007      	b.n	8003310 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d1cf      	bne.n	80032ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003324:	e055      	b.n	80033d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f860 	bl	80033f0 <I2C_IsAcknowledgeFailed>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e053      	b.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b20      	cmp	r3, #32
 8003346:	d129      	bne.n	800339c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b04      	cmp	r3, #4
 8003354:	d105      	bne.n	8003362 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e03f      	b.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2220      	movs	r2, #32
 8003368:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003376:	400b      	ands	r3, r1
 8003378:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e022      	b.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80033a2:	f7fd fbe1 	bl	8000b68 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d20f      	bcs.n	80033d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e007      	b.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d1a2      	bne.n	8003326 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b10      	cmp	r3, #16
 8003408:	d148      	bne.n	800349c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340a:	e01c      	b.n	8003446 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d018      	beq.n	8003446 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <I2C_IsAcknowledgeFailed+0x3a>
 800341a:	f7fd fba5 	bl	8000b68 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	d20d      	bcs.n	8003446 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e02b      	b.n	800349e <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b20      	cmp	r3, #32
 8003452:	d1db      	bne.n	800340c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2210      	movs	r2, #16
 800345a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2220      	movs	r2, #32
 8003462:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff fe7d 	bl	8003164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <I2C_IsAcknowledgeFailed+0xb8>)
 8003476:	400b      	ands	r3, r1
 8003478:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2204      	movs	r2, #4
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	fe00e800 	.word	0xfe00e800

080034ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	817b      	strh	r3, [r7, #10]
 80034ba:	4613      	mov	r3, r2
 80034bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	0d5b      	lsrs	r3, r3, #21
 80034c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034cc:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <I2C_TransferConfig+0x58>)
 80034ce:	430b      	orrs	r3, r1
 80034d0:	43db      	mvns	r3, r3
 80034d2:	ea02 0103 	and.w	r1, r2, r3
 80034d6:	897b      	ldrh	r3, [r7, #10]
 80034d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034dc:	7a7b      	ldrb	r3, [r7, #9]
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	03ff63ff 	.word	0x03ff63ff

08003508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b20      	cmp	r3, #32
 800351c:	d138      	bne.n	8003590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003528:	2302      	movs	r3, #2
 800352a:	e032      	b.n	8003592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800355a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	e000      	b.n	8003592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800359e:	b480      	push	{r7}
 80035a0:	b085      	sub	sp, #20
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d139      	bne.n	800362c <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e033      	b.n	800362e <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2224      	movs	r2, #36	; 0x24
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003642:	af00      	add	r7, sp, #0
 8003644:	1d3b      	adds	r3, r7, #4
 8003646:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f000 beda 	b.w	800440a <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8164 	beq.w	800392e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003666:	4bb0      	ldr	r3, [pc, #704]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b04      	cmp	r3, #4
 8003670:	d00c      	beq.n	800368c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003672:	4bad      	ldr	r3, [pc, #692]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b08      	cmp	r3, #8
 800367c:	d15a      	bne.n	8003734 <HAL_RCC_OscConfig+0xf8>
 800367e:	4baa      	ldr	r3, [pc, #680]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d153      	bne.n	8003734 <HAL_RCC_OscConfig+0xf8>
 800368c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003690:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80036a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	fab3 f383 	clz	r3, r3
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d102      	bne.n	80036be <HAL_RCC_OscConfig+0x82>
 80036b8:	4b9b      	ldr	r3, [pc, #620]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0xae>
 80036be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80036d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80036da:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80036e6:	4b90      	ldr	r3, [pc, #576]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036ee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80036f2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80036f6:	fa92 f2a2 	rbit	r2, r2
 80036fa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80036fe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003702:	fab2 f282 	clz	r2, r2
 8003706:	b252      	sxtb	r2, r2
 8003708:	f042 0220 	orr.w	r2, r2, #32
 800370c:	b252      	sxtb	r2, r2
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	f002 021f 	and.w	r2, r2, #31
 8003714:	2101      	movs	r1, #1
 8003716:	fa01 f202 	lsl.w	r2, r1, r2
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8105 	beq.w	800392c <HAL_RCC_OscConfig+0x2f0>
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 80ff 	bne.w	800392c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f000 be6b 	b.w	800440a <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x112>
 8003740:	4b79      	ldr	r3, [pc, #484]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a78      	ldr	r2, [pc, #480]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e030      	b.n	80037b0 <HAL_RCC_OscConfig+0x174>
 800374e:	1d3b      	adds	r3, r7, #4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10c      	bne.n	8003772 <HAL_RCC_OscConfig+0x136>
 8003758:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a72      	ldr	r2, [pc, #456]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b70      	ldr	r3, [pc, #448]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6f      	ldr	r2, [pc, #444]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e01e      	b.n	80037b0 <HAL_RCC_OscConfig+0x174>
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x15c>
 800377e:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a69      	ldr	r2, [pc, #420]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b67      	ldr	r3, [pc, #412]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a66      	ldr	r2, [pc, #408]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0x174>
 8003798:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a62      	ldr	r2, [pc, #392]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b60      	ldr	r3, [pc, #384]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a5f      	ldr	r2, [pc, #380]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 80037aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b0:	1d3b      	adds	r3, r7, #4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d05a      	beq.n	8003870 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fd f9d5 	bl	8000b68 <HAL_GetTick>
 80037be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd f9d0 	bl	8000b68 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	; 0x64
 80037d2:	d902      	bls.n	80037da <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	f000 be18 	b.w	800440a <HAL_RCC_OscConfig+0xdce>
 80037da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037de:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80037ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d102      	bne.n	800380c <HAL_RCC_OscConfig+0x1d0>
 8003806:	4b48      	ldr	r3, [pc, #288]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	e015      	b.n	8003838 <HAL_RCC_OscConfig+0x1fc>
 800380c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003810:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003824:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003828:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003834:	4b3c      	ldr	r3, [pc, #240]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800383c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003840:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003844:	fa92 f2a2 	rbit	r2, r2
 8003848:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 800384c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003850:	fab2 f282 	clz	r2, r2
 8003854:	b252      	sxtb	r2, r2
 8003856:	f042 0220 	orr.w	r2, r2, #32
 800385a:	b252      	sxtb	r2, r2
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f002 021f 	and.w	r2, r2, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0aa      	beq.n	80037c4 <HAL_RCC_OscConfig+0x188>
 800386e:	e05e      	b.n	800392e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fd f97a 	bl	8000b68 <HAL_GetTick>
 8003874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387a:	f7fd f975 	bl	8000b68 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d902      	bls.n	8003890 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	f000 bdbd 	b.w	800440a <HAL_RCC_OscConfig+0xdce>
 8003890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003894:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80038a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a8:	fab3 f383 	clz	r3, r3
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d102      	bne.n	80038c2 <HAL_RCC_OscConfig+0x286>
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	e015      	b.n	80038ee <HAL_RCC_OscConfig+0x2b2>
 80038c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80038d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80038de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCC_OscConfig+0x2ec>)
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038f2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80038f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80038fa:	fa92 f2a2 	rbit	r2, r2
 80038fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8003902:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003906:	fab2 f282 	clz	r2, r2
 800390a:	b252      	sxtb	r2, r2
 800390c:	f042 0220 	orr.w	r2, r2, #32
 8003910:	b252      	sxtb	r2, r2
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f002 021f 	and.w	r2, r2, #31
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1aa      	bne.n	800387a <HAL_RCC_OscConfig+0x23e>
 8003924:	e003      	b.n	800392e <HAL_RCC_OscConfig+0x2f2>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8171 	beq.w	8003c20 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800393e:	4bd0      	ldr	r3, [pc, #832]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00c      	beq.n	8003964 <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800394a:	4bcd      	ldr	r3, [pc, #820]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b08      	cmp	r3, #8
 8003954:	d16e      	bne.n	8003a34 <HAL_RCC_OscConfig+0x3f8>
 8003956:	4bca      	ldr	r3, [pc, #808]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800395e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003962:	d167      	bne.n	8003a34 <HAL_RCC_OscConfig+0x3f8>
 8003964:	2302      	movs	r3, #2
 8003966:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8003976:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d102      	bne.n	8003994 <HAL_RCC_OscConfig+0x358>
 800398e:	4bbc      	ldr	r3, [pc, #752]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	e013      	b.n	80039bc <HAL_RCC_OscConfig+0x380>
 8003994:	2302      	movs	r3, #2
 8003996:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80039a6:	2302      	movs	r3, #2
 80039a8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80039ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039b0:	fa93 f3a3 	rbit	r3, r3
 80039b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80039b8:	4bb1      	ldr	r3, [pc, #708]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2202      	movs	r2, #2
 80039be:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80039c2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80039c6:	fa92 f2a2 	rbit	r2, r2
 80039ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80039ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80039d2:	fab2 f282 	clz	r2, r2
 80039d6:	b252      	sxtb	r2, r2
 80039d8:	f042 0220 	orr.w	r2, r2, #32
 80039dc:	b252      	sxtb	r2, r2
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f002 021f 	and.w	r2, r2, #31
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_RCC_OscConfig+0x3c4>
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d002      	beq.n	8003a00 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f000 bd05 	b.w	800440a <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b9f      	ldr	r3, [pc, #636]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6919      	ldr	r1, [r3, #16]
 8003a0e:	23f8      	movs	r3, #248	; 0xf8
 8003a10:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8003a20:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	4994      	ldr	r1, [pc, #592]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e0f5      	b.n	8003c20 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8085 	beq.w	8003b4a <HAL_RCC_OscConfig+0x50e>
 8003a40:	2301      	movs	r3, #1
 8003a42:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8003a52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	461a      	mov	r2, r3
 8003a66:	2301      	movs	r3, #1
 8003a68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fd f87d 	bl	8000b68 <HAL_GetTick>
 8003a6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fd f878 	bl	8000b68 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d902      	bls.n	8003a8a <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	f000 bcc0 	b.w	800440a <HAL_RCC_OscConfig+0xdce>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8003a9c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d102      	bne.n	8003aba <HAL_RCC_OscConfig+0x47e>
 8003ab4:	4b72      	ldr	r3, [pc, #456]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	e013      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4a6>
 8003aba:	2302      	movs	r3, #2
 8003abc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003acc:	2302      	movs	r3, #2
 8003ace:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003ad2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ade:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003ae8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003aec:	fa92 f2a2 	rbit	r2, r2
 8003af0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8003af4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003af8:	fab2 f282 	clz	r2, r2
 8003afc:	b252      	sxtb	r2, r2
 8003afe:	f042 0220 	orr.w	r2, r2, #32
 8003b02:	b252      	sxtb	r2, r2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	f002 021f 	and.w	r2, r2, #31
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ae      	beq.n	8003a74 <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	4b5a      	ldr	r3, [pc, #360]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6919      	ldr	r1, [r3, #16]
 8003b24:	23f8      	movs	r3, #248	; 0xf8
 8003b26:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8003b36:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	494f      	ldr	r1, [pc, #316]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]
 8003b48:	e06a      	b.n	8003c20 <HAL_RCC_OscConfig+0x5e4>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8003b5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b60:	fab3 f383 	clz	r3, r3
 8003b64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fc fff8 	bl	8000b68 <HAL_GetTick>
 8003b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7e:	f7fc fff3 	bl	8000b68 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d902      	bls.n	8003b94 <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	f000 bc3b 	b.w	800440a <HAL_RCC_OscConfig+0xdce>
 8003b94:	2302      	movs	r3, #2
 8003b96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8003ba6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d102      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x588>
 8003bbe:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	e013      	b.n	8003bec <HAL_RCC_OscConfig+0x5b0>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003bdc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <HAL_RCC_OscConfig+0x644>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2202      	movs	r2, #2
 8003bee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003bf2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003bf6:	fa92 f2a2 	rbit	r2, r2
 8003bfa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8003bfe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c02:	fab2 f282 	clz	r2, r2
 8003c06:	b252      	sxtb	r2, r2
 8003c08:	f042 0220 	orr.w	r2, r2, #32
 8003c0c:	b252      	sxtb	r2, r2
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	f002 021f 	and.w	r2, r2, #31
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ae      	bne.n	8003b7e <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c20:	1d3b      	adds	r3, r7, #4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80d7 	beq.w	8003dde <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d066      	beq.n	8003d08 <HAL_RCC_OscConfig+0x6cc>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8003c4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_OscConfig+0x648>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2301      	movs	r3, #1
 8003c60:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c62:	f7fc ff81 	bl	8000b68 <HAL_GetTick>
 8003c66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6a:	e00d      	b.n	8003c88 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c6c:	f7fc ff7c 	bl	8000b68 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d905      	bls.n	8003c88 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e3c4      	b.n	800440a <HAL_RCC_OscConfig+0xdce>
 8003c80:	40021000 	.word	0x40021000
 8003c84:	10908120 	.word	0x10908120
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ca4:	fa93 f2a3 	rbit	r2, r3
 8003ca8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fa93 f2a3 	rbit	r2, r3
 8003cc0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003cc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	4ba5      	ldr	r3, [pc, #660]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cce:	2102      	movs	r1, #2
 8003cd0:	6019      	str	r1, [r3, #0]
 8003cd2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	fa93 f1a3 	rbit	r1, r3
 8003cdc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ce0:	6019      	str	r1, [r3, #0]
  return(result);
 8003ce2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b25b      	sxtb	r3, r3
 8003cee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cf2:	b25b      	sxtb	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0b2      	beq.n	8003c6c <HAL_RCC_OscConfig+0x630>
 8003d06:	e06a      	b.n	8003dde <HAL_RCC_OscConfig+0x7a2>
 8003d08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	fa93 f2a3 	rbit	r2, r3
 8003d1a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d1e:	601a      	str	r2, [r3, #0]
  return(result);
 8003d20:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d24:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b8c      	ldr	r3, [pc, #560]	; (8003f60 <HAL_RCC_OscConfig+0x924>)
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	2300      	movs	r3, #0
 8003d36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d38:	f7fc ff16 	bl	8000b68 <HAL_GetTick>
 8003d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d40:	e009      	b.n	8003d56 <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fc ff11 	bl	8000b68 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e359      	b.n	800440a <HAL_RCC_OscConfig+0xdce>
 8003d56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	fa93 f2a3 	rbit	r2, r3
 8003d68:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d72:	2202      	movs	r2, #2
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	fa93 f2a3 	rbit	r2, r3
 8003d80:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9e:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003da6:	2102      	movs	r1, #2
 8003da8:	6019      	str	r1, [r3, #0]
 8003daa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	fa93 f1a3 	rbit	r1, r3
 8003db4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003db8:	6019      	str	r1, [r3, #0]
  return(result);
 8003dba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	fab3 f383 	clz	r3, r3
 8003dc4:	b25b      	sxtb	r3, r3
 8003dc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003dca:	b25b      	sxtb	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1b1      	bne.n	8003d42 <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8159 	beq.w	80040a0 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df4:	4b59      	ldr	r3, [pc, #356]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d112      	bne.n	8003e26 <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b56      	ldr	r3, [pc, #344]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4a55      	ldr	r2, [pc, #340]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	61d3      	str	r3, [r2, #28]
 8003e0c:	4b53      	ldr	r3, [pc, #332]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f107 030c 	add.w	r3, r7, #12
 8003e1e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b4f      	ldr	r3, [pc, #316]	; (8003f64 <HAL_RCC_OscConfig+0x928>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11a      	bne.n	8003e68 <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e32:	4b4c      	ldr	r3, [pc, #304]	; (8003f64 <HAL_RCC_OscConfig+0x928>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a4b      	ldr	r2, [pc, #300]	; (8003f64 <HAL_RCC_OscConfig+0x928>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7fc fe93 	bl	8000b68 <HAL_GetTick>
 8003e42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	e009      	b.n	8003e5c <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fc fe8e 	bl	8000b68 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	; 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e2d6      	b.n	800440a <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <HAL_RCC_OscConfig+0x928>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ef      	beq.n	8003e48 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d106      	bne.n	8003e80 <HAL_RCC_OscConfig+0x844>
 8003e72:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	4a39      	ldr	r2, [pc, #228]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6213      	str	r3, [r2, #32]
 8003e7e:	e02f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
 8003e80:	1d3b      	adds	r3, r7, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x868>
 8003e8a:	4b34      	ldr	r3, [pc, #208]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4a33      	ldr	r2, [pc, #204]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6213      	str	r3, [r2, #32]
 8003e96:	4b31      	ldr	r3, [pc, #196]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	6213      	str	r3, [r2, #32]
 8003ea2:	e01d      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b05      	cmp	r3, #5
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x88c>
 8003eae:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003eb4:	f043 0304 	orr.w	r3, r3, #4
 8003eb8:	6213      	str	r3, [r2, #32]
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCC_OscConfig+0x8a4>
 8003ec8:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	6213      	str	r3, [r2, #32]
 8003ed4:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4a20      	ldr	r2, [pc, #128]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003eda:	f023 0304 	bic.w	r3, r3, #4
 8003ede:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ee0:	1d3b      	adds	r3, r7, #4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d06b      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fc fe3d 	bl	8000b68 <HAL_GetTick>
 8003eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fc fe38 	bl	8000b68 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e27e      	b.n	800440a <HAL_RCC_OscConfig+0xdce>
 8003f0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f10:	2202      	movs	r2, #2
 8003f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	fa93 f2a3 	rbit	r2, r3
 8003f1e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f28:	2202      	movs	r2, #2
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	fa93 f2a3 	rbit	r2, r3
 8003f36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f3a:	601a      	str	r2, [r3, #0]
  return(result);
 8003f3c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d108      	bne.n	8003f68 <HAL_RCC_OscConfig+0x92c>
 8003f56:	4b01      	ldr	r3, [pc, #4]	; (8003f5c <HAL_RCC_OscConfig+0x920>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	e013      	b.n	8003f84 <HAL_RCC_OscConfig+0x948>
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	10908120 	.word	0x10908120
 8003f64:	40007000 	.word	0x40007000
 8003f68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	fa93 f2a3 	rbit	r2, r3
 8003f7a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	4bc0      	ldr	r3, [pc, #768]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003f88:	2102      	movs	r1, #2
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	fa92 f1a2 	rbit	r1, r2
 8003f96:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003f9a:	6011      	str	r1, [r2, #0]
  return(result);
 8003f9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	fab2 f282 	clz	r2, r2
 8003fa6:	b252      	sxtb	r2, r2
 8003fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fac:	b252      	sxtb	r2, r2
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	f002 021f 	and.w	r2, r2, #31
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d099      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x8b8>
 8003fc0:	e064      	b.n	800408c <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fc fdd1 	bl	8000b68 <HAL_GetTick>
 8003fc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7fc fdcc 	bl	8000b68 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e212      	b.n	800440a <HAL_RCC_OscConfig+0xdce>
 8003fe4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003fe8:	2202      	movs	r2, #2
 8003fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	fa93 f2a3 	rbit	r2, r3
 8003ff6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004000:	2202      	movs	r2, #2
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	fa93 f2a3 	rbit	r2, r3
 800400e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004012:	601a      	str	r2, [r3, #0]
  return(result);
 8004014:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004018:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d102      	bne.n	8004034 <HAL_RCC_OscConfig+0x9f8>
 800402e:	4b95      	ldr	r3, [pc, #596]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	e00d      	b.n	8004050 <HAL_RCC_OscConfig+0xa14>
 8004034:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004038:	2202      	movs	r2, #2
 800403a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	fa93 f2a3 	rbit	r2, r3
 8004046:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004054:	2102      	movs	r1, #2
 8004056:	6011      	str	r1, [r2, #0]
 8004058:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	fa92 f1a2 	rbit	r1, r2
 8004062:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004066:	6011      	str	r1, [r2, #0]
  return(result);
 8004068:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	fab2 f282 	clz	r2, r2
 8004072:	b252      	sxtb	r2, r2
 8004074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004078:	b252      	sxtb	r2, r2
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	f002 021f 	and.w	r2, r2, #31
 8004080:	2101      	movs	r1, #1
 8004082:	fa01 f202 	lsl.w	r2, r1, r2
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d19f      	bne.n	8003fcc <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800408c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b7b      	ldr	r3, [pc, #492]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	4a7a      	ldr	r2, [pc, #488]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 81ae 	beq.w	8004408 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ac:	4b75      	ldr	r3, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	f000 81a5 	beq.w	8004404 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	f040 811d 	bne.w	8004300 <HAL_RCC_OscConfig+0xcc4>
 80040c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	fa93 f2a3 	rbit	r2, r3
 80040da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040de:	601a      	str	r2, [r3, #0]
  return(result);
 80040e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	461a      	mov	r2, r3
 80040f6:	2300      	movs	r3, #0
 80040f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fc fd35 	bl	8000b68 <HAL_GetTick>
 80040fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004102:	e009      	b.n	8004118 <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fc fd30 	bl	8000b68 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e178      	b.n	800440a <HAL_RCC_OscConfig+0xdce>
 8004118:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800411c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fa93 f2a3 	rbit	r2, r3
 800412c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004130:	601a      	str	r2, [r3, #0]
  return(result);
 8004132:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004136:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d102      	bne.n	8004152 <HAL_RCC_OscConfig+0xb16>
 800414c:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	e01b      	b.n	800418a <HAL_RCC_OscConfig+0xb4e>
 8004152:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800415a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	fa93 f2a3 	rbit	r2, r3
 8004180:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800418e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004192:	6011      	str	r1, [r2, #0]
 8004194:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	fa92 f1a2 	rbit	r1, r2
 800419e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041a2:	6011      	str	r1, [r2, #0]
  return(result);
 80041a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	fab2 f282 	clz	r2, r2
 80041ae:	b252      	sxtb	r2, r2
 80041b0:	f042 0220 	orr.w	r2, r2, #32
 80041b4:	b252      	sxtb	r2, r2
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	f002 021f 	and.w	r2, r2, #31
 80041bc:	2101      	movs	r1, #1
 80041be:	fa01 f202 	lsl.w	r2, r1, r2
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d19d      	bne.n	8004104 <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f023 020f 	bic.w	r2, r3, #15
 80041d0:	1d3b      	adds	r3, r7, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	492b      	ldr	r1, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	62cb      	str	r3, [r1, #44]	; 0x2c
 80041dc:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80041e4:	1d3b      	adds	r3, r7, #4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a19      	ldr	r1, [r3, #32]
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	430b      	orrs	r3, r1
 80041f2:	4924      	ldr	r1, [pc, #144]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
 80041f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	fa93 f2a3 	rbit	r2, r3
 800420c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004210:	601a      	str	r2, [r3, #0]
  return(result);
 8004212:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004216:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004220:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	461a      	mov	r2, r3
 8004228:	2301      	movs	r3, #1
 800422a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fc fc9c 	bl	8000b68 <HAL_GetTick>
 8004230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004234:	e009      	b.n	800424a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004236:	f7fc fc97 	bl	8000b68 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0df      	b.n	800440a <HAL_RCC_OscConfig+0xdce>
 800424a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800424e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	fa93 f2a3 	rbit	r2, r3
 800425e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004262:	601a      	str	r2, [r3, #0]
  return(result);
 8004264:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004268:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	d104      	bne.n	8004288 <HAL_RCC_OscConfig+0xc4c>
 800427e:	4b01      	ldr	r3, [pc, #4]	; (8004284 <HAL_RCC_OscConfig+0xc48>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	e01d      	b.n	80042c0 <HAL_RCC_OscConfig+0xc84>
 8004284:	40021000 	.word	0x40021000
 8004288:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800428c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	fa93 f2a3 	rbit	r2, r3
 800429c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	fa93 f2a3 	rbit	r2, r3
 80042b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	4b55      	ldr	r3, [pc, #340]	; (8004414 <HAL_RCC_OscConfig+0xdd8>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	fa92 f1a2 	rbit	r1, r2
 80042d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042d8:	6011      	str	r1, [r2, #0]
  return(result);
 80042da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	fab2 f282 	clz	r2, r2
 80042e4:	b252      	sxtb	r2, r2
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	b252      	sxtb	r2, r2
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	f002 021f 	and.w	r2, r2, #31
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d09b      	beq.n	8004236 <HAL_RCC_OscConfig+0xbfa>
 80042fe:	e083      	b.n	8004408 <HAL_RCC_OscConfig+0xdcc>
 8004300:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004304:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	fa93 f2a3 	rbit	r2, r3
 8004314:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004318:	601a      	str	r2, [r3, #0]
  return(result);
 800431a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800431e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004320:	fab3 f383 	clz	r3, r3
 8004324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	461a      	mov	r2, r3
 8004330:	2300      	movs	r3, #0
 8004332:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fc fc18 	bl	8000b68 <HAL_GetTick>
 8004338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800433c:	e009      	b.n	8004352 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433e:	f7fc fc13 	bl	8000b68 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e05b      	b.n	800440a <HAL_RCC_OscConfig+0xdce>
 8004352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004356:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800435a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	fa93 f2a3 	rbit	r2, r3
 8004366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800436a:	601a      	str	r2, [r3, #0]
  return(result);
 800436c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004370:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d102      	bne.n	800438c <HAL_RCC_OscConfig+0xd50>
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <HAL_RCC_OscConfig+0xdd8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	e01b      	b.n	80043c4 <HAL_RCC_OscConfig+0xd88>
 800438c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	fa93 f2a3 	rbit	r2, r3
 80043a0:	f107 0320 	add.w	r3, r7, #32
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f107 031c 	add.w	r3, r7, #28
 80043aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f107 031c 	add.w	r3, r7, #28
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	fa93 f2a3 	rbit	r2, r3
 80043ba:	f107 0318 	add.w	r3, r7, #24
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_RCC_OscConfig+0xdd8>)
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f107 0214 	add.w	r2, r7, #20
 80043c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043cc:	6011      	str	r1, [r2, #0]
 80043ce:	f107 0214 	add.w	r2, r7, #20
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	fa92 f1a2 	rbit	r1, r2
 80043d8:	f107 0210 	add.w	r2, r7, #16
 80043dc:	6011      	str	r1, [r2, #0]
  return(result);
 80043de:	f107 0210 	add.w	r2, r7, #16
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	fab2 f282 	clz	r2, r2
 80043e8:	b252      	sxtb	r2, r2
 80043ea:	f042 0220 	orr.w	r2, r2, #32
 80043ee:	b252      	sxtb	r2, r2
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	f002 021f 	and.w	r2, r2, #31
 80043f6:	2101      	movs	r1, #1
 80043f8:	fa01 f202 	lsl.w	r2, r1, r2
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d19d      	bne.n	800433e <HAL_RCC_OscConfig+0xd02>
 8004402:	e001      	b.n	8004408 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000

08004418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b09e      	sub	sp, #120	; 0x78
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e164      	b.n	80046fa <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004430:	4b92      	ldr	r3, [pc, #584]	; (800467c <HAL_RCC_ClockConfig+0x264>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d910      	bls.n	8004460 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b8f      	ldr	r3, [pc, #572]	; (800467c <HAL_RCC_ClockConfig+0x264>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 0207 	bic.w	r2, r3, #7
 8004446:	498d      	ldr	r1, [pc, #564]	; (800467c <HAL_RCC_ClockConfig+0x264>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b8b      	ldr	r3, [pc, #556]	; (800467c <HAL_RCC_ClockConfig+0x264>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e14c      	b.n	80046fa <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800446c:	4b84      	ldr	r3, [pc, #528]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4981      	ldr	r1, [pc, #516]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 800447a:	4313      	orrs	r3, r2
 800447c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80df 	beq.w	800464a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d13d      	bne.n	8004510 <HAL_RCC_ClockConfig+0xf8>
 8004494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004498:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800449c:	fa93 f3a3 	rbit	r3, r3
 80044a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80044a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d102      	bne.n	80044be <HAL_RCC_ClockConfig+0xa6>
 80044b8:	4b71      	ldr	r3, [pc, #452]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	e00f      	b.n	80044de <HAL_RCC_ClockConfig+0xc6>
 80044be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	667b      	str	r3, [r7, #100]	; 0x64
 80044cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044d0:	663b      	str	r3, [r7, #96]	; 0x60
 80044d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d4:	fa93 f3a3 	rbit	r3, r3
 80044d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044da:	4b69      	ldr	r3, [pc, #420]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80044e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044e6:	fa92 f2a2 	rbit	r2, r2
 80044ea:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80044ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044ee:	fab2 f282 	clz	r2, r2
 80044f2:	b252      	sxtb	r2, r2
 80044f4:	f042 0220 	orr.w	r2, r2, #32
 80044f8:	b252      	sxtb	r2, r2
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	f002 021f 	and.w	r2, r2, #31
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f202 	lsl.w	r2, r1, r2
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d17d      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0f4      	b.n	80046fa <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d13d      	bne.n	8004594 <HAL_RCC_ClockConfig+0x17c>
 8004518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800451c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8004526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <HAL_RCC_ClockConfig+0x12a>
 800453c:	4b50      	ldr	r3, [pc, #320]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	e00f      	b.n	8004562 <HAL_RCC_ClockConfig+0x14a>
 8004542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004546:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800454a:	fa93 f3a3 	rbit	r3, r3
 800454e:	647b      	str	r3, [r7, #68]	; 0x44
 8004550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004554:	643b      	str	r3, [r7, #64]	; 0x40
 8004556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455e:	4b48      	ldr	r3, [pc, #288]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004566:	63ba      	str	r2, [r7, #56]	; 0x38
 8004568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800456a:	fa92 f2a2 	rbit	r2, r2
 800456e:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8004570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004572:	fab2 f282 	clz	r2, r2
 8004576:	b252      	sxtb	r2, r2
 8004578:	f042 0220 	orr.w	r2, r2, #32
 800457c:	b252      	sxtb	r2, r2
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	f002 021f 	and.w	r2, r2, #31
 8004584:	2101      	movs	r1, #1
 8004586:	fa01 f202 	lsl.w	r2, r1, r2
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d13b      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0b2      	b.n	80046fa <HAL_RCC_ClockConfig+0x2e2>
 8004594:	2302      	movs	r3, #2
 8004596:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	fa93 f3a3 	rbit	r3, r3
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d102      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1a4>
 80045b6:	4b32      	ldr	r3, [pc, #200]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	e00d      	b.n	80045d8 <HAL_RCC_ClockConfig+0x1c0>
 80045bc:	2302      	movs	r3, #2
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
 80045c8:	2302      	movs	r3, #2
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	2202      	movs	r2, #2
 80045da:	61ba      	str	r2, [r7, #24]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	fa92 f2a2 	rbit	r2, r2
 80045e2:	617a      	str	r2, [r7, #20]
  return(result);
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	fab2 f282 	clz	r2, r2
 80045ea:	b252      	sxtb	r2, r2
 80045ec:	f042 0220 	orr.w	r2, r2, #32
 80045f0:	b252      	sxtb	r2, r2
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e078      	b.n	80046fa <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f023 0203 	bic.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	491a      	ldr	r1, [pc, #104]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 8004616:	4313      	orrs	r3, r2
 8004618:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800461a:	f7fc faa5 	bl	8000b68 <HAL_GetTick>
 800461e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004620:	e00a      	b.n	8004638 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004622:	f7fc faa1 	bl	8000b68 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e060      	b.n	80046fa <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <HAL_RCC_ClockConfig+0x268>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 020c 	and.w	r2, r3, #12
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	429a      	cmp	r2, r3
 8004648:	d1eb      	bne.n	8004622 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <HAL_RCC_ClockConfig+0x264>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d215      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004658:	4b08      	ldr	r3, [pc, #32]	; (800467c <HAL_RCC_ClockConfig+0x264>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f023 0207 	bic.w	r2, r3, #7
 8004660:	4906      	ldr	r1, [pc, #24]	; (800467c <HAL_RCC_ClockConfig+0x264>)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <HAL_RCC_ClockConfig+0x264>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d006      	beq.n	8004684 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e03f      	b.n	80046fa <HAL_RCC_ClockConfig+0x2e2>
 800467a:	bf00      	nop
 800467c:	40022000 	.word	0x40022000
 8004680:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004690:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <HAL_RCC_ClockConfig+0x2ec>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4919      	ldr	r1, [pc, #100]	; (8004704 <HAL_RCC_ClockConfig+0x2ec>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <HAL_RCC_ClockConfig+0x2ec>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4911      	ldr	r1, [pc, #68]	; (8004704 <HAL_RCC_ClockConfig+0x2ec>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046c2:	f000 f825 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046c6:	4601      	mov	r1, r0
 80046c8:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <HAL_RCC_ClockConfig+0x2ec>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046d0:	23f0      	movs	r3, #240	; 0xf0
 80046d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	fa93 f3a3 	rbit	r3, r3
 80046da:	60fb      	str	r3, [r7, #12]
  return(result);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	4a08      	ldr	r2, [pc, #32]	; (8004708 <HAL_RCC_ClockConfig+0x2f0>)
 80046e8:	5cd3      	ldrb	r3, [r2, r3]
 80046ea:	fa21 f303 	lsr.w	r3, r1, r3
 80046ee:	4a07      	ldr	r2, [pc, #28]	; (800470c <HAL_RCC_ClockConfig+0x2f4>)
 80046f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046f2:	2000      	movs	r0, #0
 80046f4:	f7fc f9f4 	bl	8000ae0 <HAL_InitTick>
  
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3778      	adds	r7, #120	; 0x78
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000
 8004708:	08009954 	.word	0x08009954
 800470c:	20000008 	.word	0x20000008

08004710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	b08b      	sub	sp, #44	; 0x2c
 8004714:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	2300      	movs	r3, #0
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b04      	cmp	r3, #4
 8004738:	d002      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x30>
 800473a:	2b08      	cmp	r3, #8
 800473c:	d003      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0x36>
 800473e:	e03f      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004740:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004742:	623b      	str	r3, [r7, #32]
      break;
 8004744:	e03f      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800474c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004750:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	607b      	str	r3, [r7, #4]
  return(result);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	fab3 f383 	clz	r3, r3
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
 8004764:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004766:	5cd3      	ldrb	r3, [r2, r3]
 8004768:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800476a:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	230f      	movs	r3, #15
 8004774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	fa93 f3a3 	rbit	r3, r3
 800477c:	60fb      	str	r3, [r7, #12]
  return(result);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	fab3 f383 	clz	r3, r3
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
 8004788:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800478a:	5cd3      	ldrb	r3, [r2, r3]
 800478c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004798:	4a0f      	ldr	r2, [pc, #60]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	e007      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80047aa:	4a0b      	ldr	r2, [pc, #44]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	623b      	str	r3, [r7, #32]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80047c2:	623b      	str	r3, [r7, #32]
      break;
 80047c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c6:	6a3b      	ldr	r3, [r7, #32]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	372c      	adds	r7, #44	; 0x2c
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40021000 	.word	0x40021000
 80047d8:	007a1200 	.word	0x007a1200
 80047dc:	08009934 	.word	0x08009934
 80047e0:	08009944 	.word	0x08009944

080047e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000008 	.word	0x20000008

080047fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004802:	f7ff ffef 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 8004806:	4601      	mov	r1, r0
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004810:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004814:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	fa93 f3a3 	rbit	r3, r3
 800481c:	603b      	str	r3, [r7, #0]
  return(result);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	4a04      	ldr	r2, [pc, #16]	; (800483c <HAL_RCC_GetPCLK1Freq+0x40>)
 800482a:	5cd3      	ldrb	r3, [r2, r3]
 800482c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	08009964 	.word	0x08009964

08004840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004846:	f7ff ffcd 	bl	80047e4 <HAL_RCC_GetHCLKFreq>
 800484a:	4601      	mov	r1, r0
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8004854:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004858:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	603b      	str	r3, [r7, #0]
  return(result);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
 800486c:	4a04      	ldr	r2, [pc, #16]	; (8004880 <HAL_RCC_GetPCLK2Freq+0x40>)
 800486e:	5cd3      	ldrb	r3, [r2, r3]
 8004870:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021000 	.word	0x40021000
 8004880:	08009964 	.word	0x08009964

08004884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b092      	sub	sp, #72	; 0x48
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80d6 	beq.w	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a8:	4b4d      	ldr	r3, [pc, #308]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10e      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b4:	4b4a      	ldr	r3, [pc, #296]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	4a49      	ldr	r2, [pc, #292]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048be:	61d3      	str	r3, [r2, #28]
 80048c0:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048cc:	2301      	movs	r3, #1
 80048ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d2:	4b44      	ldr	r3, [pc, #272]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d118      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048de:	4b41      	ldr	r3, [pc, #260]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a40      	ldr	r2, [pc, #256]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ea:	f7fc f93d 	bl	8000b68 <HAL_GetTick>
 80048ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f0:	e008      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f2:	f7fc f939 	bl	8000b68 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b64      	cmp	r3, #100	; 0x64
 80048fe:	d901      	bls.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e1d4      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004904:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004910:	4b33      	ldr	r3, [pc, #204]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800491a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8083 	beq.w	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800492c:	429a      	cmp	r2, r3
 800492e:	d07b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004930:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800493a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	461a      	mov	r2, r3
 8004958:	2301      	movs	r3, #1
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	fa93 f3a3 	rbit	r3, r3
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800496c:	fab3 f383 	clz	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	461a      	mov	r2, r3
 800497a:	2300      	movs	r3, #0
 800497c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004982:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d04c      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fc f8eb 	bl	8000b68 <HAL_GetTick>
 8004992:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	e00a      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fc f8e7 	bl	8000b68 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e180      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80049ac:	2302      	movs	r3, #2
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	2302      	movs	r3, #2
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	fa93 f3a3 	rbit	r3, r3
 80049c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80049c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c6:	fab3 f383 	clz	r3, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d108      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 80049da:	4b01      	ldr	r3, [pc, #4]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	e00d      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40007000 	.word	0x40007000
 80049e8:	10908100 	.word	0x10908100
 80049ec:	2302      	movs	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	fa93 f3a3 	rbit	r3, r3
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	4b9c      	ldr	r3, [pc, #624]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2202      	movs	r2, #2
 80049fe:	613a      	str	r2, [r7, #16]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	fa92 f2a2 	rbit	r2, r2
 8004a06:	60fa      	str	r2, [r7, #12]
  return(result);
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	fab2 f282 	clz	r2, r2
 8004a0e:	b252      	sxtb	r2, r2
 8004a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a14:	b252      	sxtb	r2, r2
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	f002 021f 	and.w	r2, r2, #31
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0b6      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a28:	4b90      	ldr	r3, [pc, #576]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	498d      	ldr	r1, [pc, #564]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	4b8a      	ldr	r3, [pc, #552]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4a89      	ldr	r2, [pc, #548]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a5a:	4b84      	ldr	r3, [pc, #528]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	4981      	ldr	r1, [pc, #516]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a78:	4b7c      	ldr	r3, [pc, #496]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4979      	ldr	r1, [pc, #484]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a96:	4b75      	ldr	r3, [pc, #468]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	4972      	ldr	r1, [pc, #456]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ab4:	4b6d      	ldr	r3, [pc, #436]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	f023 0210 	bic.w	r2, r3, #16
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	496a      	ldr	r1, [pc, #424]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004ad2:	4b66      	ldr	r3, [pc, #408]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	4963      	ldr	r1, [pc, #396]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004af0:	4b5e      	ldr	r3, [pc, #376]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	f023 0220 	bic.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	495b      	ldr	r1, [pc, #364]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b0e:	4b57      	ldr	r3, [pc, #348]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	4954      	ldr	r1, [pc, #336]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b2c:	4b4f      	ldr	r3, [pc, #316]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	494c      	ldr	r1, [pc, #304]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b4a:	4b48      	ldr	r3, [pc, #288]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	4945      	ldr	r1, [pc, #276]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b68:	4b40      	ldr	r3, [pc, #256]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	493d      	ldr	r1, [pc, #244]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b86:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	4936      	ldr	r1, [pc, #216]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ba4:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	492e      	ldr	r1, [pc, #184]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bc2:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bce:	4927      	ldr	r1, [pc, #156]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004be0:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	491f      	ldr	r1, [pc, #124]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004bfe:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	4918      	ldr	r1, [pc, #96]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	4910      	ldr	r1, [pc, #64]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	4909      	ldr	r1, [pc, #36]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c64:	4901      	ldr	r1, [pc, #4]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	630b      	str	r3, [r1, #48]	; 0x30
 8004c6a:	e001      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004c6c:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c88:	490b      	ldr	r1, [pc, #44]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d008      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	4904      	ldr	r1, [pc, #16]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3748      	adds	r7, #72	; 0x48
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40021000 	.word	0x40021000

08004cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e01d      	b.n	8004d0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f003 fcd4 	bl	8008690 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f000 fb7e 	bl	80053fc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_TIM_Base_Stop+0x40>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	f240 4344 	movw	r3, #1092	; 0x444
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_Base_Stop+0x40>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0201 	bic.w	r2, r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e01d      	b.n	8004dec <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d106      	bne.n	8004dca <HAL_TIM_IC_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f815 	bl	8004df4 <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY; 
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f000 fb0d 	bl	80053fc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0202 	mvn.w	r2, #2
 8004e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fab8 	bl	80053c0 <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 faaa 	bl	80053ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fabb 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0204 	mvn.w	r2, #4
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa8e 	bl	80053c0 <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa80 	bl	80053ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fa91 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d122      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d11b      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0208 	mvn.w	r2, #8
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fa64 	bl	80053c0 <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa56 	bl	80053ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fa67 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b10      	cmp	r3, #16
 8004f18:	d122      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d11b      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0210 	mvn.w	r2, #16
 8004f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2208      	movs	r2, #8
 8004f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa3a 	bl	80053c0 <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa2c 	bl	80053ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fa3d 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d10e      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d107      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0201 	mvn.w	r2, #1
 8004f84:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f002 faf8 	bl	800757c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	2b80      	cmp	r3, #128	; 0x80
 8004f98:	d10e      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b80      	cmp	r3, #128	; 0x80
 8004fa6:	d107      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fd94 	bl	8005ae0 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc6:	d10e      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b80      	cmp	r3, #128	; 0x80
 8004fd4:	d107      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fd87 	bl	8005af4 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d10e      	bne.n	8005012 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d107      	bne.n	8005012 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800500a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f9eb 	bl	80053e8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b20      	cmp	r3, #32
 800501e:	d10e      	bne.n	800503e <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b20      	cmp	r3, #32
 800502c:	d107      	bne.n	800503e <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f06f 0220 	mvn.w	r2, #32
 8005036:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fd47 	bl	8005acc <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIM_IC_ConfigChannel+0x1a>
 800505c:	2302      	movs	r3, #2
 800505e:	e08a      	b.n	8005176 <HAL_TIM_IC_ConfigChannel+0x130>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  if (Channel == TIM_CHANNEL_1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d11b      	bne.n	80050ae <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f000 fae7 	bl	8005658 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 020c 	bic.w	r2, r2, #12
 8005098:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6999      	ldr	r1, [r3, #24]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	619a      	str	r2, [r3, #24]
 80050ac:	e05a      	b.n	8005164 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d11c      	bne.n	80050ee <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6819      	ldr	r1, [r3, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f000 fb6d 	bl	80057a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050d6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6999      	ldr	r1, [r3, #24]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	021a      	lsls	r2, r3, #8
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	619a      	str	r2, [r3, #24]
 80050ec:	e03a      	b.n	8005164 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f000 fbc2 	bl	800588c <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 020c 	bic.w	r2, r2, #12
 8005116:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69d9      	ldr	r1, [r3, #28]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	61da      	str	r2, [r3, #28]
 800512a:	e01b      	b.n	8005164 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
    
    TIM_TI4_SetConfig(htim->Instance, 
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f000 fbe6 	bl	800590c <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69da      	ldr	r2, [r3, #28]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800514e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69d9      	ldr	r1, [r3, #28]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	61da      	str	r2, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK; 
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_TIM_ConfigClockSource+0x1c>
 8005196:	2302      	movs	r3, #2
 8005198:	e0cf      	b.n	800533a <HAL_TIM_ConfigClockSource+0x1bc>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d07c      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0x152>
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d80f      	bhi.n	80051fa <HAL_TIM_ConfigClockSource+0x7c>
 80051da:	2b10      	cmp	r3, #16
 80051dc:	f000 808f 	beq.w	80052fe <HAL_TIM_ConfigClockSource+0x180>
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d803      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x6e>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8083 	beq.w	80052f0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 80051ea:	e09d      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	f000 808d 	beq.w	800530c <HAL_TIM_ConfigClockSource+0x18e>
 80051f2:	2b30      	cmp	r3, #48	; 0x30
 80051f4:	f000 8091 	beq.w	800531a <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 80051f8:	e096      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80051fa:	2b70      	cmp	r3, #112	; 0x70
 80051fc:	d018      	beq.n	8005230 <HAL_TIM_ConfigClockSource+0xb2>
 80051fe:	2b70      	cmp	r3, #112	; 0x70
 8005200:	d804      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x8e>
 8005202:	2b50      	cmp	r3, #80	; 0x50
 8005204:	d044      	beq.n	8005290 <HAL_TIM_ConfigClockSource+0x112>
 8005206:	2b60      	cmp	r3, #96	; 0x60
 8005208:	d052      	beq.n	80052b0 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 800520a:	e08d      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	d003      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x9c>
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005216:	d028      	beq.n	800526a <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8005218:	e086      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005228:	f023 0307 	bic.w	r3, r3, #7
 800522c:	6093      	str	r3, [r2, #8]
    break;
 800522e:	e07b      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	6899      	ldr	r1, [r3, #8]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f000 fbc5 	bl	80059ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005256:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800525e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	609a      	str	r2, [r3, #8]
    break;
 8005268:	e05e      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6899      	ldr	r1, [r3, #8]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f000 fba8 	bl	80059ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528c:	609a      	str	r2, [r3, #8]
    break;
 800528e:	e04b      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6859      	ldr	r1, [r3, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	461a      	mov	r2, r3
 800529e:	f000 fa4d 	bl	800573c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2150      	movs	r1, #80	; 0x50
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fb70 	bl	800598e <TIM_ITRx_SetConfig>
    break;
 80052ae:	e03b      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	461a      	mov	r2, r3
 80052be:	f000 fab1 	bl	8005824 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2160      	movs	r1, #96	; 0x60
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fb60 	bl	800598e <TIM_ITRx_SetConfig>
    break;
 80052ce:	e02b      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	461a      	mov	r2, r3
 80052de:	f000 fa2d 	bl	800573c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2140      	movs	r1, #64	; 0x40
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fb50 	bl	800598e <TIM_ITRx_SetConfig>
    break;
 80052ee:	e01b      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fb49 	bl	800598e <TIM_ITRx_SetConfig>
    break;
 80052fc:	e014      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2110      	movs	r1, #16
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fb42 	bl	800598e <TIM_ITRx_SetConfig>
    break;
 800530a:	e00d      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2120      	movs	r1, #32
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fb3b 	bl	800598e <TIM_ITRx_SetConfig>
    break;
 8005318:	e006      	b.n	8005328 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2130      	movs	r1, #48	; 0x30
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fb34 	bl	800598e <TIM_ITRx_SetConfig>
    break;
 8005326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
  
  __HAL_LOCK(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_TIM_SlaveConfigSynchronization+0x18>
 8005356:	2302      	movs	r3, #2
 8005358:	e024      	b.n	80053a4 <HAL_TIM_SlaveConfigSynchronization+0x62>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f8e5 	bl	800553c <TIM_SlaveTimer_SetConfig>
  
  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005380:	60da      	str	r2, [r3, #12]
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005390:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
     
  __HAL_UNLOCK(htim);  
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
} 
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a42      	ldr	r2, [pc, #264]	; (800551c <TIM_Base_SetConfig+0x120>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <TIM_Base_SetConfig+0x44>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d00f      	beq.n	8005440 <TIM_Base_SetConfig+0x44>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a3f      	ldr	r2, [pc, #252]	; (8005520 <TIM_Base_SetConfig+0x124>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_Base_SetConfig+0x44>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a3e      	ldr	r2, [pc, #248]	; (8005524 <TIM_Base_SetConfig+0x128>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_Base_SetConfig+0x44>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a3d      	ldr	r2, [pc, #244]	; (8005528 <TIM_Base_SetConfig+0x12c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0x44>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a3c      	ldr	r2, [pc, #240]	; (800552c <TIM_Base_SetConfig+0x130>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a31      	ldr	r2, [pc, #196]	; (800551c <TIM_Base_SetConfig+0x120>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01f      	beq.n	800549a <TIM_Base_SetConfig+0x9e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005460:	d01b      	beq.n	800549a <TIM_Base_SetConfig+0x9e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2e      	ldr	r2, [pc, #184]	; (8005520 <TIM_Base_SetConfig+0x124>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d017      	beq.n	800549a <TIM_Base_SetConfig+0x9e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <TIM_Base_SetConfig+0x128>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <TIM_Base_SetConfig+0x9e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2c      	ldr	r2, [pc, #176]	; (8005528 <TIM_Base_SetConfig+0x12c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00f      	beq.n	800549a <TIM_Base_SetConfig+0x9e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2c      	ldr	r2, [pc, #176]	; (8005530 <TIM_Base_SetConfig+0x134>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00b      	beq.n	800549a <TIM_Base_SetConfig+0x9e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2b      	ldr	r2, [pc, #172]	; (8005534 <TIM_Base_SetConfig+0x138>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d007      	beq.n	800549a <TIM_Base_SetConfig+0x9e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2a      	ldr	r2, [pc, #168]	; (8005538 <TIM_Base_SetConfig+0x13c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d003      	beq.n	800549a <TIM_Base_SetConfig+0x9e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a25      	ldr	r2, [pc, #148]	; (800552c <TIM_Base_SetConfig+0x130>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d108      	bne.n	80054ac <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a12      	ldr	r2, [pc, #72]	; (800551c <TIM_Base_SetConfig+0x120>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <TIM_Base_SetConfig+0x104>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a13      	ldr	r2, [pc, #76]	; (8005528 <TIM_Base_SetConfig+0x12c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00f      	beq.n	8005500 <TIM_Base_SetConfig+0x104>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a13      	ldr	r2, [pc, #76]	; (8005530 <TIM_Base_SetConfig+0x134>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_Base_SetConfig+0x104>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a12      	ldr	r2, [pc, #72]	; (8005534 <TIM_Base_SetConfig+0x138>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_Base_SetConfig+0x104>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a11      	ldr	r2, [pc, #68]	; (8005538 <TIM_Base_SetConfig+0x13c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_Base_SetConfig+0x104>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a0c      	ldr	r2, [pc, #48]	; (800552c <TIM_Base_SetConfig+0x130>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d103      	bne.n	8005508 <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	615a      	str	r2, [r3, #20]
}
 800550e:	bf00      	nop
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40012c00 	.word	0x40012c00
 8005520:	40000400 	.word	0x40000400
 8005524:	40000800 	.word	0x40000800
 8005528:	40013400 	.word	0x40013400
 800552c:	40015000 	.word	0x40015000
 8005530:	40014000 	.word	0x40014000
 8005534:	40014400 	.word	0x40014400
 8005538:	40014800 	.word	0x40014800

0800553c <TIM_SlaveTimer_SetConfig>:
  TIMx->CCER = tmpccer;  
}

static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005572:	f023 0307 	bic.w	r3, r3, #7
 8005576:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	609a      	str	r2, [r3, #8]
 
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b30      	cmp	r3, #48	; 0x30
 8005590:	d056      	beq.n	8005640 <TIM_SlaveTimer_SetConfig+0x104>
 8005592:	2b30      	cmp	r3, #48	; 0x30
 8005594:	d806      	bhi.n	80055a4 <TIM_SlaveTimer_SetConfig+0x68>
 8005596:	2b10      	cmp	r3, #16
 8005598:	d054      	beq.n	8005644 <TIM_SlaveTimer_SetConfig+0x108>
 800559a:	2b20      	cmp	r3, #32
 800559c:	d054      	beq.n	8005648 <TIM_SlaveTimer_SetConfig+0x10c>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d054      	beq.n	800564c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;
       
  default:
    break;
 80055a2:	e054      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
  switch (sSlaveConfig->InputTrigger)
 80055a4:	2b50      	cmp	r3, #80	; 0x50
 80055a6:	d037      	beq.n	8005618 <TIM_SlaveTimer_SetConfig+0xdc>
 80055a8:	2b50      	cmp	r3, #80	; 0x50
 80055aa:	d802      	bhi.n	80055b2 <TIM_SlaveTimer_SetConfig+0x76>
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d010      	beq.n	80055d2 <TIM_SlaveTimer_SetConfig+0x96>
    break;
 80055b0:	e04d      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
  switch (sSlaveConfig->InputTrigger)
 80055b2:	2b60      	cmp	r3, #96	; 0x60
 80055b4:	d03a      	beq.n	800562c <TIM_SlaveTimer_SetConfig+0xf0>
 80055b6:	2b70      	cmp	r3, #112	; 0x70
 80055b8:	d000      	beq.n	80055bc <TIM_SlaveTimer_SetConfig+0x80>
    break;
 80055ba:	e048      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_ETR_SetConfig(htim->Instance, 
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	68d9      	ldr	r1, [r3, #12]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f000 f9ff 	bl	80059ce <TIM_ETR_SetConfig>
    break;
 80055d0:	e03d      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
      tmpccer = htim->Instance->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a1a      	ldr	r2, [r3, #32]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	613b      	str	r3, [r7, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f8:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
      htim->Instance->CCMR1 = tmpccmr1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	621a      	str	r2, [r3, #32]
    break;
 8005616:	e01a      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6899      	ldr	r1, [r3, #8]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	461a      	mov	r2, r3
 8005626:	f000 f889 	bl	800573c <TIM_TI1_ConfigInputStage>
    break;
 800562a:	e010      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	6899      	ldr	r1, [r3, #8]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	461a      	mov	r2, r3
 800563a:	f000 f8f3 	bl	8005824 <TIM_TI2_ConfigInputStage>
    break;
 800563e:	e006      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
    break;
 8005640:	bf00      	nop
 8005642:	e004      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
    break;
 8005644:	bf00      	nop
 8005646:	e002      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
    break;
 8005648:	bf00      	nop
 800564a:	e000      	b.n	800564e <TIM_SlaveTimer_SetConfig+0x112>
    break;
 800564c:	bf00      	nop
  }
}
 800564e:	bf00      	nop
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a26      	ldr	r2, [pc, #152]	; (8005724 <TIM_TI1_SetConfig+0xcc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d017      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005694:	d013      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a23      	ldr	r2, [pc, #140]	; (8005728 <TIM_TI1_SetConfig+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00f      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a22      	ldr	r2, [pc, #136]	; (800572c <TIM_TI1_SetConfig+0xd4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00b      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a21      	ldr	r2, [pc, #132]	; (8005730 <TIM_TI1_SetConfig+0xd8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a20      	ldr	r2, [pc, #128]	; (8005734 <TIM_TI1_SetConfig+0xdc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_TI1_SetConfig+0x66>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <TIM_TI1_SetConfig+0xe0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <TIM_TI1_SetConfig+0x6a>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <TIM_TI1_SetConfig+0x6c>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f023 0303 	bic.w	r3, r3, #3
 80056ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e003      	b.n	80056e2 <TIM_TI1_SetConfig+0x8a>
  } 
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	617b      	str	r3, [r7, #20]
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f023 030a 	bic.w	r3, r3, #10
 80056fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f003 030a 	and.w	r3, r3, #10
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40012c00 	.word	0x40012c00
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40013400 	.word	0x40013400
 8005734:	40014000 	.word	0x40014000
 8005738:	40015000 	.word	0x40015000

0800573c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0201 	bic.w	r2, r3, #1
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800576e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f023 030a 	bic.w	r3, r3, #10
 8005780:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b087      	sub	sp, #28
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f023 0210 	bic.w	r2, r3, #16
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	031b      	lsls	r3, r3, #12
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	621a      	str	r2, [r3, #32]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f023 0210 	bic.w	r2, r3, #16
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005856:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	031b      	lsls	r3, r3, #12
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005868:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	621a      	str	r2, [r3, #32]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005940:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005952:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	031b      	lsls	r3, r3, #12
 8005958:	b29b      	uxth	r3, r3
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005966:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	031b      	lsls	r3, r3, #12
 800596c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80059ac:	887b      	ldrh	r3, [r7, #2]
 80059ae:	f043 0307 	orr.w	r3, r3, #7
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	609a      	str	r2, [r3, #8]
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b087      	sub	sp, #28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	021a      	lsls	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	609a      	str	r2, [r3, #8]
} 
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e042      	b.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d009      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1c      	ldr	r2, [pc, #112]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d108      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
} 
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40013400 	.word	0x40013400
 8005ac8:	40015000 	.word	0x40015000

08005acc <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e043      	b.n	8005ba2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 fe30 	bl	8008794 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f8b9 	bl	8005cc4 <UART_SetConfig>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e022      	b.n	8005ba2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 faab 	bl	80060c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b88:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0201 	orr.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fb32 	bl	8006204 <UART_CheckIdleState>
 8005ba0:	4603      	mov	r3, r0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b088      	sub	sp, #32
 8005bae:	af02      	add	r7, sp, #8
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d177      	bne.n	8005cba <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_UART_Transmit+0x2c>
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e070      	b.n	8005cbc <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_UART_Transmit+0x3e>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e069      	b.n	8005cbc <HAL_UART_Transmit+0x112>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2221      	movs	r2, #33	; 0x21
 8005bfa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005bfe:	f7fa ffb3 	bl	8000b68 <HAL_GetTick>
 8005c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8005c14:	e034      	b.n	8005c80 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2180      	movs	r1, #128	; 0x80
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fb2f 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e03c      	b.n	8005cbc <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	d111      	bne.n	8005c70 <HAL_UART_Transmit+0xc6>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10d      	bne.n	8005c70 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	881a      	ldrh	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c64:	b292      	uxth	r2, r2
 8005c66:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	e007      	b.n	8005c80 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	60ba      	str	r2, [r7, #8]
 8005c76:	781a      	ldrb	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	b292      	uxth	r2, r2
 8005c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1c4      	bne.n	8005c16 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2200      	movs	r2, #0
 8005c94:	2140      	movs	r1, #64	; 0x40
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 fafd 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e00a      	b.n	8005cbc <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e000      	b.n	8005cbc <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8005cba:	2302      	movs	r3, #2
  }
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4ba7      	ldr	r3, [pc, #668]	; (8005f9c <UART_SetConfig+0x2d8>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a96      	ldr	r2, [pc, #600]	; (8005fa0 <UART_SetConfig+0x2dc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d121      	bne.n	8005d90 <UART_SetConfig+0xcc>
 8005d4c:	4b95      	ldr	r3, [pc, #596]	; (8005fa4 <UART_SetConfig+0x2e0>)
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d817      	bhi.n	8005d88 <UART_SetConfig+0xc4>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0x9c>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d71 	.word	0x08005d71
 8005d64:	08005d7d 	.word	0x08005d7d
 8005d68:	08005d83 	.word	0x08005d83
 8005d6c:	08005d77 	.word	0x08005d77
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
 8005d74:	e0b2      	b.n	8005edc <UART_SetConfig+0x218>
 8005d76:	2302      	movs	r3, #2
 8005d78:	75fb      	strb	r3, [r7, #23]
 8005d7a:	e0af      	b.n	8005edc <UART_SetConfig+0x218>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	75fb      	strb	r3, [r7, #23]
 8005d80:	e0ac      	b.n	8005edc <UART_SetConfig+0x218>
 8005d82:	2308      	movs	r3, #8
 8005d84:	75fb      	strb	r3, [r7, #23]
 8005d86:	e0a9      	b.n	8005edc <UART_SetConfig+0x218>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	75fb      	strb	r3, [r7, #23]
 8005d8c:	bf00      	nop
 8005d8e:	e0a5      	b.n	8005edc <UART_SetConfig+0x218>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a84      	ldr	r2, [pc, #528]	; (8005fa8 <UART_SetConfig+0x2e4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d123      	bne.n	8005de2 <UART_SetConfig+0x11e>
 8005d9a:	4b82      	ldr	r3, [pc, #520]	; (8005fa4 <UART_SetConfig+0x2e0>)
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da6:	d012      	beq.n	8005dce <UART_SetConfig+0x10a>
 8005da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dac:	d802      	bhi.n	8005db4 <UART_SetConfig+0xf0>
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <UART_SetConfig+0xfe>
 8005db2:	e012      	b.n	8005dda <UART_SetConfig+0x116>
 8005db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005db8:	d00c      	beq.n	8005dd4 <UART_SetConfig+0x110>
 8005dba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dbe:	d003      	beq.n	8005dc8 <UART_SetConfig+0x104>
 8005dc0:	e00b      	b.n	8005dda <UART_SetConfig+0x116>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75fb      	strb	r3, [r7, #23]
 8005dc6:	e089      	b.n	8005edc <UART_SetConfig+0x218>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	75fb      	strb	r3, [r7, #23]
 8005dcc:	e086      	b.n	8005edc <UART_SetConfig+0x218>
 8005dce:	2304      	movs	r3, #4
 8005dd0:	75fb      	strb	r3, [r7, #23]
 8005dd2:	e083      	b.n	8005edc <UART_SetConfig+0x218>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	75fb      	strb	r3, [r7, #23]
 8005dd8:	e080      	b.n	8005edc <UART_SetConfig+0x218>
 8005dda:	2310      	movs	r3, #16
 8005ddc:	75fb      	strb	r3, [r7, #23]
 8005dde:	bf00      	nop
 8005de0:	e07c      	b.n	8005edc <UART_SetConfig+0x218>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a71      	ldr	r2, [pc, #452]	; (8005fac <UART_SetConfig+0x2e8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d123      	bne.n	8005e34 <UART_SetConfig+0x170>
 8005dec:	4b6d      	ldr	r3, [pc, #436]	; (8005fa4 <UART_SetConfig+0x2e0>)
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005df8:	d012      	beq.n	8005e20 <UART_SetConfig+0x15c>
 8005dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dfe:	d802      	bhi.n	8005e06 <UART_SetConfig+0x142>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <UART_SetConfig+0x150>
 8005e04:	e012      	b.n	8005e2c <UART_SetConfig+0x168>
 8005e06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e0a:	d00c      	beq.n	8005e26 <UART_SetConfig+0x162>
 8005e0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e10:	d003      	beq.n	8005e1a <UART_SetConfig+0x156>
 8005e12:	e00b      	b.n	8005e2c <UART_SetConfig+0x168>
 8005e14:	2300      	movs	r3, #0
 8005e16:	75fb      	strb	r3, [r7, #23]
 8005e18:	e060      	b.n	8005edc <UART_SetConfig+0x218>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	75fb      	strb	r3, [r7, #23]
 8005e1e:	e05d      	b.n	8005edc <UART_SetConfig+0x218>
 8005e20:	2304      	movs	r3, #4
 8005e22:	75fb      	strb	r3, [r7, #23]
 8005e24:	e05a      	b.n	8005edc <UART_SetConfig+0x218>
 8005e26:	2308      	movs	r3, #8
 8005e28:	75fb      	strb	r3, [r7, #23]
 8005e2a:	e057      	b.n	8005edc <UART_SetConfig+0x218>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	75fb      	strb	r3, [r7, #23]
 8005e30:	bf00      	nop
 8005e32:	e053      	b.n	8005edc <UART_SetConfig+0x218>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a5d      	ldr	r2, [pc, #372]	; (8005fb0 <UART_SetConfig+0x2ec>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d123      	bne.n	8005e86 <UART_SetConfig+0x1c2>
 8005e3e:	4b59      	ldr	r3, [pc, #356]	; (8005fa4 <UART_SetConfig+0x2e0>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4a:	d012      	beq.n	8005e72 <UART_SetConfig+0x1ae>
 8005e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e50:	d802      	bhi.n	8005e58 <UART_SetConfig+0x194>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <UART_SetConfig+0x1a2>
 8005e56:	e012      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e5c:	d00c      	beq.n	8005e78 <UART_SetConfig+0x1b4>
 8005e5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e62:	d003      	beq.n	8005e6c <UART_SetConfig+0x1a8>
 8005e64:	e00b      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]
 8005e6a:	e037      	b.n	8005edc <UART_SetConfig+0x218>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	75fb      	strb	r3, [r7, #23]
 8005e70:	e034      	b.n	8005edc <UART_SetConfig+0x218>
 8005e72:	2304      	movs	r3, #4
 8005e74:	75fb      	strb	r3, [r7, #23]
 8005e76:	e031      	b.n	8005edc <UART_SetConfig+0x218>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	75fb      	strb	r3, [r7, #23]
 8005e7c:	e02e      	b.n	8005edc <UART_SetConfig+0x218>
 8005e7e:	2310      	movs	r3, #16
 8005e80:	75fb      	strb	r3, [r7, #23]
 8005e82:	bf00      	nop
 8005e84:	e02a      	b.n	8005edc <UART_SetConfig+0x218>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a4a      	ldr	r2, [pc, #296]	; (8005fb4 <UART_SetConfig+0x2f0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d123      	bne.n	8005ed8 <UART_SetConfig+0x214>
 8005e90:	4b44      	ldr	r3, [pc, #272]	; (8005fa4 <UART_SetConfig+0x2e0>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9c:	d012      	beq.n	8005ec4 <UART_SetConfig+0x200>
 8005e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ea2:	d802      	bhi.n	8005eaa <UART_SetConfig+0x1e6>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d007      	beq.n	8005eb8 <UART_SetConfig+0x1f4>
 8005ea8:	e012      	b.n	8005ed0 <UART_SetConfig+0x20c>
 8005eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eae:	d00c      	beq.n	8005eca <UART_SetConfig+0x206>
 8005eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005eb4:	d003      	beq.n	8005ebe <UART_SetConfig+0x1fa>
 8005eb6:	e00b      	b.n	8005ed0 <UART_SetConfig+0x20c>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	75fb      	strb	r3, [r7, #23]
 8005ebc:	e00e      	b.n	8005edc <UART_SetConfig+0x218>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	75fb      	strb	r3, [r7, #23]
 8005ec2:	e00b      	b.n	8005edc <UART_SetConfig+0x218>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	75fb      	strb	r3, [r7, #23]
 8005ec8:	e008      	b.n	8005edc <UART_SetConfig+0x218>
 8005eca:	2308      	movs	r3, #8
 8005ecc:	75fb      	strb	r3, [r7, #23]
 8005ece:	e005      	b.n	8005edc <UART_SetConfig+0x218>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	75fb      	strb	r3, [r7, #23]
 8005ed4:	bf00      	nop
 8005ed6:	e001      	b.n	8005edc <UART_SetConfig+0x218>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee4:	d17d      	bne.n	8005fe2 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d865      	bhi.n	8005fb8 <UART_SetConfig+0x2f4>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <UART_SetConfig+0x230>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f35 	.word	0x08005f35
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08005fb9 	.word	0x08005fb9
 8005f04:	08005f6b 	.word	0x08005f6b
 8005f08:	08005fb9 	.word	0x08005fb9
 8005f0c:	08005fb9 	.word	0x08005fb9
 8005f10:	08005fb9 	.word	0x08005fb9
 8005f14:	08005f87 	.word	0x08005f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005f18:	f7fe fc70 	bl	80047fc <HAL_RCC_GetPCLK1Freq>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	005a      	lsls	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	441a      	add	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	82bb      	strh	r3, [r7, #20]
        break;
 8005f32:	e044      	b.n	8005fbe <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005f34:	f7fe fc84 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	005a      	lsls	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	441a      	add	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	82bb      	strh	r3, [r7, #20]
        break;
 8005f4e:	e036      	b.n	8005fbe <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005f5a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6852      	ldr	r2, [r2, #4]
 8005f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f66:	82bb      	strh	r3, [r7, #20]
        break;
 8005f68:	e029      	b.n	8005fbe <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005f6a:	f7fe fbd1 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	005a      	lsls	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	441a      	add	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	82bb      	strh	r3, [r7, #20]
        break;
 8005f84:	e01b      	b.n	8005fbe <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	82bb      	strh	r3, [r7, #20]
        break;
 8005f9a:	e010      	b.n	8005fbe <UART_SetConfig+0x2fa>
 8005f9c:	efff69f3 	.word	0xefff69f3
 8005fa0:	40013800 	.word	0x40013800
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40004400 	.word	0x40004400
 8005fac:	40004800 	.word	0x40004800
 8005fb0:	40004c00 	.word	0x40004c00
 8005fb4:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	74fb      	strb	r3, [r7, #19]
        break;
 8005fbc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005fbe:	8abb      	ldrh	r3, [r7, #20]
 8005fc0:	f023 030f 	bic.w	r3, r3, #15
 8005fc4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fc6:	8abb      	ldrh	r3, [r7, #20]
 8005fc8:	105b      	asrs	r3, r3, #1
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	897b      	ldrh	r3, [r7, #10]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	897a      	ldrh	r2, [r7, #10]
 8005fde:	60da      	str	r2, [r3, #12]
 8005fe0:	e069      	b.n	80060b6 <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d863      	bhi.n	80060b0 <UART_SetConfig+0x3ec>
 8005fe8:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <UART_SetConfig+0x32c>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	08006035 	.word	0x08006035
 8005ff8:	08006055 	.word	0x08006055
 8005ffc:	080060b1 	.word	0x080060b1
 8006000:	08006075 	.word	0x08006075
 8006004:	080060b1 	.word	0x080060b1
 8006008:	080060b1 	.word	0x080060b1
 800600c:	080060b1 	.word	0x080060b1
 8006010:	08006095 	.word	0x08006095
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006014:	f7fe fbf2 	bl	80047fc <HAL_RCC_GetPCLK1Freq>
 8006018:	4602      	mov	r2, r0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	085b      	lsrs	r3, r3, #1
 8006020:	441a      	add	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	fbb2 f3f3 	udiv	r3, r2, r3
 800602a:	b29a      	uxth	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60da      	str	r2, [r3, #12]
        break;
 8006032:	e040      	b.n	80060b6 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006034:	f7fe fc04 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 8006038:	4602      	mov	r2, r0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	441a      	add	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	fbb2 f3f3 	udiv	r3, r2, r3
 800604a:	b29a      	uxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60da      	str	r2, [r3, #12]
        break;
 8006052:	e030      	b.n	80060b6 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800605e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6852      	ldr	r2, [r2, #4]
 8006066:	fbb3 f3f2 	udiv	r3, r3, r2
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60da      	str	r2, [r3, #12]
        break;
 8006072:	e020      	b.n	80060b6 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006074:	f7fe fb4c 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8006078:	4602      	mov	r2, r0
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	441a      	add	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	fbb2 f3f3 	udiv	r3, r2, r3
 800608a:	b29a      	uxth	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60da      	str	r2, [r3, #12]
        break;
 8006092:	e010      	b.n	80060b6 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	085b      	lsrs	r3, r3, #1
 800609a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60da      	str	r2, [r3, #12]
        break;
 80060ae:	e002      	b.n	80060b6 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	74fb      	strb	r3, [r7, #19]
        break;
 80060b4:	bf00      	nop
    }
  }

  return ret;
 80060b6:	7cfb      	ldrb	r3, [r7, #19]

}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01a      	beq.n	80061d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061be:	d10a      	bne.n	80061d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]
  }
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af02      	add	r7, sp, #8
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006216:	f7fa fca7 	bl	8000b68 <HAL_GetTick>
 800621a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b08      	cmp	r3, #8
 8006228:	d10e      	bne.n	8006248 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800622a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f82c 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e022      	b.n	800628e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b04      	cmp	r3, #4
 8006254:	d10e      	bne.n	8006274 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006256:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f816 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e00c      	b.n	800628e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	4613      	mov	r3, r2
 80062a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a6:	e02c      	b.n	8006302 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d028      	beq.n	8006302 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80062b6:	f7fa fc57 	bl	8000b68 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d21d      	bcs.n	8006302 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e00f      	b.n	8006322 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4013      	ands	r3, r2
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	429a      	cmp	r2, r3
 8006310:	bf0c      	ite	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	2300      	movne	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	429a      	cmp	r2, r3
 800631e:	d0c3      	beq.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	; 0x28
 8006330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006332:	f107 0314 	add.w	r3, r7, #20
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	605a      	str	r2, [r3, #4]
 800633c:	609a      	str	r2, [r3, #8]
 800633e:	60da      	str	r2, [r3, #12]
 8006340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006342:	4b36      	ldr	r3, [pc, #216]	; (800641c <MX_GPIO_Init+0xf0>)
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	4a35      	ldr	r2, [pc, #212]	; (800641c <MX_GPIO_Init+0xf0>)
 8006348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800634c:	6153      	str	r3, [r2, #20]
 800634e:	4b33      	ldr	r3, [pc, #204]	; (800641c <MX_GPIO_Init+0xf0>)
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800635a:	4b30      	ldr	r3, [pc, #192]	; (800641c <MX_GPIO_Init+0xf0>)
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	4a2f      	ldr	r2, [pc, #188]	; (800641c <MX_GPIO_Init+0xf0>)
 8006360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006364:	6153      	str	r3, [r2, #20]
 8006366:	4b2d      	ldr	r3, [pc, #180]	; (800641c <MX_GPIO_Init+0xf0>)
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006372:	4b2a      	ldr	r3, [pc, #168]	; (800641c <MX_GPIO_Init+0xf0>)
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	4a29      	ldr	r2, [pc, #164]	; (800641c <MX_GPIO_Init+0xf0>)
 8006378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800637c:	6153      	str	r3, [r2, #20]
 800637e:	4b27      	ldr	r3, [pc, #156]	; (800641c <MX_GPIO_Init+0xf0>)
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <MX_GPIO_Init+0xf0>)
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <MX_GPIO_Init+0xf0>)
 8006390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006394:	6153      	str	r3, [r2, #20]
 8006396:	4b21      	ldr	r3, [pc, #132]	; (800641c <MX_GPIO_Init+0xf0>)
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639e:	607b      	str	r3, [r7, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_Vext_GPIO_Port, PWM_Vext_Pin, GPIO_PIN_RESET);
 80063a2:	2200      	movs	r2, #0
 80063a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80063a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063ac:	f7fc fa0e 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SYS_STATUS_Pin|RPI_Shutdown_Pin|RPI_Pwr_Enable_Pin, GPIO_PIN_RESET);
 80063b0:	2200      	movs	r2, #0
 80063b2:	f44f 7194 	mov.w	r1, #296	; 0x128
 80063b6:	481a      	ldr	r0, [pc, #104]	; (8006420 <MX_GPIO_Init+0xf4>)
 80063b8:	f7fc fa08 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PWM_Vext_Pin */
  GPIO_InitStruct.Pin = PWM_Vext_Pin;
 80063bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063c2:	2301      	movs	r3, #1
 80063c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ca:	2300      	movs	r3, #0
 80063cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWM_Vext_GPIO_Port, &GPIO_InitStruct);
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	4619      	mov	r1, r3
 80063d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063d8:	f7fc f852 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYS_STATUS_Pin RPI_Shutdown_Pin RPI_Pwr_Enable_Pin */
  GPIO_InitStruct.Pin = SYS_STATUS_Pin|RPI_Shutdown_Pin|RPI_Pwr_Enable_Pin;
 80063dc:	f44f 7394 	mov.w	r3, #296	; 0x128
 80063e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063e2:	2301      	movs	r3, #1
 80063e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ea:	2300      	movs	r3, #0
 80063ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ee:	f107 0314 	add.w	r3, r7, #20
 80063f2:	4619      	mov	r1, r3
 80063f4:	480a      	ldr	r0, [pc, #40]	; (8006420 <MX_GPIO_Init+0xf4>)
 80063f6:	f7fc f843 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPI_Ready_Pin */
  GPIO_InitStruct.Pin = RPI_Ready_Pin;
 80063fa:	2310      	movs	r3, #16
 80063fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <MX_GPIO_Init+0xf8>)
 8006400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPI_Ready_GPIO_Port, &GPIO_InitStruct);
 8006406:	f107 0314 	add.w	r3, r7, #20
 800640a:	4619      	mov	r1, r3
 800640c:	4804      	ldr	r0, [pc, #16]	; (8006420 <MX_GPIO_Init+0xf4>)
 800640e:	f7fc f837 	bl	8002480 <HAL_GPIO_Init>

  /* Enable and set EXTI line 4 Interrupt to the lowest priority */
//  HAL_NVIC_SetPriority(EXTI4_IRQn, 14, 0);
//  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
}
 8006412:	bf00      	nop
 8006414:	3728      	adds	r7, #40	; 0x28
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40021000 	.word	0x40021000
 8006420:	48000400 	.word	0x48000400
 8006424:	10110000 	.word	0x10110000

08006428 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <MX_I2C1_Init+0x74>)
 800642e:	4a1c      	ldr	r2, [pc, #112]	; (80064a0 <MX_I2C1_Init+0x78>)
 8006430:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8006432:	4b1a      	ldr	r3, [pc, #104]	; (800649c <MX_I2C1_Init+0x74>)
 8006434:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <MX_I2C1_Init+0x7c>)
 8006436:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0b1010101 << 1;
 8006438:	4b18      	ldr	r3, [pc, #96]	; (800649c <MX_I2C1_Init+0x74>)
 800643a:	22aa      	movs	r2, #170	; 0xaa
 800643c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800643e:	4b17      	ldr	r3, [pc, #92]	; (800649c <MX_I2C1_Init+0x74>)
 8006440:	2201      	movs	r2, #1
 8006442:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006444:	4b15      	ldr	r3, [pc, #84]	; (800649c <MX_I2C1_Init+0x74>)
 8006446:	2200      	movs	r2, #0
 8006448:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800644a:	4b14      	ldr	r3, [pc, #80]	; (800649c <MX_I2C1_Init+0x74>)
 800644c:	2200      	movs	r2, #0
 800644e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006450:	4b12      	ldr	r3, [pc, #72]	; (800649c <MX_I2C1_Init+0x74>)
 8006452:	2200      	movs	r2, #0
 8006454:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006456:	4b11      	ldr	r3, [pc, #68]	; (800649c <MX_I2C1_Init+0x74>)
 8006458:	2200      	movs	r2, #0
 800645a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800645c:	4b0f      	ldr	r3, [pc, #60]	; (800649c <MX_I2C1_Init+0x74>)
 800645e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006462:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006464:	480d      	ldr	r0, [pc, #52]	; (800649c <MX_I2C1_Init+0x74>)
 8006466:	f7fc f9db 	bl	8002820 <HAL_I2C_Init>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006470:	f001 fc66 	bl	8007d40 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006474:	2100      	movs	r1, #0
 8006476:	4809      	ldr	r0, [pc, #36]	; (800649c <MX_I2C1_Init+0x74>)
 8006478:	f7fd f846 	bl	8003508 <HAL_I2CEx_ConfigAnalogFilter>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8006482:	f001 fc5d 	bl	8007d40 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006486:	2100      	movs	r1, #0
 8006488:	4804      	ldr	r0, [pc, #16]	; (800649c <MX_I2C1_Init+0x74>)
 800648a:	f7fd f888 	bl	800359e <HAL_I2CEx_ConfigDigitalFilter>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8006494:	f001 fc54 	bl	8007d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006498:	bf00      	nop
 800649a:	bd80      	pop	{r7, pc}
 800649c:	200000d0 	.word	0x200000d0
 80064a0:	40005400 	.word	0x40005400
 80064a4:	2000090e 	.word	0x2000090e

080064a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80064ac:	4b1b      	ldr	r3, [pc, #108]	; (800651c <MX_I2C2_Init+0x74>)
 80064ae:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <MX_I2C2_Init+0x78>)
 80064b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80064b2:	4b1a      	ldr	r3, [pc, #104]	; (800651c <MX_I2C2_Init+0x74>)
 80064b4:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <MX_I2C2_Init+0x7c>)
 80064b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80064b8:	4b18      	ldr	r3, [pc, #96]	; (800651c <MX_I2C2_Init+0x74>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064be:	4b17      	ldr	r3, [pc, #92]	; (800651c <MX_I2C2_Init+0x74>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064c4:	4b15      	ldr	r3, [pc, #84]	; (800651c <MX_I2C2_Init+0x74>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80064ca:	4b14      	ldr	r3, [pc, #80]	; (800651c <MX_I2C2_Init+0x74>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80064d0:	4b12      	ldr	r3, [pc, #72]	; (800651c <MX_I2C2_Init+0x74>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <MX_I2C2_Init+0x74>)
 80064d8:	2200      	movs	r2, #0
 80064da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <MX_I2C2_Init+0x74>)
 80064de:	2200      	movs	r2, #0
 80064e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80064e2:	480e      	ldr	r0, [pc, #56]	; (800651c <MX_I2C2_Init+0x74>)
 80064e4:	f7fc f99c 	bl	8002820 <HAL_I2C_Init>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80064ee:	f001 fc27 	bl	8007d40 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064f2:	2100      	movs	r1, #0
 80064f4:	4809      	ldr	r0, [pc, #36]	; (800651c <MX_I2C2_Init+0x74>)
 80064f6:	f7fd f807 	bl	8003508 <HAL_I2CEx_ConfigAnalogFilter>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006500:	f001 fc1e 	bl	8007d40 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006504:	2100      	movs	r1, #0
 8006506:	4805      	ldr	r0, [pc, #20]	; (800651c <MX_I2C2_Init+0x74>)
 8006508:	f7fd f849 	bl	800359e <HAL_I2CEx_ConfigDigitalFilter>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006512:	f001 fc15 	bl	8007d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	2000011c 	.word	0x2000011c
 8006520:	40005800 	.word	0x40005800
 8006524:	2000090e 	.word	0x2000090e

08006528 <RPI_Log_Bulk_Data>:
int8_t RPI_Log_Bulk_Data_Ascend(uint8_t start_page, uint8_t end_page);
int8_t RPI_Initiate(uint8_t pages);

uint16_t I2C_array_len = 0;

int8_t RPI_Log_Bulk_Data(uint8_t start_page, uint8_t end_page) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	460a      	mov	r2, r1
 8006532:	71fb      	strb	r3, [r7, #7]
 8006534:	4613      	mov	r3, r2
 8006536:	71bb      	strb	r3, [r7, #6]
	int8_t RPI_success;
	if (start_page == end_page) {
 8006538:	79fa      	ldrb	r2, [r7, #7]
 800653a:	79bb      	ldrb	r3, [r7, #6]
 800653c:	429a      	cmp	r2, r3
 800653e:	d111      	bne.n	8006564 <RPI_Log_Bulk_Data+0x3c>
		// No pages to write, so just sync ts
		uint8_t n_pages = end_page - start_page;
 8006540:	79ba      	ldrb	r2, [r7, #6]
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	73bb      	strb	r3, [r7, #14]
		// Initiate conversation with RPI
		if ((RPI_success = RPI_Initiate(n_pages)) == -1) {
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 f968 	bl	8006820 <RPI_Initiate>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
 8006554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d138      	bne.n	80065d0 <RPI_Log_Bulk_Data+0xa8>
			return -1;
 800655e:	f04f 33ff 	mov.w	r3, #4294967295
 8006562:	e036      	b.n	80065d2 <RPI_Log_Bulk_Data+0xaa>
		}
	} else if (end_page < start_page) {
 8006564:	79ba      	ldrb	r2, [r7, #6]
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	429a      	cmp	r2, r3
 800656a:	d21f      	bcs.n	80065ac <RPI_Log_Bulk_Data+0x84>
		if ((RPI_success = RPI_Log_Bulk_Data_Ascend(start_page, FLASH_TOTAL_DATA_PAGES)) == -1) {
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	21eb      	movs	r1, #235	; 0xeb
 8006570:	4618      	mov	r0, r3
 8006572:	f000 f833 	bl	80065dc <RPI_Log_Bulk_Data_Ascend>
 8006576:	4603      	mov	r3, r0
 8006578:	73fb      	strb	r3, [r7, #15]
 800657a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d102      	bne.n	800658a <RPI_Log_Bulk_Data+0x62>
			return -1;
 8006584:	f04f 33ff 	mov.w	r3, #4294967295
 8006588:	e023      	b.n	80065d2 <RPI_Log_Bulk_Data+0xaa>
		}
		if ((RPI_success = RPI_Log_Bulk_Data_Ascend(0, end_page-1)) == -1) {
 800658a:	79bb      	ldrb	r3, [r7, #6]
 800658c:	3b01      	subs	r3, #1
 800658e:	b2db      	uxtb	r3, r3
 8006590:	4619      	mov	r1, r3
 8006592:	2000      	movs	r0, #0
 8006594:	f000 f822 	bl	80065dc <RPI_Log_Bulk_Data_Ascend>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
 800659c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d114      	bne.n	80065d0 <RPI_Log_Bulk_Data+0xa8>
			return -1;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	e012      	b.n	80065d2 <RPI_Log_Bulk_Data+0xaa>
		}
	} else {
		if ((RPI_success = RPI_Log_Bulk_Data_Ascend(start_page, end_page-1)) == -1) {
 80065ac:	79bb      	ldrb	r3, [r7, #6]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f810 	bl	80065dc <RPI_Log_Bulk_Data_Ascend>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
 80065c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d102      	bne.n	80065d0 <RPI_Log_Bulk_Data+0xa8>
			return -1;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295
 80065ce:	e000      	b.n	80065d2 <RPI_Log_Bulk_Data+0xaa>
		}
	}
	return 1;
 80065d0:	2301      	movs	r3, #1
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <RPI_Log_Bulk_Data_Ascend>:


int8_t RPI_Log_Bulk_Data_Ascend(uint8_t start_page, uint8_t end_page) {
 80065dc:	b5b0      	push	{r4, r5, r7, lr}
 80065de:	b0a4      	sub	sp, #144	; 0x90
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	4603      	mov	r3, r0
 80065e4:	460a      	mov	r2, r1
 80065e6:	71fb      	strb	r3, [r7, #7]
 80065e8:	4613      	mov	r3, r2
 80065ea:	71bb      	strb	r3, [r7, #6]
 80065ec:	466b      	mov	r3, sp
 80065ee:	461d      	mov	r5, r3
	if (end_page < start_page) return -1;
 80065f0:	79ba      	ldrb	r2, [r7, #6]
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d202      	bcs.n	80065fe <RPI_Log_Bulk_Data_Ascend+0x22>
 80065f8:	f04f 33ff 	mov.w	r3, #4294967295
 80065fc:	e0d1      	b.n	80067a2 <RPI_Log_Bulk_Data_Ascend+0x1c6>
	int8_t RPI_success;
	uint32_t temp_addr;
	uint8_t n_pages = end_page - start_page + 1;
 80065fe:	79ba      	ldrb	r2, [r7, #6]
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	b2db      	uxtb	r3, r3
 8006606:	3301      	adds	r3, #1
 8006608:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	// Initiate conversation with RPI
	if ((RPI_success = RPI_Initiate(n_pages)) == -1) {
 800660c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8006610:	4618      	mov	r0, r3
 8006612:	f000 f905 	bl	8006820 <RPI_Initiate>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800661c:	f997 3083 	ldrsb.w	r3, [r7, #131]	; 0x83
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d102      	bne.n	800662c <RPI_Log_Bulk_Data_Ascend+0x50>
		return -1;
 8006626:	f04f 33ff 	mov.w	r3, #4294967295
 800662a:	e0ba      	b.n	80067a2 <RPI_Log_Bulk_Data_Ascend+0x1c6>
	}
	char mm[100];
	uint8_t logged_pages[n_pages];
 800662c:	f897 0084 	ldrb.w	r0, [r7, #132]	; 0x84
 8006630:	4603      	mov	r3, r0
 8006632:	3b01      	subs	r3, #1
 8006634:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006636:	b2c1      	uxtb	r1, r0
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	f04f 0400 	mov.w	r4, #0
 8006644:	00d4      	lsls	r4, r2, #3
 8006646:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800664a:	00cb      	lsls	r3, r1, #3
 800664c:	b2c1      	uxtb	r1, r0
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	f04f 0400 	mov.w	r4, #0
 800665a:	00d4      	lsls	r4, r2, #3
 800665c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006660:	00cb      	lsls	r3, r1, #3
 8006662:	4603      	mov	r3, r0
 8006664:	3307      	adds	r3, #7
 8006666:	08db      	lsrs	r3, r3, #3
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	ebad 0d03 	sub.w	sp, sp, r3
 800666e:	ab02      	add	r3, sp, #8
 8006670:	3300      	adds	r3, #0
 8006672:	67bb      	str	r3, [r7, #120]	; 0x78
	uint8_t logged_n = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	// Transfer data to RPI
	uint8_t page = start_page;
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	while (page <= end_page) {
 8006680:	e088      	b.n	8006794 <RPI_Log_Bulk_Data_Ascend+0x1b8>
		uint16_t cur_nth_page = Flash_Get_Nth_Page(page);
 8006682:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fd58 	bl	800713c <Flash_Get_Nth_Page>
 800668c:	4603      	mov	r3, r0
 800668e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		if (cur_nth_page != 0xFFFF) {
 8006692:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800669a:	4293      	cmp	r3, r2
 800669c:	d075      	beq.n	800678a <RPI_Log_Bulk_Data_Ascend+0x1ae>
			sprintf(mm, "Copy page: %u\r\n", page);
 800669e:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80066a2:	f107 0308 	add.w	r3, r7, #8
 80066a6:	4941      	ldr	r1, [pc, #260]	; (80067ac <RPI_Log_Bulk_Data_Ascend+0x1d0>)
 80066a8:	4618      	mov	r0, r3
 80066aa:	f002 fb6d 	bl	8008d88 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 80066ae:	f107 0308 	add.w	r3, r7, #8
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7f9 fd94 	bl	80001e0 <strlen>
 80066b8:	4603      	mov	r3, r0
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	f107 0108 	add.w	r1, r7, #8
 80066c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066c4:	483a      	ldr	r0, [pc, #232]	; (80067b0 <RPI_Log_Bulk_Data_Ascend+0x1d4>)
 80066c6:	f7ff fa70 	bl	8005baa <HAL_UART_Transmit>

		// the page has data on it, so go ahead and log
			if ((RPI_success = RPI_Log_Data(page, cur_nth_page)) == -1) {
 80066ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066ce:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80066d2:	4611      	mov	r1, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f995 	bl	8006a04 <RPI_Log_Data>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80066e0:	f997 3083 	ldrsb.w	r3, [r7, #131]	; 0x83
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e8:	d144      	bne.n	8006774 <RPI_Log_Bulk_Data_Ascend+0x198>
				/* Erase Flash Pages whose data are transferred successfully */
				HAL_FLASH_Unlock();
 80066ea:	f7fb fd61 	bl	80021b0 <HAL_FLASH_Unlock>
				for (uint8_t j = 0; j < logged_n; j++) {
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80066f4:	e033      	b.n	800675e <RPI_Log_Bulk_Data_Ascend+0x182>
					temp_addr = Flash_Get_Page_Addr(logged_pages[j]);
 80066f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80066fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066fc:	5cd3      	ldrb	r3, [r2, r3]
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fd2c 	bl	800715c <Flash_Get_Page_Addr>
 8006704:	6738      	str	r0, [r7, #112]	; 0x70
					int8_t success = Flash_Erase(temp_addr, temp_addr+FLASH_PAGE_SIZE, 1);
 8006706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670c:	2201      	movs	r2, #1
 800670e:	4619      	mov	r1, r3
 8006710:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006712:	f000 fd35 	bl	8007180 <Flash_Erase>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					sprintf(mm, "Erase %u %u successfully: %d\r\n", logged_pages[j], temp_addr, success);
 800671c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006722:	5cd3      	ldrb	r3, [r2, r3]
 8006724:	461a      	mov	r2, r3
 8006726:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800672a:	f107 0008 	add.w	r0, r7, #8
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006732:	4920      	ldr	r1, [pc, #128]	; (80067b4 <RPI_Log_Bulk_Data_Ascend+0x1d8>)
 8006734:	f002 fb28 	bl	8008d88 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	4618      	mov	r0, r3
 800673e:	f7f9 fd4f 	bl	80001e0 <strlen>
 8006742:	4603      	mov	r3, r0
 8006744:	b29a      	uxth	r2, r3
 8006746:	f107 0108 	add.w	r1, r7, #8
 800674a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800674e:	4818      	ldr	r0, [pc, #96]	; (80067b0 <RPI_Log_Bulk_Data_Ascend+0x1d4>)
 8006750:	f7ff fa2b 	bl	8005baa <HAL_UART_Transmit>
				for (uint8_t j = 0; j < logged_n; j++) {
 8006754:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006758:	3301      	adds	r3, #1
 800675a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800675e:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8006762:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8006766:	429a      	cmp	r2, r3
 8006768:	d3c5      	bcc.n	80066f6 <RPI_Log_Bulk_Data_Ascend+0x11a>
				}
				HAL_FLASH_Lock();
 800676a:	f7fb fd47 	bl	80021fc <HAL_FLASH_Lock>
				return -1;
 800676e:	f04f 33ff 	mov.w	r3, #4294967295
 8006772:	e016      	b.n	80067a2 <RPI_Log_Bulk_Data_Ascend+0x1c6>
			}
			logged_pages[logged_n] = page;
 8006774:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8006778:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800677a:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 800677e:	54d1      	strb	r1, [r2, r3]
			logged_n++;
 8006780:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8006784:	3301      	adds	r3, #1
 8006786:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		}
		page++;
 800678a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800678e:	3301      	adds	r3, #1
 8006790:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	while (page <= end_page) {
 8006794:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8006798:	79bb      	ldrb	r3, [r7, #6]
 800679a:	429a      	cmp	r2, r3
 800679c:	f67f af71 	bls.w	8006682 <RPI_Log_Bulk_Data_Ascend+0xa6>
		int8_t success = Flash_Erase(temp_addr, temp_addr+FLASH_PAGE_SIZE, 1);
		sprintf(mm, "Erase %u %u successfully: %d\r\n", logged_pages[j], temp_addr, success);
		HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
	}
	HAL_FLASH_Lock();*/
	return 1;
 80067a0:	2301      	movs	r3, #1
 80067a2:	46ad      	mov	sp, r5
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3788      	adds	r7, #136	; 0x88
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bdb0      	pop	{r4, r5, r7, pc}
 80067ac:	080095ac 	.word	0x080095ac
 80067b0:	20000964 	.word	0x20000964
 80067b4:	080095bc 	.word	0x080095bc

080067b8 <RPI_Off>:
	HAL_GPIO_WritePin(GPIOB, RPI_Pwr_Enable_Pin, GPIO_PIN_RESET);
	RPI_Status = RPI_PREPARING;
}


void RPI_Off(void) {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RPI_Shutdown_Pin, RESET);
 80067be:	2200      	movs	r2, #0
 80067c0:	2120      	movs	r1, #32
 80067c2:	4813      	ldr	r0, [pc, #76]	; (8006810 <RPI_Off+0x58>)
 80067c4:	f7fc f802 	bl	80027cc <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 80067c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80067cc:	f7fa f9d8 	bl	8000b80 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, RPI_Shutdown_Pin, SET);
 80067d0:	2201      	movs	r2, #1
 80067d2:	2120      	movs	r1, #32
 80067d4:	480e      	ldr	r0, [pc, #56]	; (8006810 <RPI_Off+0x58>)
 80067d6:	f7fb fff9 	bl	80027cc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, RPI_Pwr_Enable_Pin, SET);
 80067da:	2201      	movs	r2, #1
 80067dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067e0:	480b      	ldr	r0, [pc, #44]	; (8006810 <RPI_Off+0x58>)
 80067e2:	f7fb fff3 	bl	80027cc <HAL_GPIO_WritePin>
	char *m = "RPI is off now\r\n";
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <RPI_Off+0x5c>)
 80067e8:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7f9 fcf8 	bl	80001e0 <strlen>
 80067f0:	4603      	mov	r3, r0
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	4807      	ldr	r0, [pc, #28]	; (8006818 <RPI_Off+0x60>)
 80067fc:	f7ff f9d5 	bl	8005baa <HAL_UART_Transmit>

	RPI_Status = RPI_OFF;
 8006800:	4b06      	ldr	r3, [pc, #24]	; (800681c <RPI_Off+0x64>)
 8006802:	2200      	movs	r2, #0
 8006804:	701a      	strb	r2, [r3, #0]
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	48000400 	.word	0x48000400
 8006814:	080095dc 	.word	0x080095dc
 8006818:	20000964 	.word	0x20000964
 800681c:	20000960 	.word	0x20000960

08006820 <RPI_Initiate>:

int8_t RPI_Initiate(uint8_t pages) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b0b8      	sub	sp, #224	; 0xe0
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	71fb      	strb	r3, [r7, #7]
	char *m;
	// Receive from RPI its ts
	uint32_t rx;
	char mm[100];
	sprintf(mm, "Initialize RPI conv with %u pages\r\n", pages);
 800682a:	79fa      	ldrb	r2, [r7, #7]
 800682c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006830:	4969      	ldr	r1, [pc, #420]	; (80069d8 <RPI_Initiate+0x1b8>)
 8006832:	4618      	mov	r0, r3
 8006834:	f002 faa8 	bl	8008d88 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 8006838:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800683c:	4618      	mov	r0, r3
 800683e:	f7f9 fccf 	bl	80001e0 <strlen>
 8006842:	4603      	mov	r3, r0
 8006844:	b29a      	uxth	r2, r3
 8006846:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800684a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800684e:	4863      	ldr	r0, [pc, #396]	; (80069dc <RPI_Initiate+0x1bc>)
 8006850:	f7ff f9ab 	bl	8005baa <HAL_UART_Transmit>

	HAL_StatusTypeDef s = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *)&rx, (uint16_t) 4, 10000);
 8006854:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8006858:	f242 7310 	movw	r3, #10000	; 0x2710
 800685c:	2204      	movs	r2, #4
 800685e:	4860      	ldr	r0, [pc, #384]	; (80069e0 <RPI_Initiate+0x1c0>)
 8006860:	f7fc fb7b 	bl	8002f5a <HAL_I2C_Slave_Receive>
 8006864:	4603      	mov	r3, r0
 8006866:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	m = "Tried and...\r\n";
 800686a:	4b5e      	ldr	r3, [pc, #376]	; (80069e4 <RPI_Initiate+0x1c4>)
 800686c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8006870:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8006874:	f7f9 fcb4 	bl	80001e0 <strlen>
 8006878:	4603      	mov	r3, r0
 800687a:	b29a      	uxth	r2, r3
 800687c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006880:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006884:	4855      	ldr	r0, [pc, #340]	; (80069dc <RPI_Initiate+0x1bc>)
 8006886:	f7ff f990 	bl	8005baa <HAL_UART_Transmit>
	if (s != HAL_OK) {
 800688a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800688e:	2b00      	cmp	r3, #0
 8006890:	d012      	beq.n	80068b8 <RPI_Initiate+0x98>
		m = "Failed receiving nth_page from RPI after 100seconds\r\n";
 8006892:	4b55      	ldr	r3, [pc, #340]	; (80069e8 <RPI_Initiate+0x1c8>)
 8006894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8006898:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800689c:	f7f9 fca0 	bl	80001e0 <strlen>
 80068a0:	4603      	mov	r3, r0
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068a8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80068ac:	484b      	ldr	r0, [pc, #300]	; (80069dc <RPI_Initiate+0x1bc>)
 80068ae:	f7ff f97c 	bl	8005baa <HAL_UART_Transmit>
		return -1;
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295
 80068b6:	e08a      	b.n	80069ce <RPI_Initiate+0x1ae>
	} else {
		char mm[100];
		ts = rx;
 80068b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068bc:	4a4b      	ldr	r2, [pc, #300]	; (80069ec <RPI_Initiate+0x1cc>)
 80068be:	6013      	str	r3, [r2, #0]
		sprintf(mm, "ts = %u\r\n", ts);
 80068c0:	4b4a      	ldr	r3, [pc, #296]	; (80069ec <RPI_Initiate+0x1cc>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	f107 0308 	add.w	r3, r7, #8
 80068c8:	4949      	ldr	r1, [pc, #292]	; (80069f0 <RPI_Initiate+0x1d0>)
 80068ca:	4618      	mov	r0, r3
 80068cc:	f002 fa5c 	bl	8008d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 80068d0:	f107 0308 	add.w	r3, r7, #8
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7f9 fc83 	bl	80001e0 <strlen>
 80068da:	4603      	mov	r3, r0
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f107 0108 	add.w	r1, r7, #8
 80068e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068e6:	483d      	ldr	r0, [pc, #244]	; (80069dc <RPI_Initiate+0x1bc>)
 80068e8:	f7ff f95f 	bl	8005baa <HAL_UART_Transmit>
	}
	uint8_t p = pages;
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	// Send # of pages to be written
	// TODO: What happens when RPI nth_page and STM nth_page do not match?
	if (HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t *)&p, 1, 10000) != HAL_OK) {
 80068f2:	f107 016f 	add.w	r1, r7, #111	; 0x6f
 80068f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80068fa:	2201      	movs	r2, #1
 80068fc:	4838      	ldr	r0, [pc, #224]	; (80069e0 <RPI_Initiate+0x1c0>)
 80068fe:	f7fc fa21 	bl	8002d44 <HAL_I2C_Slave_Transmit>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d012      	beq.n	800692e <RPI_Initiate+0x10e>
		m = "FAIL: n pages transfer\r\n";
 8006908:	4b3a      	ldr	r3, [pc, #232]	; (80069f4 <RPI_Initiate+0x1d4>)
 800690a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 800690e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8006912:	f7f9 fc65 	bl	80001e0 <strlen>
 8006916:	4603      	mov	r3, r0
 8006918:	b29a      	uxth	r2, r3
 800691a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800691e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006922:	482e      	ldr	r0, [pc, #184]	; (80069dc <RPI_Initiate+0x1bc>)
 8006924:	f7ff f941 	bl	8005baa <HAL_UART_Transmit>
		return -1;
 8006928:	f04f 33ff 	mov.w	r3, #4294967295
 800692c:	e04f      	b.n	80069ce <RPI_Initiate+0x1ae>
	} else {
		m = "SUCCESS: pages transfer\r\n";
 800692e:	4b32      	ldr	r3, [pc, #200]	; (80069f8 <RPI_Initiate+0x1d8>)
 8006930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8006934:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8006938:	f7f9 fc52 	bl	80001e0 <strlen>
 800693c:	4603      	mov	r3, r0
 800693e:	b29a      	uxth	r2, r3
 8006940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006944:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006948:	4824      	ldr	r0, [pc, #144]	; (80069dc <RPI_Initiate+0x1bc>)
 800694a:	f7ff f92e 	bl	8005baa <HAL_UART_Transmit>
	}
//
//	return 1;
	// Get OK from RPI
	uint8_t rx2 = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	if (HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *)&rx2, 1, 10000) != HAL_OK) {
 8006954:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8006958:	f242 7310 	movw	r3, #10000	; 0x2710
 800695c:	2201      	movs	r2, #1
 800695e:	4820      	ldr	r0, [pc, #128]	; (80069e0 <RPI_Initiate+0x1c0>)
 8006960:	f7fc fafb 	bl	8002f5a <HAL_I2C_Slave_Receive>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d012      	beq.n	8006990 <RPI_Initiate+0x170>
		m = "FAIL: writing to file in RPI after 100seconds\r\n";
 800696a:	4b24      	ldr	r3, [pc, #144]	; (80069fc <RPI_Initiate+0x1dc>)
 800696c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8006970:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8006974:	f7f9 fc34 	bl	80001e0 <strlen>
 8006978:	4603      	mov	r3, r0
 800697a:	b29a      	uxth	r2, r3
 800697c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006980:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006984:	4815      	ldr	r0, [pc, #84]	; (80069dc <RPI_Initiate+0x1bc>)
 8006986:	f7ff f910 	bl	8005baa <HAL_UART_Transmit>
		return -1;
 800698a:	f04f 33ff 	mov.w	r3, #4294967295
 800698e:	e01e      	b.n	80069ce <RPI_Initiate+0x1ae>
	} else {
		char mm[100];
		sprintf(mm, "SUCCESS: RPI - received:%u\r\n", rx2);
 8006990:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8006994:	461a      	mov	r2, r3
 8006996:	f107 0308 	add.w	r3, r7, #8
 800699a:	4919      	ldr	r1, [pc, #100]	; (8006a00 <RPI_Initiate+0x1e0>)
 800699c:	4618      	mov	r0, r3
 800699e:	f002 f9f3 	bl	8008d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 80069a2:	f107 0308 	add.w	r3, r7, #8
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7f9 fc1a 	bl	80001e0 <strlen>
 80069ac:	4603      	mov	r3, r0
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	f107 0108 	add.w	r1, r7, #8
 80069b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069b8:	4808      	ldr	r0, [pc, #32]	; (80069dc <RPI_Initiate+0x1bc>)
 80069ba:	f7ff f8f6 	bl	8005baa <HAL_UART_Transmit>
	}
	return rx2 == 1;
 80069be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	bf0c      	ite	eq
 80069c6:	2301      	moveq	r3, #1
 80069c8:	2300      	movne	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	b25b      	sxtb	r3, r3
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	37e0      	adds	r7, #224	; 0xe0
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	080095f0 	.word	0x080095f0
 80069dc:	20000964 	.word	0x20000964
 80069e0:	200000d0 	.word	0x200000d0
 80069e4:	08009614 	.word	0x08009614
 80069e8:	08009624 	.word	0x08009624
 80069ec:	20000090 	.word	0x20000090
 80069f0:	0800965c 	.word	0x0800965c
 80069f4:	08009668 	.word	0x08009668
 80069f8:	08009684 	.word	0x08009684
 80069fc:	080096a0 	.word	0x080096a0
 8006a00:	080096d0 	.word	0x080096d0

08006a04 <RPI_Log_Data>:


int8_t RPI_Log_Data(uint8_t page, uint16_t nth_page) {
 8006a04:	b5b0      	push	{r4, r5, r7, lr}
 8006a06:	f6ad 0d98 	subw	sp, sp, #2200	; 0x898
 8006a0a:	af04      	add	r7, sp, #16
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	1dfb      	adds	r3, r7, #7
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	460a      	mov	r2, r1
 8006a16:	801a      	strh	r2, [r3, #0]
	// I2C communication between RPI and STM32
	uint32_t start_addr = Flash_Get_Page_Addr(page);
 8006a18:	1dfb      	adds	r3, r7, #7
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fb9d 	bl	800715c <Flash_Get_Page_Addr>
 8006a22:	f8c7 0880 	str.w	r0, [r7, #2176]	; 0x880
	uint16_t cur_nth_page = Flash_Get_Nth_Page(start_addr);
 8006a26:	f8d7 3880 	ldr.w	r3, [r7, #2176]	; 0x880
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fb85 	bl	800713c <Flash_Get_Nth_Page>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f8a7 387e 	strh.w	r3, [r7, #2174]	; 0x87e
	if (cur_nth_page == 0xFFFF) return 1;
 8006a38:	f8b7 387e 	ldrh.w	r3, [r7, #2174]	; 0x87e
 8006a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <RPI_Log_Data+0x44>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e081      	b.n	8006b4c <RPI_Log_Data+0x148>
	struct SensorData s_data_I2C[MAX_SENSOR_DATA_ARR_LEN];
	Flash_Read_Page_Sensor_Data(page, &s_data_I2C, MAX_SENSOR_DATA_ARR_LEN);
 8006a48:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8006a4c:	1dfb      	adds	r3, r7, #7
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2266      	movs	r2, #102	; 0x66
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fc8c 	bl	8007370 <Flash_Read_Page_Sensor_Data>
	char mm[100];
	for (int i = 0; i < MAX_SENSOR_DATA_ARR_LEN; i++) {
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 8006a5e:	e03e      	b.n	8006ade <RPI_Log_Data+0xda>
		struct SensorData s = s_data_array[i];
 8006a60:	f107 0008 	add.w	r0, r7, #8
 8006a64:	493c      	ldr	r1, [pc, #240]	; (8006b58 <RPI_Log_Data+0x154>)
 8006a66:	f8d7 2884 	ldr.w	r2, [r7, #2180]	; 0x884
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	4604      	mov	r4, r0
 8006a76:	461d      	mov	r5, r3
 8006a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	6023      	str	r3, [r4, #0]
		sprintf(mm, "%X%X%X%X%X ", s.Idx, s.Timestamp,
 8006a80:	f107 0308 	add.w	r3, r7, #8
 8006a84:	681c      	ldr	r4, [r3, #0]
 8006a86:	f107 0308 	add.w	r3, r7, #8
 8006a8a:	685d      	ldr	r5, [r3, #4]
				*(unsigned int*)&s.Conductivity, *(unsigned int*)&s.Temperature,
 8006a8c:	f107 0308 	add.w	r3, r7, #8
 8006a90:	3310      	adds	r3, #16
		sprintf(mm, "%X%X%X%X%X ", s.Idx, s.Timestamp,
 8006a92:	681b      	ldr	r3, [r3, #0]
				*(unsigned int*)&s.Conductivity, *(unsigned int*)&s.Temperature,
 8006a94:	f107 0208 	add.w	r2, r7, #8
 8006a98:	320c      	adds	r2, #12
		sprintf(mm, "%X%X%X%X%X ", s.Idx, s.Timestamp,
 8006a9a:	6812      	ldr	r2, [r2, #0]
				*(unsigned int*)&s.Pressure);
 8006a9c:	f107 0108 	add.w	r1, r7, #8
 8006aa0:	3108      	adds	r1, #8
		sprintf(mm, "%X%X%X%X%X ", s.Idx, s.Timestamp,
 8006aa2:	6809      	ldr	r1, [r1, #0]
 8006aa4:	f107 001c 	add.w	r0, r7, #28
 8006aa8:	9102      	str	r1, [sp, #8]
 8006aaa:	9201      	str	r2, [sp, #4]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	462b      	mov	r3, r5
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	492a      	ldr	r1, [pc, #168]	; (8006b5c <RPI_Log_Data+0x158>)
 8006ab4:	f002 f968 	bl	8008d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 8006ab8:	f107 031c 	add.w	r3, r7, #28
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7f9 fb8f 	bl	80001e0 <strlen>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f107 011c 	add.w	r1, r7, #28
 8006aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ace:	4824      	ldr	r0, [pc, #144]	; (8006b60 <RPI_Log_Data+0x15c>)
 8006ad0:	f7ff f86b 	bl	8005baa <HAL_UART_Transmit>
	for (int i = 0; i < MAX_SENSOR_DATA_ARR_LEN; i++) {
 8006ad4:	f8d7 3884 	ldr.w	r3, [r7, #2180]	; 0x884
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 8006ade:	f8d7 3884 	ldr.w	r3, [r7, #2180]	; 0x884
 8006ae2:	2b65      	cmp	r3, #101	; 0x65
 8006ae4:	ddbc      	ble.n	8006a60 <RPI_Log_Data+0x5c>
	}
	char *m;
	uint16_t n_bytes = MAX_SENSOR_DATA_BYTES;
 8006ae6:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8006aea:	f8a7 387c 	strh.w	r3, [r7, #2172]	; 0x87c
//	} else {
//		m = "SUCCESS: data transfer\r\n";
//		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
//	}
	// Send the page data
	if (HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t *)s_data_I2C, MAX_SENSOR_DATA_BYTES, 100000) != HAL_OK) {
 8006aee:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8006af2:	4b1c      	ldr	r3, [pc, #112]	; (8006b64 <RPI_Log_Data+0x160>)
 8006af4:	f44f 62ff 	mov.w	r2, #2040	; 0x7f8
 8006af8:	481b      	ldr	r0, [pc, #108]	; (8006b68 <RPI_Log_Data+0x164>)
 8006afa:	f7fc f923 	bl	8002d44 <HAL_I2C_Slave_Transmit>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d012      	beq.n	8006b2a <RPI_Log_Data+0x126>
		m = "FAIL: data transfer\r\n";
 8006b04:	4b19      	ldr	r3, [pc, #100]	; (8006b6c <RPI_Log_Data+0x168>)
 8006b06:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8006b0a:	f8d7 0878 	ldr.w	r0, [r7, #2168]	; 0x878
 8006b0e:	f7f9 fb67 	bl	80001e0 <strlen>
 8006b12:	4603      	mov	r3, r0
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b1a:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 8006b1e:	4810      	ldr	r0, [pc, #64]	; (8006b60 <RPI_Log_Data+0x15c>)
 8006b20:	f7ff f843 	bl	8005baa <HAL_UART_Transmit>
		return -1;
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
 8006b28:	e010      	b.n	8006b4c <RPI_Log_Data+0x148>
	} else {
		m = "SUCCESS: data transfer\r\n";
 8006b2a:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <RPI_Log_Data+0x16c>)
 8006b2c:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8006b30:	f8d7 0878 	ldr.w	r0, [r7, #2168]	; 0x878
 8006b34:	f7f9 fb54 	bl	80001e0 <strlen>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b40:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 8006b44:	4806      	ldr	r0, [pc, #24]	; (8006b60 <RPI_Log_Data+0x15c>)
 8006b46:	f7ff f830 	bl	8005baa <HAL_UART_Transmit>
//	} else {
//		m = "SUCCESS: RPI - write complete\r\n";
//		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
//	}
//	return ok == 1;
	return 1;
 8006b4a:	2301      	movs	r3, #1
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f607 0788 	addw	r7, r7, #2184	; 0x888
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bdb0      	pop	{r4, r5, r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000168 	.word	0x20000168
 8006b5c:	080096f0 	.word	0x080096f0
 8006b60:	20000964 	.word	0x20000964
 8006b64:	000186a0 	.word	0x000186a0
 8006b68:	200000d0 	.word	0x200000d0
 8006b6c:	080096fc 	.word	0x080096fc
 8006b70:	08009714 	.word	0x08009714

08006b74 <RPI_Ready_Handler>:
	// Initiate conversation with RPI with 0 read --> check wifi
	RPI_Initiate(0);
}


void RPI_Ready_Handler(void) {
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b09b      	sub	sp, #108	; 0x6c
 8006b78:	af00      	add	r7, sp, #0
	// We are ready to log to RPI, set the flag!
	RPI_Status = RPI_ON;
 8006b7a:	4b38      	ldr	r3, [pc, #224]	; (8006c5c <RPI_Ready_Handler+0xe8>)
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	701a      	strb	r2, [r3, #0]
	// Start working on a new page
	int8_t log_success = RPI_Log_Bulk_Data(unlogged_start_page, cur_page);
 8006b80:	4b37      	ldr	r3, [pc, #220]	; (8006c60 <RPI_Ready_Handler+0xec>)
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	4b37      	ldr	r3, [pc, #220]	; (8006c64 <RPI_Ready_Handler+0xf0>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f7ff fccc 	bl	8006528 <RPI_Log_Bulk_Data>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	char m[100];
	if (log_success == -1) {
 8006b96:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9e:	d13d      	bne.n	8006c1c <RPI_Ready_Handler+0xa8>
	// RPI logging failed
		sprintf(m, "RPI Failed, start from %u%u now\r\n", cur_page, unlogged_start_page);
 8006ba0:	4b30      	ldr	r3, [pc, #192]	; (8006c64 <RPI_Ready_Handler+0xf0>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4b2e      	ldr	r3, [pc, #184]	; (8006c60 <RPI_Ready_Handler+0xec>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	4638      	mov	r0, r7
 8006bac:	492e      	ldr	r1, [pc, #184]	; (8006c68 <RPI_Ready_Handler+0xf4>)
 8006bae:	f002 f8eb 	bl	8008d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7f9 fb13 	bl	80001e0 <strlen>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bc4:	4829      	ldr	r0, [pc, #164]	; (8006c6c <RPI_Ready_Handler+0xf8>)
 8006bc6:	f7fe fff0 	bl	8005baa <HAL_UART_Transmit>
		if ((cur_page + 1) % FLASH_TOTAL_DATA_PAGES == unlogged_start_page) {
 8006bca:	4b26      	ldr	r3, [pc, #152]	; (8006c64 <RPI_Ready_Handler+0xf0>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	4a27      	ldr	r2, [pc, #156]	; (8006c70 <RPI_Ready_Handler+0xfc>)
 8006bd2:	fb82 1203 	smull	r1, r2, r2, r3
 8006bd6:	441a      	add	r2, r3
 8006bd8:	11d1      	asrs	r1, r2, #7
 8006bda:	17da      	asrs	r2, r3, #31
 8006bdc:	1a8a      	subs	r2, r1, r2
 8006bde:	21eb      	movs	r1, #235	; 0xeb
 8006be0:	fb01 f202 	mul.w	r2, r1, r2
 8006be4:	1a9a      	subs	r2, r3, r2
 8006be6:	4b1e      	ldr	r3, [pc, #120]	; (8006c60 <RPI_Ready_Handler+0xec>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d116      	bne.n	8006c1c <RPI_Ready_Handler+0xa8>
		// RPI is full, flag RPI problem and try to save to RPI
			while (log_success == -1) {
 8006bee:	e00a      	b.n	8006c06 <RPI_Ready_Handler+0x92>
				log_success = RPI_Log_Bulk_Data(unlogged_start_page, cur_page);
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <RPI_Ready_Handler+0xec>)
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	; (8006c64 <RPI_Ready_Handler+0xf0>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	f7ff fc94 	bl	8006528 <RPI_Log_Bulk_Data>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			while (log_success == -1) {
 8006c06:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d0ef      	beq.n	8006bf0 <RPI_Ready_Handler+0x7c>
			}
			cur_page = 0;
 8006c10:	4b14      	ldr	r3, [pc, #80]	; (8006c64 <RPI_Ready_Handler+0xf0>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
			unlogged_start_page = 0;
 8006c16:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <RPI_Ready_Handler+0xec>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
		}
		// If there is some space left in flash, just go on to flash and try later
	}
	unlogged_start_page = cur_page;
 8006c1c:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <RPI_Ready_Handler+0xf0>)
 8006c1e:	781a      	ldrb	r2, [r3, #0]
 8006c20:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <RPI_Ready_Handler+0xec>)
 8006c22:	701a      	strb	r2, [r3, #0]
//	// RPI logging successful, start on new page
//		unlogged_start_page = cur_page;
//		sprintf(m, "RPI succcessful, start from %u%u now\r\n", cur_page, unlogged_start_page);
//		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
//	}
	sprintf(m, "Bye RPI now!\r\n");
 8006c24:	463b      	mov	r3, r7
 8006c26:	4a13      	ldr	r2, [pc, #76]	; (8006c74 <RPI_Ready_Handler+0x100>)
 8006c28:	461c      	mov	r4, r3
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c2e:	c407      	stmia	r4!, {r0, r1, r2}
 8006c30:	8023      	strh	r3, [r4, #0]
 8006c32:	3402      	adds	r4, #2
 8006c34:	0c1b      	lsrs	r3, r3, #16
 8006c36:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8006c38:	463b      	mov	r3, r7
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7f9 fad0 	bl	80001e0 <strlen>
 8006c40:	4603      	mov	r3, r0
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	4639      	mov	r1, r7
 8006c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c4a:	4808      	ldr	r0, [pc, #32]	; (8006c6c <RPI_Ready_Handler+0xf8>)
 8006c4c:	f7fe ffad 	bl	8005baa <HAL_UART_Transmit>
	RPI_Off();
 8006c50:	f7ff fdb2 	bl	80067b8 <RPI_Off>
}
 8006c54:	bf00      	nop
 8006c56:	376c      	adds	r7, #108	; 0x6c
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd90      	pop	{r4, r7, pc}
 8006c5c:	20000960 	.word	0x20000960
 8006c60:	20000b80 	.word	0x20000b80
 8006c64:	20000b8e 	.word	0x20000b8e
 8006c68:	08009730 	.word	0x08009730
 8006c6c:	20000964 	.word	0x20000964
 8006c70:	8b70344b 	.word	0x8b70344b
 8006c74:	08009754 	.word	0x08009754

08006c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006c7c:	4b14      	ldr	r3, [pc, #80]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006c7e:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <MX_USART2_UART_Init+0x5c>)
 8006c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38800;
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006c84:	f249 7290 	movw	r2, #38800	; 0x9790
 8006c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006c8a:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006c90:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006c96:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c9c:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006c9e:	220c      	movs	r2, #12
 8006ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ca8:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006cae:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006cb4:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006cba:	4805      	ldr	r0, [pc, #20]	; (8006cd0 <MX_USART2_UART_Init+0x58>)
 8006cbc:	f7fe ff24 	bl	8005b08 <HAL_UART_Init>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006cc6:	f001 f83b 	bl	8007d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000964 	.word	0x20000964
 8006cd4:	40004400 	.word	0x40004400

08006cd8 <ADC_Measure>:
#include "analogue.h"

// Conductivity ADC Measurement Functions
uint32_t ADC_Measure(ADC_HandleTypeDef* hadc)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	uint32_t ADC_value;
	HAL_ADC_Start(hadc);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7fa f969 	bl	8000fb8 <HAL_ADC_Start>
	ADC_value = HAL_ADC_GetValue(hadc);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fa fab1 	bl	800124e <HAL_ADC_GetValue>
 8006cec:	60f8      	str	r0, [r7, #12]
	return ADC_value;
 8006cee:	68fb      	ldr	r3, [r7, #12]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8006cfe:	f107 031c 	add.w	r3, r7, #28
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	605a      	str	r2, [r3, #4]
 8006d08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006d0a:	1d3b      	adds	r3, r7, #4
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	60da      	str	r2, [r3, #12]
 8006d16:	611a      	str	r2, [r3, #16]
 8006d18:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8006d1a:	4b2d      	ldr	r3, [pc, #180]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006d22:	4b2b      	ldr	r3, [pc, #172]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006d28:	4b29      	ldr	r3, [pc, #164]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006d2e:	4b28      	ldr	r3, [pc, #160]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006d34:	4b26      	ldr	r3, [pc, #152]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006d3a:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006d40:	4b23      	ldr	r3, [pc, #140]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006d46:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006d4c:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006d52:	4b1f      	ldr	r3, [pc, #124]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006d58:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006d5e:	4b1c      	ldr	r3, [pc, #112]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d60:	2204      	movs	r2, #4
 8006d62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006d64:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006d6a:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006d70:	4817      	ldr	r0, [pc, #92]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d72:	f7f9 ff27 	bl	8000bc4 <HAL_ADC_Init>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8006d7c:	f000 ffe0 	bl	8007d40 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006d84:	f107 031c 	add.w	r3, r7, #28
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4811      	ldr	r0, [pc, #68]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006d8c:	f7fa fd58 	bl	8001840 <HAL_ADCEx_MultiModeConfigChannel>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8006d96:	f000 ffd3 	bl	8007d40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006db2:	1d3b      	adds	r3, r7, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4806      	ldr	r0, [pc, #24]	; (8006dd0 <MX_ADC1_Init+0xd8>)
 8006db8:	f7fa fa56 	bl	8001268 <HAL_ADC_ConfigChannel>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8006dc2:	f000 ffbd 	bl	8007d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006dc6:	bf00      	nop
 8006dc8:	3728      	adds	r7, #40	; 0x28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000a3c 	.word	0x20000a3c

08006dd4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC2_Init(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006dda:	463b      	mov	r3, r7
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	609a      	str	r2, [r3, #8]
 8006de4:	60da      	str	r2, [r3, #12]
 8006de6:	611a      	str	r2, [r3, #16]
 8006de8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8006dea:	4b26      	ldr	r3, [pc, #152]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006dec:	4a26      	ldr	r2, [pc, #152]	; (8006e88 <MX_ADC2_Init+0xb4>)
 8006dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006df0:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006df6:	4b23      	ldr	r3, [pc, #140]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006dfc:	4b21      	ldr	r3, [pc, #132]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006e02:	4b20      	ldr	r3, [pc, #128]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006e08:	4b1e      	ldr	r3, [pc, #120]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006e0e:	4b1d      	ldr	r3, [pc, #116]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e14:	4b1b      	ldr	r3, [pc, #108]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006e1a:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8006e20:	4b18      	ldr	r3, [pc, #96]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	621a      	str	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006e26:	4b17      	ldr	r3, [pc, #92]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006e2c:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e2e:	2204      	movs	r2, #4
 8006e30:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8006e32:	4b14      	ldr	r3, [pc, #80]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	619a      	str	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006e38:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006e3e:	4811      	ldr	r0, [pc, #68]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e40:	f7f9 fec0 	bl	8000bc4 <HAL_ADC_Init>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8006e4a:	f000 ff79 	bl	8007d40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006e4e:	2307      	movs	r3, #7
 8006e50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006e66:	463b      	mov	r3, r7
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4806      	ldr	r0, [pc, #24]	; (8006e84 <MX_ADC2_Init+0xb0>)
 8006e6c:	f7fa f9fc 	bl	8001268 <HAL_ADC_ConfigChannel>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8006e76:	f000 ff63 	bl	8007d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006e7a:	bf00      	nop
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	200009e8 	.word	0x200009e8
 8006e88:	50000100 	.word	0x50000100

08006e8c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC1_Init(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006e92:	1d3b      	adds	r3, r7, #4
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006e9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <MX_DAC1_Init+0x4c>)
 8006e9e:	4a0f      	ldr	r2, [pc, #60]	; (8006edc <MX_DAC1_Init+0x50>)
 8006ea0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006ea2:	480d      	ldr	r0, [pc, #52]	; (8006ed8 <MX_DAC1_Init+0x4c>)
 8006ea4:	f7fb f835 	bl	8001f12 <HAL_DAC_Init>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8006eae:	f000 ff47 	bl	8007d40 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006eba:	1d3b      	adds	r3, r7, #4
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4805      	ldr	r0, [pc, #20]	; (8006ed8 <MX_DAC1_Init+0x4c>)
 8006ec2:	f7fb f8b8 	bl	8002036 <HAL_DAC_ConfigChannel>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8006ecc:	f000 ff38 	bl	8007d40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	200009d4 	.word	0x200009d4
 8006edc:	40007400 	.word	0x40007400

08006ee0 <Conductivity_Measure_Average>:
/**
 * Call to Measure Conductivity averaged over SAMPLE_SIZE
 * Returns (long) Conductivity Measure * 10000
 */
int32_t Conductivity_Measure_Average(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
	// Reset the variables
	sample_num = 0;
 8006ee4:	4b25      	ldr	r3, [pc, #148]	; (8006f7c <Conductivity_Measure_Average+0x9c>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
	conductivity = 0;
 8006eea:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <Conductivity_Measure_Average+0xa0>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
	voltage_high = 0;
 8006ef0:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <Conductivity_Measure_Average+0xa4>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
	current_high = 0;
 8006ef6:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <Conductivity_Measure_Average+0xa8>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
	voltage_low = 0;
 8006efc:	4b23      	ldr	r3, [pc, #140]	; (8006f8c <Conductivity_Measure_Average+0xac>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]
	current_low = 0;
 8006f02:	4b23      	ldr	r3, [pc, #140]	; (8006f90 <Conductivity_Measure_Average+0xb0>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]
	voltage_cal = 0;
 8006f08:	4b22      	ldr	r3, [pc, #136]	; (8006f94 <Conductivity_Measure_Average+0xb4>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
	current_cal = 0;
 8006f0e:	4b22      	ldr	r3, [pc, #136]	; (8006f98 <Conductivity_Measure_Average+0xb8>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]

	// Start DAC, PWM interrupts and ADC channels
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT);
 8006f14:	f240 1375 	movw	r3, #373	; 0x175
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	481f      	ldr	r0, [pc, #124]	; (8006f9c <Conductivity_Measure_Average+0xbc>)
 8006f1e:	f7fb f81a 	bl	8001f56 <HAL_DAC_SetValue>
	MX_TIM4_Init();
 8006f22:	f001 fe87 	bl	8008c34 <MX_TIM4_Init>
	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) Error_Handler();
 8006f26:	481e      	ldr	r0, [pc, #120]	; (8006fa0 <Conductivity_Measure_Average+0xc0>)
 8006f28:	f7fd ff1e 	bl	8004d68 <HAL_TIM_Base_Start_IT>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <Conductivity_Measure_Average+0x56>
 8006f32:	f000 ff05 	bl	8007d40 <Error_Handler>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8006f36:	2100      	movs	r1, #0
 8006f38:	4818      	ldr	r0, [pc, #96]	; (8006f9c <Conductivity_Measure_Average+0xbc>)
 8006f3a:	f7fb f831 	bl	8001fa0 <HAL_DAC_Start>

	// wait for 10 sample number of sample - 1, with count 0 */
	// Sampling High and Low, Sample size needs plus one and double

	while(sample_num < (SAMPLE_SIZE +1) *2 ){
 8006f3e:	bf00      	nop
 8006f40:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <Conductivity_Measure_Average+0x9c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b15      	cmp	r3, #21
 8006f46:	ddfb      	ble.n	8006f40 <Conductivity_Measure_Average+0x60>
	};

	//Turn DAC and ADCs off
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4813      	ldr	r0, [pc, #76]	; (8006f9c <Conductivity_Measure_Average+0xbc>)
 8006f50:	f7fb f801 	bl	8001f56 <HAL_DAC_SetValue>
	HAL_ADC_Stop(&hadc1);
 8006f54:	4813      	ldr	r0, [pc, #76]	; (8006fa4 <Conductivity_Measure_Average+0xc4>)
 8006f56:	f7fa f945 	bl	80011e4 <HAL_ADC_Stop>
	HAL_ADC_Stop(&hadc2);
 8006f5a:	4813      	ldr	r0, [pc, #76]	; (8006fa8 <Conductivity_Measure_Average+0xc8>)
 8006f5c:	f7fa f942 	bl	80011e4 <HAL_ADC_Stop>
//	HAL_TIM_Base_DeInit(&htim4);

	// If out of loop done sampling, calculates the average Conductivity Sample*/
	conductivity_avg = conductivity/(SAMPLE_SIZE);
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <Conductivity_Measure_Average+0xa0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a11      	ldr	r2, [pc, #68]	; (8006fac <Conductivity_Measure_Average+0xcc>)
 8006f66:	fb82 1203 	smull	r1, r2, r2, r3
 8006f6a:	1092      	asrs	r2, r2, #2
 8006f6c:	17db      	asrs	r3, r3, #31
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	4a0f      	ldr	r2, [pc, #60]	; (8006fb0 <Conductivity_Measure_Average+0xd0>)
 8006f72:	6013      	str	r3, [r2, #0]

	return conductivity_avg;
 8006f74:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <Conductivity_Measure_Average+0xd0>)
 8006f76:	681b      	ldr	r3, [r3, #0]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20000adc 	.word	0x20000adc
 8006f80:	20000a94 	.word	0x20000a94
 8006f84:	20000b2c 	.word	0x20000b2c
 8006f88:	20000a90 	.word	0x20000a90
 8006f8c:	20000b30 	.word	0x20000b30
 8006f90:	20000b28 	.word	0x20000b28
 8006f94:	20000b24 	.word	0x20000b24
 8006f98:	20000ad8 	.word	0x20000ad8
 8006f9c:	200009d4 	.word	0x200009d4
 8006fa0:	20000a98 	.word	0x20000a98
 8006fa4:	20000a3c 	.word	0x20000a3c
 8006fa8:	200009e8 	.word	0x200009e8
 8006fac:	66666667 	.word	0x66666667
 8006fb0:	20000ae0 	.word	0x20000ae0

08006fb4 <Conductivity_Measure_Single>:
/**
 * Call to Measure Conductivity Once
 * Use inside interrupts, conductivity values are added together
 */
void Conductivity_Measure_Single(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
	//Toggle PWM Square wave
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8006fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fc2:	f7fb fc1b 	bl	80027fc <HAL_GPIO_TogglePin>

	// ADC sample on High side //
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)){
 8006fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fce:	f7fb fbe5 	bl	800279c <HAL_GPIO_ReadPin>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d133      	bne.n	8007040 <Conductivity_Measure_Single+0x8c>
		// Short wait for equilibrium
		// HAL_Delay(1);

		// Measure 5 times
		int i;
		uint32_t voltage = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
		uint32_t current = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
	    for(i = 0; i < 5; i++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	e010      	b.n	8007008 <Conductivity_Measure_Single+0x54>
	    {
			voltage = voltage + ADC_Measure(&hadc1);
 8006fe6:	4849      	ldr	r0, [pc, #292]	; (800710c <Conductivity_Measure_Single+0x158>)
 8006fe8:	f7ff fe76 	bl	8006cd8 <ADC_Measure>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
			current = current + ADC_Measure(&hadc2);
 8006ff4:	4846      	ldr	r0, [pc, #280]	; (8007110 <Conductivity_Measure_Single+0x15c>)
 8006ff6:	f7ff fe6f 	bl	8006cd8 <ADC_Measure>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
	    for(i = 0; i < 5; i++)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	3301      	adds	r3, #1
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2b04      	cmp	r3, #4
 800700c:	ddeb      	ble.n	8006fe6 <Conductivity_Measure_Single+0x32>
	    }

	    // Average values then scale by 10
	    voltage_high = voltage*10/5;
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	461a      	mov	r2, r3
 800701a:	4b3e      	ldr	r3, [pc, #248]	; (8007114 <Conductivity_Measure_Single+0x160>)
 800701c:	fba3 2302 	umull	r2, r3, r3, r2
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	4a3d      	ldr	r2, [pc, #244]	; (8007118 <Conductivity_Measure_Single+0x164>)
 8007024:	6013      	str	r3, [r2, #0]
	    current_high = current*10/5;
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	461a      	mov	r2, r3
 8007032:	4b38      	ldr	r3, [pc, #224]	; (8007114 <Conductivity_Measure_Single+0x160>)
 8007034:	fba3 2302 	umull	r2, r3, r3, r2
 8007038:	089b      	lsrs	r3, r3, #2
 800703a:	4a38      	ldr	r2, [pc, #224]	; (800711c <Conductivity_Measure_Single+0x168>)
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	e05b      	b.n	80070f8 <Conductivity_Measure_Single+0x144>
	}
	// ADC sample on Low side //
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)){
 8007040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007048:	f7fb fba8 	bl	800279c <HAL_GPIO_ReadPin>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d052      	beq.n	80070f8 <Conductivity_Measure_Single+0x144>
		// Short wait for equilibrium
		// HAL_Delay(1);

		// Measure 5 times
		int i = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	60bb      	str	r3, [r7, #8]
		uint32_t voltage = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	607b      	str	r3, [r7, #4]
		uint32_t current = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	603b      	str	r3, [r7, #0]
	    for(i = 0; i < 5; i++)
 800705e:	2300      	movs	r3, #0
 8007060:	60bb      	str	r3, [r7, #8]
 8007062:	e010      	b.n	8007086 <Conductivity_Measure_Single+0xd2>
	    {
			voltage = voltage + ADC_Measure(&hadc1);
 8007064:	4829      	ldr	r0, [pc, #164]	; (800710c <Conductivity_Measure_Single+0x158>)
 8007066:	f7ff fe37 	bl	8006cd8 <ADC_Measure>
 800706a:	4602      	mov	r2, r0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	607b      	str	r3, [r7, #4]
			current = current + ADC_Measure(&hadc2);
 8007072:	4827      	ldr	r0, [pc, #156]	; (8007110 <Conductivity_Measure_Single+0x15c>)
 8007074:	f7ff fe30 	bl	8006cd8 <ADC_Measure>
 8007078:	4602      	mov	r2, r0
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	4413      	add	r3, r2
 800707e:	603b      	str	r3, [r7, #0]
	    for(i = 0; i < 5; i++)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	3301      	adds	r3, #1
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b04      	cmp	r3, #4
 800708a:	ddeb      	ble.n	8007064 <Conductivity_Measure_Single+0xb0>
	    }

	    // Average values then scale by 10
		voltage_low = voltage*10/5;
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	461a      	mov	r2, r3
 8007098:	4b1e      	ldr	r3, [pc, #120]	; (8007114 <Conductivity_Measure_Single+0x160>)
 800709a:	fba3 2302 	umull	r2, r3, r3, r2
 800709e:	089b      	lsrs	r3, r3, #2
 80070a0:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <Conductivity_Measure_Single+0x16c>)
 80070a2:	6013      	str	r3, [r2, #0]
		current_low = current*10/5;
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	461a      	mov	r2, r3
 80070b0:	4b18      	ldr	r3, [pc, #96]	; (8007114 <Conductivity_Measure_Single+0x160>)
 80070b2:	fba3 2302 	umull	r2, r3, r3, r2
 80070b6:	089b      	lsrs	r3, r3, #2
 80070b8:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <Conductivity_Measure_Single+0x170>)
 80070ba:	6013      	str	r3, [r2, #0]

		// Conductivity calculation
		voltage_cal = voltage_high - voltage_low;
 80070bc:	4b16      	ldr	r3, [pc, #88]	; (8007118 <Conductivity_Measure_Single+0x164>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	4b17      	ldr	r3, [pc, #92]	; (8007120 <Conductivity_Measure_Single+0x16c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	4b17      	ldr	r3, [pc, #92]	; (8007128 <Conductivity_Measure_Single+0x174>)
 80070ca:	601a      	str	r2, [r3, #0]
		current_cal = current_high - current_low;
 80070cc:	4b13      	ldr	r3, [pc, #76]	; (800711c <Conductivity_Measure_Single+0x168>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	4b14      	ldr	r3, [pc, #80]	; (8007124 <Conductivity_Measure_Single+0x170>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	4b14      	ldr	r3, [pc, #80]	; (800712c <Conductivity_Measure_Single+0x178>)
 80070da:	601a      	str	r2, [r3, #0]
		conductivity = conductivity + current_cal*100000/ voltage_cal;
 80070dc:	4b13      	ldr	r3, [pc, #76]	; (800712c <Conductivity_Measure_Single+0x178>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a13      	ldr	r2, [pc, #76]	; (8007130 <Conductivity_Measure_Single+0x17c>)
 80070e2:	fb02 f203 	mul.w	r2, r2, r3
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <Conductivity_Measure_Single+0x174>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	fb92 f2f3 	sdiv	r2, r2, r3
 80070ee:	4b11      	ldr	r3, [pc, #68]	; (8007134 <Conductivity_Measure_Single+0x180>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4413      	add	r3, r2
 80070f4:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <Conductivity_Measure_Single+0x180>)
 80070f6:	6013      	str	r3, [r2, #0]
	}
	// Keep track of number of sample
	sample_num ++ ;
 80070f8:	4b0f      	ldr	r3, [pc, #60]	; (8007138 <Conductivity_Measure_Single+0x184>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	4a0e      	ldr	r2, [pc, #56]	; (8007138 <Conductivity_Measure_Single+0x184>)
 8007100:	6013      	str	r3, [r2, #0]
}
 8007102:	bf00      	nop
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20000a3c 	.word	0x20000a3c
 8007110:	200009e8 	.word	0x200009e8
 8007114:	cccccccd 	.word	0xcccccccd
 8007118:	20000b2c 	.word	0x20000b2c
 800711c:	20000a90 	.word	0x20000a90
 8007120:	20000b30 	.word	0x20000b30
 8007124:	20000b28 	.word	0x20000b28
 8007128:	20000b24 	.word	0x20000b24
 800712c:	20000ad8 	.word	0x20000ad8
 8007130:	000186a0 	.word	0x000186a0
 8007134:	20000a94 	.word	0x20000a94
 8007138:	20000adc 	.word	0x20000adc

0800713c <Flash_Get_Nth_Page>:
#include "UART.h"
FLASH_EraseInitTypeDef EraseInitStruct;
uint32_t PAGEError = 0;
__IO uint32_t  MemoryProgramStatus = 0;

uint16_t Flash_Get_Nth_Page(uint8_t page) {
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	71fb      	strb	r3, [r7, #7]
	return *(__IO uint16_t *)(Flash_Get_Page_Addr(page));
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	4618      	mov	r0, r3
 800714a:	f000 f807 	bl	800715c <Flash_Get_Page_Addr>
 800714e:	4603      	mov	r3, r0
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <Flash_Get_Page_Addr>:

uint32_t Flash_Get_Page_Addr(uint8_t page) {
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	71fb      	strb	r3, [r7, #7]
	return FLASH_USER_START_ADDR+FLASH_PAGE_SIZE*page;
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	02db      	lsls	r3, r3, #11
 800716a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800716e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
	...

08007180 <Flash_Erase>:

int8_t Flash_Erase(uint32_t start_addr, uint32_t end_addr, uint32_t n) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <Flash_Erase+0x3c>)
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = start_addr;
 8007192:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <Flash_Erase+0x3c>)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbPages     = n; //(end_addr - start_addr) / FLASH_PAGE_SIZE;
 8007198:	4a08      	ldr	r2, [pc, #32]	; (80071bc <Flash_Erase+0x3c>)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6093      	str	r3, [r2, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800719e:	4908      	ldr	r1, [pc, #32]	; (80071c0 <Flash_Erase+0x40>)
 80071a0:	4806      	ldr	r0, [pc, #24]	; (80071bc <Flash_Erase+0x3c>)
 80071a2:	f7fb f8c9 	bl	8002338 <HAL_FLASHEx_Erase>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <Flash_Erase+0x32>
	{
		return -1;
 80071ac:	f04f 33ff 	mov.w	r3, #4294967295
 80071b0:	e000      	b.n	80071b4 <Flash_Erase+0x34>
	}
	return 1;
 80071b2:	2301      	movs	r3, #1
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000b74 	.word	0x20000b74
 80071c0:	2000008c 	.word	0x2000008c

080071c4 <Flash_Save_Bulk_Data>:

void Flash_Save_Bulk_Data(struct SensorData *bulk_data, uint8_t len, uint8_t page, uint16_t global_nth_page) {
 80071c4:	b5b0      	push	{r4, r5, r7, lr}
 80071c6:	b0a4      	sub	sp, #144	; 0x90
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	70fb      	strb	r3, [r7, #3]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70bb      	strb	r3, [r7, #2]
 80071da:	4613      	mov	r3, r2
 80071dc:	803b      	strh	r3, [r7, #0]
	// Handle new pages elegantly please!
	HAL_FLASH_Unlock();
 80071de:	f7fa ffe7 	bl	80021b0 <HAL_FLASH_Unlock>
	uint32_t start_addr = FLASH_USER_START_ADDR + FLASH_PAGE_SIZE*page;
 80071e2:	78bb      	ldrb	r3, [r7, #2]
 80071e4:	02db      	lsls	r3, r3, #11
 80071e6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80071ea:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80071ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	// Erase the Page
	Flash_Erase(start_addr, start_addr + FLASH_PAGE_SIZE, 1);
 80071f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fa:	2201      	movs	r2, #1
 80071fc:	4619      	mov	r1, r3
 80071fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8007202:	f7ff ffbd 	bl	8007180 <Flash_Erase>
	uint32_t addr = start_addr;
 8007206:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800720a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char m[100];
	sprintf(m, "save nth=%u to addr=%x\r\n", global_nth_page, addr);
 800720e:	883a      	ldrh	r2, [r7, #0]
 8007210:	f107 0020 	add.w	r0, r7, #32
 8007214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007218:	4953      	ldr	r1, [pc, #332]	; (8007368 <Flash_Save_Bulk_Data+0x1a4>)
 800721a:	f001 fdb5 	bl	8008d88 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 800721e:	f107 0320 	add.w	r3, r7, #32
 8007222:	4618      	mov	r0, r3
 8007224:	f7f8 ffdc 	bl	80001e0 <strlen>
 8007228:	4603      	mov	r3, r0
 800722a:	b29a      	uxth	r2, r3
 800722c:	f107 0120 	add.w	r1, r7, #32
 8007230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007234:	484d      	ldr	r0, [pc, #308]	; (800736c <Flash_Save_Bulk_Data+0x1a8>)
 8007236:	f7fe fcb8 	bl	8005baa <HAL_UART_Transmit>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, global_nth_page);
 800723a:	883b      	ldrh	r3, [r7, #0]
 800723c:	f04f 0400 	mov.w	r4, #0
 8007240:	461a      	mov	r2, r3
 8007242:	4623      	mov	r3, r4
 8007244:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007248:	2001      	movs	r0, #1
 800724a:	f7fa ff41 	bl	80020d0 <HAL_FLASH_Program>
	addr += 2;
 800724e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007252:	3302      	adds	r3, #2
 8007254:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (uint8_t i = 0; i < len; i++) {
 8007258:	2300      	movs	r3, #0
 800725a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800725e:	e077      	b.n	8007350 <Flash_Save_Bulk_Data+0x18c>
		struct SensorData s = bulk_data[i];
 8007260:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4413      	add	r3, r2
 8007272:	f107 040c 	add.w	r4, r7, #12
 8007276:	461d      	mov	r5, r3
 8007278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800727a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	6023      	str	r3, [r4, #0]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
							  s.Timestamp) == HAL_OK)
 8007280:	693b      	ldr	r3, [r7, #16]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
 8007282:	f04f 0400 	mov.w	r4, #0
 8007286:	461a      	mov	r2, r3
 8007288:	4623      	mov	r3, r4
 800728a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800728e:	2002      	movs	r0, #2
 8007290:	f7fa ff1e 	bl	80020d0 <HAL_FLASH_Program>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <Flash_Save_Bulk_Data+0xe0>
		{
			addr = addr + 4;
 800729a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800729e:	3304      	adds	r3, #4
 80072a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
							  s.Idx) == HAL_OK)
 80072a4:	68fb      	ldr	r3, [r7, #12]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
 80072a6:	f04f 0400 	mov.w	r4, #0
 80072aa:	461a      	mov	r2, r3
 80072ac:	4623      	mov	r3, r4
 80072ae:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80072b2:	2002      	movs	r0, #2
 80072b4:	f7fa ff0c 	bl	80020d0 <HAL_FLASH_Program>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d104      	bne.n	80072c8 <Flash_Save_Bulk_Data+0x104>
		{
			addr = addr + 4;
 80072be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072c2:	3304      	adds	r3, #4
 80072c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
							  (s.Pressure)) == HAL_OK)
 80072c8:	697b      	ldr	r3, [r7, #20]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7f8 ffe0 	bl	8000290 <__aeabi_f2ulz>
 80072d0:	4603      	mov	r3, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	461a      	mov	r2, r3
 80072d6:	4623      	mov	r3, r4
 80072d8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80072dc:	2002      	movs	r0, #2
 80072de:	f7fa fef7 	bl	80020d0 <HAL_FLASH_Program>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <Flash_Save_Bulk_Data+0x12e>
		{
			addr = addr + 4;
 80072e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072ec:	3304      	adds	r3, #4
 80072ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
							  (s.Temperature)) == HAL_OK)
 80072f2:	69bb      	ldr	r3, [r7, #24]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7f8 ffcb 	bl	8000290 <__aeabi_f2ulz>
 80072fa:	4603      	mov	r3, r0
 80072fc:	460c      	mov	r4, r1
 80072fe:	461a      	mov	r2, r3
 8007300:	4623      	mov	r3, r4
 8007302:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007306:	2002      	movs	r0, #2
 8007308:	f7fa fee2 	bl	80020d0 <HAL_FLASH_Program>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <Flash_Save_Bulk_Data+0x158>
		{
			addr = addr + 4;
 8007312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007316:	3304      	adds	r3, #4
 8007318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
							  (s.Conductivity)) == HAL_OK)
 800731c:	69fb      	ldr	r3, [r7, #28]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr,
 800731e:	4618      	mov	r0, r3
 8007320:	f7f8 ffb6 	bl	8000290 <__aeabi_f2ulz>
 8007324:	4603      	mov	r3, r0
 8007326:	460c      	mov	r4, r1
 8007328:	461a      	mov	r2, r3
 800732a:	4623      	mov	r3, r4
 800732c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007330:	2002      	movs	r0, #2
 8007332:	f7fa fecd 	bl	80020d0 <HAL_FLASH_Program>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <Flash_Save_Bulk_Data+0x182>
		{
			addr = addr + 4;
 800733c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007340:	3304      	adds	r3, #4
 8007342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (uint8_t i = 0; i < len; i++) {
 8007346:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800734a:	3301      	adds	r3, #1
 800734c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8007350:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	429a      	cmp	r2, r3
 8007358:	d382      	bcc.n	8007260 <Flash_Save_Bulk_Data+0x9c>
//		char mm[100];
//		int n = sprintf(mm, "%u \r\n", i);
//		HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
//		addr = Flash_Write_Sensor_Data(addr, addr+SENSOR_DATA_SIZE, &s_data);
	}
	HAL_FLASH_Lock();
 800735a:	f7fa ff4f 	bl	80021fc <HAL_FLASH_Lock>
//	char *byte_addr = (char *)bulk_data;
//	for (uint16_t j = 0; j < len*sizeof(struct SensorData); j++) {
//		*byte_addr = 0;
//		byte_addr += 1;
//	}
}
 800735e:	bf00      	nop
 8007360:	3790      	adds	r7, #144	; 0x90
 8007362:	46bd      	mov	sp, r7
 8007364:	bdb0      	pop	{r4, r5, r7, pc}
 8007366:	bf00      	nop
 8007368:	08009764 	.word	0x08009764
 800736c:	20000964 	.word	0x20000964

08007370 <Flash_Read_Page_Sensor_Data>:

// TODO: Test this function
void Flash_Read_Page_Sensor_Data(uint8_t page, struct SensorData s_data[], uint32_t len) {
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	73fb      	strb	r3, [r7, #15]
	uint32_t addr = Flash_Get_Page_Addr(page);
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff feeb 	bl	800715c <Flash_Get_Page_Addr>
 8007386:	61b8      	str	r0, [r7, #24]
	uint16_t cur_nth_page = Flash_Get_Nth_Page(addr);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fed5 	bl	800713c <Flash_Get_Nth_Page>
 8007392:	4603      	mov	r3, r0
 8007394:	82fb      	strh	r3, [r7, #22]
	if (cur_nth_page == 0xFFFF) return;
 8007396:	8afb      	ldrh	r3, [r7, #22]
 8007398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800739c:	4293      	cmp	r3, r2
 800739e:	d019      	beq.n	80073d4 <Flash_Read_Page_Sensor_Data+0x64>

	addr += 2;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	3302      	adds	r3, #2
 80073a4:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++) {
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	e00e      	b.n	80073ca <Flash_Read_Page_Sensor_Data+0x5a>
		Flash_Read_Sensor_Data(addr, &(s_data[i]));
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	461a      	mov	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4413      	add	r3, r2
 80073bc:	4619      	mov	r1, r3
 80073be:	69b8      	ldr	r0, [r7, #24]
 80073c0:	f000 f80c 	bl	80073dc <Flash_Read_Sensor_Data>
	for (uint32_t i = 0; i < len; i++) {
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	3301      	adds	r3, #1
 80073c8:	61fb      	str	r3, [r7, #28]
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d3ec      	bcc.n	80073ac <Flash_Read_Page_Sensor_Data+0x3c>
 80073d2:	e000      	b.n	80073d6 <Flash_Read_Page_Sensor_Data+0x66>
	if (cur_nth_page == 0xFFFF) return;
 80073d4:	bf00      	nop
	}
}
 80073d6:	3720      	adds	r7, #32
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <Flash_Read_Sensor_Data>:

uint32_t Flash_Read_Sensor_Data(uint32_t start_addr, struct SensorData *s_data) {
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
	uint32_t cur_addr = start_addr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 80073ea:	2300      	movs	r3, #0
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	e038      	b.n	8007462 <Flash_Read_Sensor_Data+0x86>
		switch (i) {
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d82f      	bhi.n	8007456 <Flash_Read_Sensor_Data+0x7a>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <Flash_Read_Sensor_Data+0x20>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007411 	.word	0x08007411
 8007400:	08007419 	.word	0x08007419
 8007404:	08007421 	.word	0x08007421
 8007408:	08007433 	.word	0x08007433
 800740c:	08007445 	.word	0x08007445
			// Read timestamp and idx
		case 0: s_data->Timestamp = *(__IO uint32_t *)cur_addr;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	605a      	str	r2, [r3, #4]
		case 1:	s_data->Idx =  *(__IO uint32_t *)cur_addr;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	601a      	str	r2, [r3, #0]
		case 2: s_data->Pressure =  *(__IO uint32_t *)cur_addr;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	ee07 3a90 	vmov	s15, r3
 8007428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	edc3 7a02 	vstr	s15, [r3, #8]
		case 3: s_data->Temperature =  *(__IO uint32_t *)cur_addr;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	edc3 7a03 	vstr	s15, [r3, #12]
		case 4: s_data->Conductivity =  *(__IO uint32_t *)cur_addr;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	ee07 3a90 	vmov	s15, r3
 800744c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	edc3 7a04 	vstr	s15, [r3, #16]
		}
		cur_addr = cur_addr + 4;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3304      	adds	r3, #4
 800745a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	3301      	adds	r3, #1
 8007460:	60bb      	str	r3, [r7, #8]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b04      	cmp	r3, #4
 8007466:	ddc3      	ble.n	80073f0 <Flash_Read_Sensor_Data+0x14>
	}
	return cur_addr;
 8007468:	68fb      	ldr	r3, [r7, #12]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop

08007478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b09c      	sub	sp, #112	; 0x70
 800747c:	af00      	add	r7, sp, #0
	Peripheral_Init();
 800747e:	f000 f861 	bl	8007544 <Peripheral_Init>
	HAL_GPIO_WritePin(GPIOB, RPI_Pwr_Enable_Pin, GPIO_PIN_SET);
 8007482:	2201      	movs	r2, #1
 8007484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007488:	4828      	ldr	r0, [pc, #160]	; (800752c <main+0xb4>)
 800748a:	f7fb f99f 	bl	80027cc <HAL_GPIO_WritePin>
//	RPI_Off();
	char *m ="Check Sys\r\n";
 800748e:	4b28      	ldr	r3, [pc, #160]	; (8007530 <main+0xb8>)
 8007490:	66fb      	str	r3, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007492:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007494:	f7f8 fea4 	bl	80001e0 <strlen>
 8007498:	4603      	mov	r3, r0
 800749a:	b29a      	uxth	r2, r3
 800749c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80074a2:	4824      	ldr	r0, [pc, #144]	; (8007534 <main+0xbc>)
 80074a4:	f7fe fb81 	bl	8005baa <HAL_UART_Transmit>

	/* System Check Start-------------------------------------------------------- */
	int8_t sys_success = Check_System();
 80074a8:	f000 fb66 	bl	8007b78 <Check_System>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	char mm[100];
	sprintf(mm, "success = %u\r\n", sys_success);
 80074b2:	f997 206b 	ldrsb.w	r2, [r7, #107]	; 0x6b
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	491f      	ldr	r1, [pc, #124]	; (8007538 <main+0xc0>)
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 fc64 	bl	8008d88 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 80074c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80074c2:	f7f8 fe8d 	bl	80001e0 <strlen>
 80074c6:	4603      	mov	r3, r0
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074ce:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80074d0:	4818      	ldr	r0, [pc, #96]	; (8007534 <main+0xbc>)
 80074d2:	f7fe fb6a 	bl	8005baa <HAL_UART_Transmit>

	if (sys_success) {
 80074d6:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d019      	beq.n	8007512 <main+0x9a>
		HAL_GPIO_WritePin(SYS_STATUS_GPIO_Port, SYS_STATUS_Pin, SET);
 80074de:	2201      	movs	r2, #1
 80074e0:	2108      	movs	r1, #8
 80074e2:	4812      	ldr	r0, [pc, #72]	; (800752c <main+0xb4>)
 80074e4:	f7fb f972 	bl	80027cc <HAL_GPIO_WritePin>
		m ="Sys Check Sucecssful\r\n";
 80074e8:	4b14      	ldr	r3, [pc, #80]	; (800753c <main+0xc4>)
 80074ea:	66fb      	str	r3, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 80074ec:	1d3b      	adds	r3, r7, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7f8 fe76 	bl	80001e0 <strlen>
 80074f4:	4603      	mov	r3, r0
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	1d39      	adds	r1, r7, #4
 80074fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074fe:	480d      	ldr	r0, [pc, #52]	; (8007534 <main+0xbc>)
 8007500:	f7fe fb53 	bl	8005baa <HAL_UART_Transmit>
////	}
////	while (!Conductivity_cConductivity_Measure_Singleheck()) {}
//	RPI_Off();

	/* Measurement Start-------------------------------------------------------- */
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) Error_Handler();
 8007504:	480e      	ldr	r0, [pc, #56]	; (8007540 <main+0xc8>)
 8007506:	f7fd fc2f 	bl	8004d68 <HAL_TIM_Base_Start_IT>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <main+0xb0>
 8007510:	e008      	b.n	8007524 <main+0xac>
			HAL_GPIO_TogglePin(SYS_STATUS_GPIO_Port, SYS_STATUS_Pin);
 8007512:	2108      	movs	r1, #8
 8007514:	4805      	ldr	r0, [pc, #20]	; (800752c <main+0xb4>)
 8007516:	f7fb f971 	bl	80027fc <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 800751a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800751e:	f7f9 fb2f 	bl	8000b80 <HAL_Delay>
			HAL_GPIO_TogglePin(SYS_STATUS_GPIO_Port, SYS_STATUS_Pin);
 8007522:	e7f6      	b.n	8007512 <main+0x9a>
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) Error_Handler();
 8007524:	f000 fc0c 	bl	8007d40 <Error_Handler>
	while (1)
 8007528:	e7fe      	b.n	8007528 <main+0xb0>
 800752a:	bf00      	nop
 800752c:	48000400 	.word	0x48000400
 8007530:	08009780 	.word	0x08009780
 8007534:	20000964 	.word	0x20000964
 8007538:	0800978c 	.word	0x0800978c
 800753c:	0800979c 	.word	0x0800979c
 8007540:	20000b34 	.word	0x20000b34

08007544 <Peripheral_Init>:
	{
	}
}

void Peripheral_Init(void) {
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
	/* MCU Configuration----------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007548:	f7f9 fab4 	bl	8000ab4 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 800754c:	f000 f8ca 	bl	80076e4 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007550:	f7fe feec 	bl	800632c <MX_GPIO_Init>
	MX_ADC1_Init();
 8007554:	f7ff fbd0 	bl	8006cf8 <MX_ADC1_Init>
	MX_ADC2_Init();
 8007558:	f7ff fc3c 	bl	8006dd4 <MX_ADC2_Init>
	MX_DAC1_Init();
 800755c:	f7ff fc96 	bl	8006e8c <MX_DAC1_Init>
	MX_I2C1_Init();
 8007560:	f7fe ff62 	bl	8006428 <MX_I2C1_Init>
	MX_I2C2_Init();
 8007564:	f7fe ffa0 	bl	80064a8 <MX_I2C2_Init>
	MX_TIM2_Init();
 8007568:	f001 fa90 	bl	8008a8c <MX_TIM2_Init>
	MX_TIM3_Init();
 800756c:	f001 fadc 	bl	8008b28 <MX_TIM3_Init>
	MX_TIM4_Init();
 8007570:	f001 fb60 	bl	8008c34 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8007574:	f7ff fb80 	bl	8006c78 <MX_USART2_UART_Init>
//	HAL_InitTick(12);
}
 8007578:	bf00      	nop
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800757c:	b5b0      	push	{r4, r5, r7, lr}
 800757e:	b0a2      	sub	sp, #136	; 0x88
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
// Conductivity Measurement Interrupt
	if(TIM4 == htim->Instance) {
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a49      	ldr	r2, [pc, #292]	; (80076b0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d111      	bne.n	80075b2 <HAL_TIM_PeriodElapsedCallback+0x36>
		// Sampling High and Low, Sample size needs plus one and double
		// If done sampling, stop tim4 interrupts and DAC
		if (sample_num < (SAMPLE_SIZE +1) *2){
 800758e:	4b49      	ldr	r3, [pc, #292]	; (80076b4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b15      	cmp	r3, #21
 8007594:	dc02      	bgt.n	800759c <HAL_TIM_PeriodElapsedCallback+0x20>
				Conductivity_Measure_Single();
 8007596:	f7ff fd0d 	bl	8006fb4 <Conductivity_Measure_Single>
		/* Request to enter SLEEP mode */
//		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	} else if(TIM3 == htim->Instance) {
//		Temperature_Measure(htim);
	}
}
 800759a:	e085      	b.n	80076a8 <HAL_TIM_PeriodElapsedCallback+0x12c>
			HAL_TIM_Base_Stop(&htim4);
 800759c:	4846      	ldr	r0, [pc, #280]	; (80076b8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800759e:	f7fd fbb8 	bl	8004d12 <HAL_TIM_Base_Stop>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80075a2:	2200      	movs	r2, #0
 80075a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075ac:	f7fb f90e 	bl	80027cc <HAL_GPIO_WritePin>
}
 80075b0:	e07a      	b.n	80076a8 <HAL_TIM_PeriodElapsedCallback+0x12c>
	} else if (TIM2 == htim->Instance) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ba:	d175      	bne.n	80076a8 <HAL_TIM_PeriodElapsedCallback+0x12c>
		ts++;
 80075bc:	4b3f      	ldr	r3, [pc, #252]	; (80076bc <HAL_TIM_PeriodElapsedCallback+0x140>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	4a3e      	ldr	r2, [pc, #248]	; (80076bc <HAL_TIM_PeriodElapsedCallback+0x140>)
 80075c4:	6013      	str	r3, [r2, #0]
		global_idx++;
 80075c6:	4b3e      	ldr	r3, [pc, #248]	; (80076c0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3301      	adds	r3, #1
 80075cc:	4a3c      	ldr	r2, [pc, #240]	; (80076c0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80075ce:	6013      	str	r3, [r2, #0]
		char *m = "+";
 80075d0:	4b3c      	ldr	r3, [pc, #240]	; (80076c4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80075d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 80075d6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80075da:	f7f8 fe01 	bl	80001e0 <strlen>
 80075de:	4603      	mov	r3, r0
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075e6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80075ea:	4837      	ldr	r0, [pc, #220]	; (80076c8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80075ec:	f7fe fadd 	bl	8005baa <HAL_UART_Transmit>
		Measure_Data(&s_data);
 80075f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 faf1 	bl	8007bdc <Measure_Data>
		s_data_array[s_data_array_len] = s_data;
 80075fa:	4b34      	ldr	r3, [pc, #208]	; (80076cc <HAL_TIM_PeriodElapsedCallback+0x150>)
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	4a33      	ldr	r2, [pc, #204]	; (80076d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8007602:	460b      	mov	r3, r1
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	440b      	add	r3, r1
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	461d      	mov	r5, r3
 800760e:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8007612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	602b      	str	r3, [r5, #0]
		s_data_array_len++;
 800761a:	4b2c      	ldr	r3, [pc, #176]	; (80076cc <HAL_TIM_PeriodElapsedCallback+0x150>)
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	4b2a      	ldr	r3, [pc, #168]	; (80076cc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8007624:	801a      	strh	r2, [r3, #0]
		if (s_data_array_len == MAX_SENSOR_DATA_ARR_LEN) {
 8007626:	4b29      	ldr	r3, [pc, #164]	; (80076cc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	2b66      	cmp	r3, #102	; 0x66
 800762c:	d13c      	bne.n	80076a8 <HAL_TIM_PeriodElapsedCallback+0x12c>
			int8_t log_successful = -1;
 800762e:	23ff      	movs	r3, #255	; 0xff
 8007630:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			Flash_Save_Bulk_Data(&s_data_array, s_data_array_len, cur_page, nth_page);
 8007634:	4b25      	ldr	r3, [pc, #148]	; (80076cc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b2d9      	uxtb	r1, r3
 800763a:	4b26      	ldr	r3, [pc, #152]	; (80076d4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	4b26      	ldr	r3, [pc, #152]	; (80076d8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	4823      	ldr	r0, [pc, #140]	; (80076d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8007644:	f7ff fdbe 	bl	80071c4 <Flash_Save_Bulk_Data>
			cur_page = (cur_page + 1) % FLASH_TOTAL_DATA_PAGES;
 8007648:	4b22      	ldr	r3, [pc, #136]	; (80076d4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	4a23      	ldr	r2, [pc, #140]	; (80076dc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8007650:	fb82 1203 	smull	r1, r2, r2, r3
 8007654:	441a      	add	r2, r3
 8007656:	11d1      	asrs	r1, r2, #7
 8007658:	17da      	asrs	r2, r3, #31
 800765a:	1a8a      	subs	r2, r1, r2
 800765c:	21eb      	movs	r1, #235	; 0xeb
 800765e:	fb01 f202 	mul.w	r2, r1, r2
 8007662:	1a9a      	subs	r2, r3, r2
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8007668:	701a      	strb	r2, [r3, #0]
			nth_page ++;
 800766a:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8007674:	801a      	strh	r2, [r3, #0]
			s_data_array_len = 0;
 8007676:	4b15      	ldr	r3, [pc, #84]	; (80076cc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8007678:	2200      	movs	r2, #0
 800767a:	801a      	strh	r2, [r3, #0]
			sprintf(mm, "len=%u, moved to new page %u\r\n", MAX_SENSOR_DATA_ARR_LEN, cur_page);
 800767c:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	f107 0008 	add.w	r0, r7, #8
 8007684:	2266      	movs	r2, #102	; 0x66
 8007686:	4916      	ldr	r1, [pc, #88]	; (80076e0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8007688:	f001 fb7e 	bl	8008d88 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 800768c:	f107 0308 	add.w	r3, r7, #8
 8007690:	4618      	mov	r0, r3
 8007692:	f7f8 fda5 	bl	80001e0 <strlen>
 8007696:	4603      	mov	r3, r0
 8007698:	b29a      	uxth	r2, r3
 800769a:	f107 0108 	add.w	r1, r7, #8
 800769e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076a2:	4809      	ldr	r0, [pc, #36]	; (80076c8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80076a4:	f7fe fa81 	bl	8005baa <HAL_UART_Transmit>
}
 80076a8:	bf00      	nop
 80076aa:	3788      	adds	r7, #136	; 0x88
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bdb0      	pop	{r4, r5, r7, pc}
 80076b0:	40000800 	.word	0x40000800
 80076b4:	20000adc 	.word	0x20000adc
 80076b8:	20000a98 	.word	0x20000a98
 80076bc:	20000090 	.word	0x20000090
 80076c0:	20000b84 	.word	0x20000b84
 80076c4:	080097b4 	.word	0x080097b4
 80076c8:	20000964 	.word	0x20000964
 80076cc:	20000094 	.word	0x20000094
 80076d0:	20000168 	.word	0x20000168
 80076d4:	20000b8e 	.word	0x20000b8e
 80076d8:	20000b8c 	.word	0x20000b8c
 80076dc:	8b70344b 	.word	0x8b70344b
 80076e0:	080097b8 	.word	0x080097b8

080076e4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b0a6      	sub	sp, #152	; 0x98
 80076e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80076ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80076ee:	2228      	movs	r2, #40	; 0x28
 80076f0:	2100      	movs	r1, #0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 fb40 	bl	8008d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80076f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	605a      	str	r2, [r3, #4]
 8007702:	609a      	str	r2, [r3, #8]
 8007704:	60da      	str	r2, [r3, #12]
 8007706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007708:	1d3b      	adds	r3, r7, #4
 800770a:	2258      	movs	r2, #88	; 0x58
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f001 fb32 	bl	8008d78 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007714:	2302      	movs	r3, #2
 8007716:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007718:	2301      	movs	r3, #1
 800771a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800771c:	2310      	movs	r3, #16
 800771e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007722:	2302      	movs	r3, #2
 8007724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8007730:	2300      	movs	r3, #0
 8007732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8007736:	2300      	movs	r3, #0
 8007738:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800773c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007740:	4618      	mov	r0, r3
 8007742:	f7fb ff7b 	bl	800363c <HAL_RCC_OscConfig>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800774c:	f000 faf8 	bl	8007d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007750:	230f      	movs	r3, #15
 8007752:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007754:	2300      	movs	r3, #0
 8007756:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007758:	2300      	movs	r3, #0
 800775a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800775c:	2300      	movs	r3, #0
 800775e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007760:	2300      	movs	r3, #0
 8007762:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007764:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007768:	2100      	movs	r1, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f7fc fe54 	bl	8004418 <HAL_RCC_ClockConfig>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007776:	f000 fae3 	bl	8007d40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800777a:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <SystemClock_Config+0xc4>)
 800777c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8007782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8007788:	2300      	movs	r3, #0
 800778a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800778c:	1d3b      	adds	r3, r7, #4
 800778e:	4618      	mov	r0, r3
 8007790:	f7fd f878 	bl	8004884 <HAL_RCCEx_PeriphCLKConfig>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800779a:	f000 fad1 	bl	8007d40 <Error_Handler>
  }
}
 800779e:	bf00      	nop
 80077a0:	3798      	adds	r7, #152	; 0x98
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	00200082 	.word	0x00200082

080077ac <Check_Data>:


uint8_t Check_Data(void) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b09e      	sub	sp, #120	; 0x78
 80077b0:	af02      	add	r7, sp, #8
	uint8_t start_page = 0, end_page = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80077b8:	2300      	movs	r3, #0
 80077ba:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t new_flash = Find_Start_End_Page(&start_page, &end_page);
 80077be:	f107 0266 	add.w	r2, r7, #102	; 0x66
 80077c2:	f107 0367 	add.w	r3, r7, #103	; 0x67
 80077c6:	4611      	mov	r1, r2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 f885 	bl	80078d8 <Find_Start_End_Page>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	nth_page = Flash_Get_Nth_Page(end_page);
 80077d4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff fcaf 	bl	800713c <Flash_Get_Nth_Page>
 80077de:	4603      	mov	r3, r0
 80077e0:	461a      	mov	r2, r3
 80077e2:	4b36      	ldr	r3, [pc, #216]	; (80078bc <Check_Data+0x110>)
 80077e4:	801a      	strh	r2, [r3, #0]
	if (nth_page == 0xFFFF) nth_page = 0;
 80077e6:	4b35      	ldr	r3, [pc, #212]	; (80078bc <Check_Data+0x110>)
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d102      	bne.n	80077f8 <Check_Data+0x4c>
 80077f2:	4b32      	ldr	r3, [pc, #200]	; (80078bc <Check_Data+0x110>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	801a      	strh	r2, [r3, #0]
	char m[100];
	sprintf(m, "unlogged_start=%u, unlogged_end=%u, nth_page = %X\r\n",
 80077f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80077fc:	461a      	mov	r2, r3
 80077fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007802:	4619      	mov	r1, r3
 8007804:	4b2d      	ldr	r3, [pc, #180]	; (80078bc <Check_Data+0x110>)
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	4638      	mov	r0, r7
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	460b      	mov	r3, r1
 800780e:	492c      	ldr	r1, [pc, #176]	; (80078c0 <Check_Data+0x114>)
 8007810:	f001 faba 	bl	8008d88 <siprintf>
			start_page, end_page, nth_page);
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007814:	463b      	mov	r3, r7
 8007816:	4618      	mov	r0, r3
 8007818:	f7f8 fce2 	bl	80001e0 <strlen>
 800781c:	4603      	mov	r3, r0
 800781e:	b29a      	uxth	r2, r3
 8007820:	4639      	mov	r1, r7
 8007822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007826:	4827      	ldr	r0, [pc, #156]	; (80078c4 <Check_Data+0x118>)
 8007828:	f7fe f9bf 	bl	8005baa <HAL_UART_Transmit>
	/* RPI Check and flash configuration */
//	RPI_On();
	if (new_flash) {
 800782c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007830:	2b00      	cmp	r3, #0
 8007832:	d015      	beq.n	8007860 <Check_Data+0xb4>
	// The sensor is brand new
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007834:	463b      	mov	r3, r7
 8007836:	4618      	mov	r0, r3
 8007838:	f7f8 fcd2 	bl	80001e0 <strlen>
 800783c:	4603      	mov	r3, r0
 800783e:	b29a      	uxth	r2, r3
 8007840:	4639      	mov	r1, r7
 8007842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007846:	481f      	ldr	r0, [pc, #124]	; (80078c4 <Check_Data+0x118>)
 8007848:	f7fe f9af 	bl	8005baa <HAL_UART_Transmit>

		cur_page = 0;
 800784c:	4b1e      	ldr	r3, [pc, #120]	; (80078c8 <Check_Data+0x11c>)
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
		unlogged_start_page = 0;
 8007852:	4b1e      	ldr	r3, [pc, #120]	; (80078cc <Check_Data+0x120>)
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
		nth_page = 1;
 8007858:	4b18      	ldr	r3, [pc, #96]	; (80078bc <Check_Data+0x110>)
 800785a:	2201      	movs	r2, #1
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	e01a      	b.n	8007896 <Check_Data+0xea>
	} else {
	// Unlogged pages exist, save all the unsaved files to RPI
//		while ((cur_page + 1) %FLASH_TOTAL_DATA_PAGES == unlogged_start_page) {};
		unlogged_start_page = start_page;
 8007860:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007864:	4b19      	ldr	r3, [pc, #100]	; (80078cc <Check_Data+0x120>)
 8007866:	701a      	strb	r2, [r3, #0]
		cur_page = (end_page + 1) % FLASH_TOTAL_DATA_PAGES;
 8007868:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800786c:	3301      	adds	r3, #1
 800786e:	4a18      	ldr	r2, [pc, #96]	; (80078d0 <Check_Data+0x124>)
 8007870:	fb82 1203 	smull	r1, r2, r2, r3
 8007874:	441a      	add	r2, r3
 8007876:	11d1      	asrs	r1, r2, #7
 8007878:	17da      	asrs	r2, r3, #31
 800787a:	1a8a      	subs	r2, r1, r2
 800787c:	21eb      	movs	r1, #235	; 0xeb
 800787e:	fb01 f202 	mul.w	r2, r1, r2
 8007882:	1a9a      	subs	r2, r3, r2
 8007884:	b2d2      	uxtb	r2, r2
 8007886:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <Check_Data+0x11c>)
 8007888:	701a      	strb	r2, [r3, #0]
		nth_page += 1;
 800788a:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <Check_Data+0x110>)
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	3301      	adds	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	4b0a      	ldr	r3, [pc, #40]	; (80078bc <Check_Data+0x110>)
 8007894:	801a      	strh	r2, [r3, #0]
//		char m[100];
//		sprintf(m, "cur_page=%u end_page=%u, nth_page=%u\r\n", cur_page, end_page, nth_page);
//		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
	}
//	while (RPI_Status != RPI_OFF) {};
	char *mm = "RPI is off now for real!!!!\r\n";
 8007896:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <Check_Data+0x128>)
 8007898:	66bb      	str	r3, [r7, #104]	; 0x68
	HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(m), 1000);
 800789a:	463b      	mov	r3, r7
 800789c:	4618      	mov	r0, r3
 800789e:	f7f8 fc9f 	bl	80001e0 <strlen>
 80078a2:	4603      	mov	r3, r0
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078ac:	4805      	ldr	r0, [pc, #20]	; (80078c4 <Check_Data+0x118>)
 80078ae:	f7fe f97c 	bl	8005baa <HAL_UART_Transmit>
//	cur_page = 0;
//	unlogged_start_page = 0;
//	nth_page = 1;
	return 1;
 80078b2:	2301      	movs	r3, #1
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3770      	adds	r7, #112	; 0x70
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20000b8c 	.word	0x20000b8c
 80078c0:	080097d8 	.word	0x080097d8
 80078c4:	20000964 	.word	0x20000964
 80078c8:	20000b8e 	.word	0x20000b8e
 80078cc:	20000b80 	.word	0x20000b80
 80078d0:	8b70344b 	.word	0x8b70344b
 80078d4:	0800980c 	.word	0x0800980c

080078d8 <Find_Start_End_Page>:

uint8_t Find_Start_End_Page(uint8_t *start_page, uint8_t *end_page) {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b09e      	sub	sp, #120	; 0x78
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
	char m[100];
	nth_page = Flash_Get_Nth_Page(0);
 80078e2:	2000      	movs	r0, #0
 80078e4:	f7ff fc2a 	bl	800713c <Flash_Get_Nth_Page>
 80078e8:	4603      	mov	r3, r0
 80078ea:	461a      	mov	r2, r3
 80078ec:	4b9a      	ldr	r3, [pc, #616]	; (8007b58 <Find_Start_End_Page+0x280>)
 80078ee:	801a      	strh	r2, [r3, #0]
	uint8_t page_x=0, page_y=0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80078f6:	2300      	movs	r3, #0
 80078f8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	sprintf(m, "INIT: nth_page = %u\r\n", nth_page);
 80078fc:	4b96      	ldr	r3, [pc, #600]	; (8007b58 <Find_Start_End_Page+0x280>)
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	f107 030c 	add.w	r3, r7, #12
 8007906:	4995      	ldr	r1, [pc, #596]	; (8007b5c <Find_Start_End_Page+0x284>)
 8007908:	4618      	mov	r0, r3
 800790a:	f001 fa3d 	bl	8008d88 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	4618      	mov	r0, r3
 8007914:	f7f8 fc64 	bl	80001e0 <strlen>
 8007918:	4603      	mov	r3, r0
 800791a:	b29a      	uxth	r2, r3
 800791c:	f107 010c 	add.w	r1, r7, #12
 8007920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007924:	488e      	ldr	r0, [pc, #568]	; (8007b60 <Find_Start_End_Page+0x288>)
 8007926:	f7fe f940 	bl	8005baa <HAL_UART_Transmit>

	if (nth_page != 0xFFFF) {
 800792a:	4b8b      	ldr	r3, [pc, #556]	; (8007b58 <Find_Start_End_Page+0x280>)
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007932:	4293      	cmp	r3, r2
 8007934:	f000 80c3 	beq.w	8007abe <Find_Start_End_Page+0x1e6>
	// The first page has unlogged data. This could mean (1) 0-x pages are unlogged
	// or (2) 0-x and y-end pages are logged where y is the start and x is the end
	// (3) or 0-end pages are full...!
		char *mm = "Page is not new, search for a new page...\r\n";
 8007938:	4b8a      	ldr	r3, [pc, #552]	; (8007b64 <Find_Start_End_Page+0x28c>)
 800793a:	673b      	str	r3, [r7, #112]	; 0x70
		HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 800793c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800793e:	f7f8 fc4f 	bl	80001e0 <strlen>
 8007942:	4603      	mov	r3, r0
 8007944:	b29a      	uxth	r2, r3
 8007946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800794a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800794c:	4884      	ldr	r0, [pc, #528]	; (8007b60 <Find_Start_End_Page+0x288>)
 800794e:	f7fe f92c 	bl	8005baa <HAL_UART_Transmit>

		while ((nth_page != 0xFFFF) && (page_x < FLASH_TOTAL_DATA_PAGES)) {
 8007952:	e00d      	b.n	8007970 <Find_Start_End_Page+0x98>
			page_x++;
 8007954:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007958:	3301      	adds	r3, #1
 800795a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			nth_page = Flash_Get_Nth_Page(page_x);
 800795e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fbea 	bl	800713c <Flash_Get_Nth_Page>
 8007968:	4603      	mov	r3, r0
 800796a:	461a      	mov	r2, r3
 800796c:	4b7a      	ldr	r3, [pc, #488]	; (8007b58 <Find_Start_End_Page+0x280>)
 800796e:	801a      	strh	r2, [r3, #0]
		while ((nth_page != 0xFFFF) && (page_x < FLASH_TOTAL_DATA_PAGES)) {
 8007970:	4b79      	ldr	r3, [pc, #484]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007978:	4293      	cmp	r3, r2
 800797a:	d003      	beq.n	8007984 <Find_Start_End_Page+0xac>
 800797c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007980:	2bea      	cmp	r3, #234	; 0xea
 8007982:	d9e7      	bls.n	8007954 <Find_Start_End_Page+0x7c>
		}
		page_y = page_x;
 8007984:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007988:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		sprintf(m, "page_x = %u\r\n", page_x);
 800798c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8007990:	f107 030c 	add.w	r3, r7, #12
 8007994:	4974      	ldr	r1, [pc, #464]	; (8007b68 <Find_Start_End_Page+0x290>)
 8007996:	4618      	mov	r0, r3
 8007998:	f001 f9f6 	bl	8008d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 800799c:	f107 030c 	add.w	r3, r7, #12
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7f8 fc1d 	bl	80001e0 <strlen>
 80079a6:	4603      	mov	r3, r0
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	f107 010c 	add.w	r1, r7, #12
 80079ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079b2:	486b      	ldr	r0, [pc, #428]	; (8007b60 <Find_Start_End_Page+0x288>)
 80079b4:	f7fe f8f9 	bl	8005baa <HAL_UART_Transmit>

		if (nth_page != 0xFFFF) {
 80079b8:	4b67      	ldr	r3, [pc, #412]	; (8007b58 <Find_Start_End_Page+0x280>)
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d014      	beq.n	80079ee <Find_Start_End_Page+0x116>
			// case (3) 0-end unlogged pages
			// TODO: The order may actually not from 0 to end
			*start_page = 0;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]
			*end_page = FLASH_TOTAL_DATA_PAGES;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	22eb      	movs	r2, #235	; 0xeb
 80079ce:	701a      	strb	r2, [r3, #0]
			mm = "case3: pages are all full and everything was unlogged\r\n";
 80079d0:	4b66      	ldr	r3, [pc, #408]	; (8007b6c <Find_Start_End_Page+0x294>)
 80079d2:	673b      	str	r3, [r7, #112]	; 0x70
			HAL_UART_Transmit(&huart2, (uint8_t*)mm, strlen(mm), 1000);
 80079d4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80079d6:	f7f8 fc03 	bl	80001e0 <strlen>
 80079da:	4603      	mov	r3, r0
 80079dc:	b29a      	uxth	r2, r3
 80079de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079e2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80079e4:	485e      	ldr	r0, [pc, #376]	; (8007b60 <Find_Start_End_Page+0x288>)
 80079e6:	f7fe f8e0 	bl	8005baa <HAL_UART_Transmit>
			return 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e0af      	b.n	8007b4e <Find_Start_End_Page+0x276>
		} else {
			*end_page = page_x-1;
 80079ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	701a      	strb	r2, [r3, #0]
		}
		sprintf(m, "max = %u\r\n", FLASH_TOTAL_DATA_PAGES);
 80079fa:	f107 030c 	add.w	r3, r7, #12
 80079fe:	22eb      	movs	r2, #235	; 0xeb
 8007a00:	495b      	ldr	r1, [pc, #364]	; (8007b70 <Find_Start_End_Page+0x298>)
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 f9c0 	bl	8008d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007a08:	f107 030c 	add.w	r3, r7, #12
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7f8 fbe7 	bl	80001e0 <strlen>
 8007a12:	4603      	mov	r3, r0
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	f107 010c 	add.w	r1, r7, #12
 8007a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a1e:	4850      	ldr	r0, [pc, #320]	; (8007b60 <Find_Start_End_Page+0x288>)
 8007a20:	f7fe f8c3 	bl	8005baa <HAL_UART_Transmit>

		while ((nth_page == 0xFFFF) && (page_y < FLASH_TOTAL_DATA_PAGES)) {
 8007a24:	e00d      	b.n	8007a42 <Find_Start_End_Page+0x16a>
			page_y++;
 8007a26:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			nth_page = Flash_Get_Nth_Page(page_y);
 8007a30:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fb81 	bl	800713c <Flash_Get_Nth_Page>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4b46      	ldr	r3, [pc, #280]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007a40:	801a      	strh	r2, [r3, #0]
		while ((nth_page == 0xFFFF) && (page_y < FLASH_TOTAL_DATA_PAGES)) {
 8007a42:	4b45      	ldr	r3, [pc, #276]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d103      	bne.n	8007a56 <Find_Start_End_Page+0x17e>
 8007a4e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007a52:	2bea      	cmp	r3, #234	; 0xea
 8007a54:	d9e7      	bls.n	8007a26 <Find_Start_End_Page+0x14e>
		}
		sprintf(m, "page_y = %u, nth_page=%u\r\n", page_y, nth_page);
 8007a56:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8007a5a:	4b3f      	ldr	r3, [pc, #252]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	f107 000c 	add.w	r0, r7, #12
 8007a62:	4944      	ldr	r1, [pc, #272]	; (8007b74 <Find_Start_End_Page+0x29c>)
 8007a64:	f001 f990 	bl	8008d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007a68:	f107 030c 	add.w	r3, r7, #12
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7f8 fbb7 	bl	80001e0 <strlen>
 8007a72:	4603      	mov	r3, r0
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	f107 010c 	add.w	r1, r7, #12
 8007a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a7e:	4838      	ldr	r0, [pc, #224]	; (8007b60 <Find_Start_End_Page+0x288>)
 8007a80:	f7fe f893 	bl	8005baa <HAL_UART_Transmit>

		if (nth_page == 0xFFFF) {
 8007a84:	4b34      	ldr	r3, [pc, #208]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d103      	bne.n	8007a98 <Find_Start_End_Page+0x1c0>
			// case (1) 0-x unlogged pages
			*start_page = 0;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	e059      	b.n	8007b4c <Find_Start_End_Page+0x274>
		} else {
			// case(2) 0-x and y-end unlogged pages
			*start_page = page_y;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	e054      	b.n	8007b4c <Find_Start_End_Page+0x274>
		}
	} else {
	// The first page is untouched. This could mean (1) there is no data at all or
	// (2) x-y pages are unlogged
		while ((nth_page == 0xFFFF) && (page_x < FLASH_TOTAL_DATA_PAGES)) {
			page_x++;
 8007aa2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			nth_page = Flash_Get_Nth_Page(end_page);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff fb43 	bl	800713c <Flash_Get_Nth_Page>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4b27      	ldr	r3, [pc, #156]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007abc:	801a      	strh	r2, [r3, #0]
		while ((nth_page == 0xFFFF) && (page_x < FLASH_TOTAL_DATA_PAGES)) {
 8007abe:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d103      	bne.n	8007ad2 <Find_Start_End_Page+0x1fa>
 8007aca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007ace:	2bea      	cmp	r3, #234	; 0xea
 8007ad0:	d9e7      	bls.n	8007aa2 <Find_Start_End_Page+0x1ca>
		}
		if (nth_page == 0xFFFF) {
 8007ad2:	4b21      	ldr	r3, [pc, #132]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d107      	bne.n	8007aee <Find_Start_End_Page+0x216>
		// case (1) no data
			*start_page = 0;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
			*end_page = 0;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]
			return 1;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e02f      	b.n	8007b4e <Find_Start_End_Page+0x276>
		} else {
			*start_page = page_x;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8007af4:	701a      	strb	r2, [r3, #0]
		}
		page_y = page_x;
 8007af6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007afa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		while ((nth_page != 0xFFFF) && (page_y < FLASH_TOTAL_DATA_PAGES)) {
 8007afe:	e00d      	b.n	8007b1c <Find_Start_End_Page+0x244>
			page_y++;
 8007b00:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007b04:	3301      	adds	r3, #1
 8007b06:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			nth_page = Flash_Get_Nth_Page(end_page);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff fb14 	bl	800713c <Flash_Get_Nth_Page>
 8007b14:	4603      	mov	r3, r0
 8007b16:	461a      	mov	r2, r3
 8007b18:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007b1a:	801a      	strh	r2, [r3, #0]
		while ((nth_page != 0xFFFF) && (page_y < FLASH_TOTAL_DATA_PAGES)) {
 8007b1c:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d003      	beq.n	8007b30 <Find_Start_End_Page+0x258>
 8007b28:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007b2c:	2bea      	cmp	r3, #234	; 0xea
 8007b2e:	d9e7      	bls.n	8007b00 <Find_Start_End_Page+0x228>
		}
		*end_page = nth_page != 0xFFFF ? FLASH_TOTAL_DATA_PAGES: page_y - 1;
 8007b30:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <Find_Start_End_Page+0x280>)
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d104      	bne.n	8007b46 <Find_Start_End_Page+0x26e>
 8007b3c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	e000      	b.n	8007b48 <Find_Start_End_Page+0x270>
 8007b46:	22eb      	movs	r2, #235	; 0xeb
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3778      	adds	r7, #120	; 0x78
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000b8c 	.word	0x20000b8c
 8007b5c:	0800982c 	.word	0x0800982c
 8007b60:	20000964 	.word	0x20000964
 8007b64:	08009844 	.word	0x08009844
 8007b68:	08009870 	.word	0x08009870
 8007b6c:	08009880 	.word	0x08009880
 8007b70:	080098b8 	.word	0x080098b8
 8007b74:	080098c4 	.word	0x080098c4

08007b78 <Check_System>:

uint8_t Check_System(void) {
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	uint8_t sys_success = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	71fb      	strb	r3, [r7, #7]
	/* Check the sensor validity-------------------------------------------------- */
	uint8_t sensor_success = 1;// Check_Sensors();
 8007b82:	2301      	movs	r3, #1
 8007b84:	71bb      	strb	r3, [r7, #6]
	uint8_t rpi_success = Check_Data();
 8007b86:	f7ff fe11 	bl	80077ac <Check_Data>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	717b      	strb	r3, [r7, #5]
	char *m = "Hello\r\n";
 8007b8e:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <Check_System+0x5c>)
 8007b90:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007b92:	6838      	ldr	r0, [r7, #0]
 8007b94:	f7f8 fb24 	bl	80001e0 <strlen>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	480d      	ldr	r0, [pc, #52]	; (8007bd8 <Check_System+0x60>)
 8007ba4:	f7fe f801 	bl	8005baa <HAL_UART_Transmit>
	sys_success = (sensor_success << 1) +  rpi_success;
 8007ba8:	79bb      	ldrb	r3, [r7, #6]
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	797b      	ldrb	r3, [r7, #5]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007bb4:	6838      	ldr	r0, [r7, #0]
 8007bb6:	f7f8 fb13 	bl	80001e0 <strlen>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	4804      	ldr	r0, [pc, #16]	; (8007bd8 <Check_System+0x60>)
 8007bc6:	f7fd fff0 	bl	8005baa <HAL_UART_Transmit>
	return sys_success;
 8007bca:	79fb      	ldrb	r3, [r7, #7]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	080098e0 	.word	0x080098e0
 8007bd8:	20000964 	.word	0x20000964

08007bdc <Measure_Data>:

void Measure_Data(struct SensorData *s_data) {
 8007bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bde:	b0a9      	sub	sp, #164	; 0xa4
 8007be0:	af06      	add	r7, sp, #24
 8007be2:	6078      	str	r0, [r7, #4]
//	/* Measure conductivity */
	uint32_t c_data = Conductivity_Measure_Average();
 8007be4:	f7ff f97c 	bl	8006ee0 <Conductivity_Measure_Average>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
//	/* Measure temperature */
//	Temperature_Enable();
//	while (!temperature_finished) {
//	// Wait until the temperature measurement is complete
//	}
	float t_data = Temperature_Measure(); //temperature;
 8007bee:	f000 fee7 	bl	80089c0 <Temperature_Measure>
 8007bf2:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
	uint32_t t_int = (uint32_t)(t_data * 1000);
 8007bf6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8007bfa:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8007d24 <Measure_Data+0x148>
 8007bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c06:	ee17 3a90 	vmov	r3, s15
 8007c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
//
//	/* Measure pressure */
	int32_t temp_T;
	uint32_t p_data;
//	float p_data = Pressure_Measure();
	Pressure_Measure(&p_data, &temp_T);
 8007c0e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007c12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 f899 	bl	8007d50 <Pressure_Measure>
	uint32_t p_int = (uint32_t)(p_data*100);
 8007c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c20:	2264      	movs	r2, #100	; 0x64
 8007c22:	fb02 f303 	mul.w	r3, r2, r3
 8007c26:	67bb      	str	r3, [r7, #120]	; 0x78
	if (t_data > 80.f || t_data < 1.f) {
 8007c28:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8007c2c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8007d28 <Measure_Data+0x14c>
 8007c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c38:	dc08      	bgt.n	8007c4c <Measure_Data+0x70>
 8007c3a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8007c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4a:	d502      	bpl.n	8007c52 <Measure_Data+0x76>
		t_int = (uint32_t) temp_T;
 8007c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	}
	char m[100];
	int n = sprintf(m, "TS: %u, idx:%u C:%u\tT:%u.%u\tP:%u.%u\r\n",\
 8007c52:	4b36      	ldr	r3, [pc, #216]	; (8007d2c <Measure_Data+0x150>)
 8007c54:	681e      	ldr	r6, [r3, #0]
 8007c56:	4b36      	ldr	r3, [pc, #216]	; (8007d30 <Measure_Data+0x154>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c60:	4a34      	ldr	r2, [pc, #208]	; (8007d34 <Measure_Data+0x158>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	0998      	lsrs	r0, r3, #6
 8007c68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c6c:	4b31      	ldr	r3, [pc, #196]	; (8007d34 <Measure_Data+0x158>)
 8007c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c72:	099b      	lsrs	r3, r3, #6
 8007c74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c78:	fb01 f303 	mul.w	r3, r1, r3
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c80:	492c      	ldr	r1, [pc, #176]	; (8007d34 <Measure_Data+0x158>)
 8007c82:	fba1 1202 	umull	r1, r2, r1, r2
 8007c86:	0994      	lsrs	r4, r2, #6
 8007c88:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007c8a:	4a2a      	ldr	r2, [pc, #168]	; (8007d34 <Measure_Data+0x158>)
 8007c8c:	fba2 5201 	umull	r5, r2, r2, r1
 8007c90:	0992      	lsrs	r2, r2, #6
 8007c92:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007c96:	fb05 f202 	mul.w	r2, r5, r2
 8007c9a:	1a8a      	subs	r2, r1, r2
 8007c9c:	f107 0508 	add.w	r5, r7, #8
 8007ca0:	9204      	str	r2, [sp, #16]
 8007ca2:	9403      	str	r4, [sp, #12]
 8007ca4:	9302      	str	r3, [sp, #8]
 8007ca6:	9001      	str	r0, [sp, #4]
 8007ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	4921      	ldr	r1, [pc, #132]	; (8007d38 <Measure_Data+0x15c>)
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f001 f867 	bl	8008d88 <siprintf>
 8007cba:	6778      	str	r0, [r7, #116]	; 0x74
				ts, global_idx, c_data, (uint32_t)t_int/1000,\
			  ((uint32_t)(t_int))%1000, (uint32_t)p_int/1000, \
			  ((uint32_t)(p_int))%1000);
	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007cbc:	f107 0308 	add.w	r3, r7, #8
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7f8 fa8d 	bl	80001e0 <strlen>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	f107 0108 	add.w	r1, r7, #8
 8007cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cd2:	481a      	ldr	r0, [pc, #104]	; (8007d3c <Measure_Data+0x160>)
 8007cd4:	f7fd ff69 	bl	8005baa <HAL_UART_Transmit>

//
//	/* Save the data to the flash */
//	// RTC ts, idx, start_addr, end_addr managing needed
//	// FLASH_USER_END_ADDR needs to be specified
	s_data->Idx = global_idx;
 8007cd8:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <Measure_Data+0x154>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]
	s_data->Timestamp = ts;
 8007ce0:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <Measure_Data+0x150>)
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	605a      	str	r2, [r3, #4]
	s_data->Conductivity = c_data;
 8007ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	edc3 7a04 	vstr	s15, [r3, #16]
	s_data->Temperature = t_int;
 8007cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	edc3 7a03 	vstr	s15, [r3, #12]
	s_data->Pressure =  p_int;
 8007d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8007d1c:	bf00      	nop
 8007d1e:	378c      	adds	r7, #140	; 0x8c
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d24:	447a0000 	.word	0x447a0000
 8007d28:	42a00000 	.word	0x42a00000
 8007d2c:	20000090 	.word	0x20000090
 8007d30:	20000b84 	.word	0x20000b84
 8007d34:	10624dd3 	.word	0x10624dd3
 8007d38:	080098e8 	.word	0x080098e8
 8007d3c:	20000964 	.word	0x20000964

08007d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
	...

08007d50 <Pressure_Measure>:

void Pressure_Compute(uint32_t D1, uint32_t D2, uint16_t C[], uint32_t *P, int32_t *T);
uint8_t crc4(uint16_t n_prom[]);


void Pressure_Measure(uint32_t *P, int32_t *T) {
 8007d50:	b590      	push	{r4, r7, lr}
 8007d52:	b099      	sub	sp, #100	; 0x64
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
	// Reset the Sensor
	uint8_t outbuffer = MS5837_RESET;
 8007d5a:	231e      	movs	r3, #30
 8007d5c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	HAL_I2C_Master_Transmit(&hi2c2, MS5837_ADDR<<1, &outbuffer, 1, 1000);
 8007d60:	f107 024b 	add.w	r2, r7, #75	; 0x4b
 8007d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	21ec      	movs	r1, #236	; 0xec
 8007d6e:	4884      	ldr	r0, [pc, #528]	; (8007f80 <Pressure_Measure+0x230>)
 8007d70:	f7fa fde6 	bl	8002940 <HAL_I2C_Master_Transmit>
	// reset completion waiting
	HAL_Delay(10);
 8007d74:	200a      	movs	r0, #10
 8007d76:	f7f8 ff03 	bl	8000b80 <HAL_Delay>

	// Read Calibration values and CRC
	uint16_t C[8];
	unsigned char buffer[3];
	buffer[0] = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[1] = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[2] = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (uint8_t i = 0; i < 7; i++) {
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007d92:	e032      	b.n	8007dfa <Pressure_Measure+0xaa>
	  uint8_t outbuffer2 = MS5837_PROM_READ + i*2;
 8007d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d98:	3350      	adds	r3, #80	; 0x50
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	  HAL_I2C_Master_Transmit(&hi2c2, MS5837_ADDR<<1, &outbuffer2, 1, 1000);
 8007da4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	2301      	movs	r3, #1
 8007db0:	21ec      	movs	r1, #236	; 0xec
 8007db2:	4873      	ldr	r0, [pc, #460]	; (8007f80 <Pressure_Measure+0x230>)
 8007db4:	f7fa fdc4 	bl	8002940 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2, MS5837_ADDR<<1, buffer, 2, 1000);
 8007db8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	21ec      	movs	r1, #236	; 0xec
 8007dc6:	486e      	ldr	r0, [pc, #440]	; (8007f80 <Pressure_Measure+0x230>)
 8007dc8:	f7fa feba 	bl	8002b40 <HAL_I2C_Master_Receive>
	  C[i] = buffer[0]<<8 | buffer[1];
 8007dcc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	b21a      	sxth	r2, r3
 8007dd4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007dd8:	b21b      	sxth	r3, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b21a      	sxth	r2, r3
 8007dde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007de2:	b292      	uxth	r2, r2
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007dea:	440b      	add	r3, r1
 8007dec:	f823 2c20 	strh.w	r2, [r3, #-32]
	for (uint8_t i = 0; i < 7; i++) {
 8007df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007df4:	3301      	adds	r3, #1
 8007df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dfe:	2b06      	cmp	r3, #6
 8007e00:	d9c8      	bls.n	8007d94 <Pressure_Measure+0x44>
	}
	uint8_t crcRead = C[0] >> 12;
 8007e02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e04:	0b1b      	lsrs	r3, r3, #12
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t crcCalculated = crc4(C);
 8007e0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fa87 	bl	8008324 <crc4>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	if (crcCalculated == crcRead) {
 8007e1c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8007e20:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d117      	bne.n	8007e58 <Pressure_Measure+0x108>
	  char m[20];
	  sprintf(m, "CRC success %u %u\r\n", crcRead, crcCalculated);
 8007e28:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8007e2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007e30:	f107 001c 	add.w	r0, r7, #28
 8007e34:	4953      	ldr	r1, [pc, #332]	; (8007f84 <Pressure_Measure+0x234>)
 8007e36:	f000 ffa7 	bl	8008d88 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007e3a:	f107 031c 	add.w	r3, r7, #28
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7f8 f9ce 	bl	80001e0 <strlen>
 8007e44:	4603      	mov	r3, r0
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f107 011c 	add.w	r1, r7, #28
 8007e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e50:	484d      	ldr	r0, [pc, #308]	; (8007f88 <Pressure_Measure+0x238>)
 8007e52:	f7fd feaa 	bl	8005baa <HAL_UART_Transmit>
 8007e56:	e015      	b.n	8007e84 <Pressure_Measure+0x134>
	} else {
	  char m[20];
	  sprintf(m, "CRC failed\r\n");
 8007e58:	f107 0308 	add.w	r3, r7, #8
 8007e5c:	4a4b      	ldr	r2, [pc, #300]	; (8007f8c <Pressure_Measure+0x23c>)
 8007e5e:	461c      	mov	r4, r3
 8007e60:	4613      	mov	r3, r2
 8007e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e64:	c407      	stmia	r4!, {r0, r1, r2}
 8007e66:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
 8007e68:	f107 0308 	add.w	r3, r7, #8
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7f8 f9b7 	bl	80001e0 <strlen>
 8007e72:	4603      	mov	r3, r0
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	f107 0108 	add.w	r1, r7, #8
 8007e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e7e:	4842      	ldr	r0, [pc, #264]	; (8007f88 <Pressure_Measure+0x238>)
 8007e80:	f7fd fe93 	bl	8005baa <HAL_UART_Transmit>
	}
	// Read D1
	uint8_t D1_convert = MS5837_CONVERT_D1_8192;
 8007e84:	234a      	movs	r3, #74	; 0x4a
 8007e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_I2C_Master_Transmit(&hi2c2, MS5837_ADDR<<1, &D1_convert, 1, 1000);
 8007e8a:	f107 0233 	add.w	r2, r7, #51	; 0x33
 8007e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	2301      	movs	r3, #1
 8007e96:	21ec      	movs	r1, #236	; 0xec
 8007e98:	4839      	ldr	r0, [pc, #228]	; (8007f80 <Pressure_Measure+0x230>)
 8007e9a:	f7fa fd51 	bl	8002940 <HAL_I2C_Master_Transmit>
	HAL_Delay(20); // Max conversion time per datasheet
 8007e9e:	2014      	movs	r0, #20
 8007ea0:	f7f8 fe6e 	bl	8000b80 <HAL_Delay>
	// Read ADC
	uint8_t ADC_Read = MS5837_ADC_READ;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	HAL_I2C_Master_Transmit(&hi2c2, MS5837_ADDR<<1, &ADC_Read, 1, 1000);
 8007eaa:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8007eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	21ec      	movs	r1, #236	; 0xec
 8007eb8:	4831      	ldr	r0, [pc, #196]	; (8007f80 <Pressure_Measure+0x230>)
 8007eba:	f7fa fd41 	bl	8002940 <HAL_I2C_Master_Transmit>
	buffer[0] = 0; buffer[1] = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	HAL_I2C_Master_Receive(&hi2c2, MS5837_ADDR<<1, buffer, 3, 1000);
 8007eca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	21ec      	movs	r1, #236	; 0xec
 8007ed8:	4829      	ldr	r0, [pc, #164]	; (8007f80 <Pressure_Measure+0x230>)
 8007eda:	f7fa fe31 	bl	8002b40 <HAL_I2C_Master_Receive>
	uint32_t D1 = buffer[0] << 16 | buffer[1] << 8 | buffer[2];
 8007ede:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007ee2:	041a      	lsls	r2, r3, #16
 8007ee4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	653b      	str	r3, [r7, #80]	; 0x50

	// Read D2
	uint8_t D2_convert = MS5837_CONVERT_D2_8192;
 8007ef4:	235a      	movs	r3, #90	; 0x5a
 8007ef6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	HAL_I2C_Master_Transmit(&hi2c2, MS5837_ADDR<<1, &D2_convert, 1, 1000);
 8007efa:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8007efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	2301      	movs	r3, #1
 8007f06:	21ec      	movs	r1, #236	; 0xec
 8007f08:	481d      	ldr	r0, [pc, #116]	; (8007f80 <Pressure_Measure+0x230>)
 8007f0a:	f7fa fd19 	bl	8002940 <HAL_I2C_Master_Transmit>
	HAL_Delay(20); // Max conversion time per datasheet
 8007f0e:	2014      	movs	r0, #20
 8007f10:	f7f8 fe36 	bl	8000b80 <HAL_Delay>
	// Read ADC
	HAL_I2C_Master_Transmit(&hi2c2, MS5837_ADDR<<1, &ADC_Read, 1, 1000);
 8007f14:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8007f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	2301      	movs	r3, #1
 8007f20:	21ec      	movs	r1, #236	; 0xec
 8007f22:	4817      	ldr	r0, [pc, #92]	; (8007f80 <Pressure_Measure+0x230>)
 8007f24:	f7fa fd0c 	bl	8002940 <HAL_I2C_Master_Transmit>
	buffer[0] = 0; buffer[1] = 0; buffer[2] = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8007f34:	2300      	movs	r3, #0
 8007f36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	HAL_I2C_Master_Receive(&hi2c2, MS5837_ADDR<<1, buffer, 3, 1000);
 8007f3a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2303      	movs	r3, #3
 8007f46:	21ec      	movs	r1, #236	; 0xec
 8007f48:	480d      	ldr	r0, [pc, #52]	; (8007f80 <Pressure_Measure+0x230>)
 8007f4a:	f7fa fdf9 	bl	8002b40 <HAL_I2C_Master_Receive>
	uint32_t D2 = buffer[0] << 16 | buffer[1] << 8 | buffer[2];
 8007f4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007f52:	041a      	lsls	r2, r3, #16
 8007f54:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007f60:	4313      	orrs	r3, r2
 8007f62:	64fb      	str	r3, [r7, #76]	; 0x4c

	// calculate the pressure
	Pressure_Compute(D1, D2, C, P, T);
 8007f64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007f70:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007f72:	f000 f80d 	bl	8007f90 <Pressure_Compute>
//	char m[10];
//	int n = sprintf(m, "Pressure: %d\r\n", P);
//	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
//	return ((float)P)/10.0f;
}
 8007f76:	bf00      	nop
 8007f78:	375c      	adds	r7, #92	; 0x5c
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd90      	pop	{r4, r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	2000011c 	.word	0x2000011c
 8007f84:	08009910 	.word	0x08009910
 8007f88:	20000964 	.word	0x20000964
 8007f8c:	08009924 	.word	0x08009924

08007f90 <Pressure_Compute>:


void Pressure_Compute(uint32_t D1, uint32_t D2, uint16_t C[], uint32_t *P, int32_t *T) {
 8007f90:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 8007f94:	b093      	sub	sp, #76	; 0x4c
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	60f8      	str	r0, [r7, #12]
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	607a      	str	r2, [r7, #4]
 8007f9e:	603b      	str	r3, [r7, #0]
	// Given C1-C6 and D1, D2, calculated TEMP and P
	// Do conversion first and then second order temp compensation

	int32_t dT = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	63bb      	str	r3, [r7, #56]	; 0x38
	int64_t SENS = 0;
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	f04f 0400 	mov.w	r4, #0
 8007fac:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	int64_t OFF = 0;
 8007fb0:	f04f 0300 	mov.w	r3, #0
 8007fb4:	f04f 0400 	mov.w	r4, #0
 8007fb8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	int32_t SENSi = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t OFFi = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t Ti = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	int64_t OFF2 = 0;
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	f04f 0400 	mov.w	r4, #0
 8007fd0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	int64_t SENS2 = 0;
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	f04f 0400 	mov.w	r4, #0
 8007fdc:	e9c7 3406 	strd	r3, r4, [r7, #24]

	// Terms called
	dT = D2-((uint32_t)C[5])*256l;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	330a      	adds	r3, #10
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	63bb      	str	r3, [r7, #56]	; 0x38
	SENS = ((int64_t)C[1])*32768l+(((int64_t)C[3])*dT)/256l;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f04f 0400 	mov.w	r4, #0
 8007ffa:	f04f 0100 	mov.w	r1, #0
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	03e2      	lsls	r2, r4, #15
 8008004:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8008008:	03d9      	lsls	r1, r3, #15
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3306      	adds	r3, #6
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29d      	uxth	r5, r3
 8008012:	f04f 0600 	mov.w	r6, #0
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800801c:	fb03 fc06 	mul.w	ip, r3, r6
 8008020:	fb05 f004 	mul.w	r0, r5, r4
 8008024:	4460      	add	r0, ip
 8008026:	fba5 3403 	umull	r3, r4, r5, r3
 800802a:	4420      	add	r0, r4
 800802c:	4604      	mov	r4, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	f174 0000 	sbcs.w	r0, r4, #0
 8008034:	da02      	bge.n	800803c <Pressure_Compute+0xac>
 8008036:	33ff      	adds	r3, #255	; 0xff
 8008038:	f144 0400 	adc.w	r4, r4, #0
 800803c:	f04f 0500 	mov.w	r5, #0
 8008040:	f04f 0600 	mov.w	r6, #0
 8008044:	0a1d      	lsrs	r5, r3, #8
 8008046:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 800804a:	1226      	asrs	r6, r4, #8
 800804c:	186b      	adds	r3, r5, r1
 800804e:	eb46 0402 	adc.w	r4, r6, r2
 8008052:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	OFF = ((int64_t)C[2])*65536l+(((int64_t)C[4])*dT)/128l;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3304      	adds	r3, #4
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f04f 0400 	mov.w	r4, #0
 8008062:	f04f 0100 	mov.w	r1, #0
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	0422      	lsls	r2, r4, #16
 800806c:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 8008070:	0419      	lsls	r1, r3, #16
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3308      	adds	r3, #8
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29d      	uxth	r5, r3
 800807a:	f04f 0600 	mov.w	r6, #0
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8008084:	fb03 fc06 	mul.w	ip, r3, r6
 8008088:	fb05 f004 	mul.w	r0, r5, r4
 800808c:	4460      	add	r0, ip
 800808e:	fba5 3403 	umull	r3, r4, r5, r3
 8008092:	4420      	add	r0, r4
 8008094:	4604      	mov	r4, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	f174 0000 	sbcs.w	r0, r4, #0
 800809c:	da02      	bge.n	80080a4 <Pressure_Compute+0x114>
 800809e:	337f      	adds	r3, #127	; 0x7f
 80080a0:	f144 0400 	adc.w	r4, r4, #0
 80080a4:	f04f 0500 	mov.w	r5, #0
 80080a8:	f04f 0600 	mov.w	r6, #0
 80080ac:	09dd      	lsrs	r5, r3, #7
 80080ae:	ea45 6544 	orr.w	r5, r5, r4, lsl #25
 80080b2:	11e6      	asrs	r6, r4, #7
 80080b4:	186b      	adds	r3, r5, r1
 80080b6:	eb46 0402 	adc.w	r4, r6, r2
 80080ba:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	// Temp conversion
	int32_t TEMP = 2000l+((int64_t)dT)*C[6]/8388608LL;
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	4619      	mov	r1, r3
 80080c2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	330c      	adds	r3, #12
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	f04f 0400 	mov.w	r4, #0
 80080d2:	fb03 f502 	mul.w	r5, r3, r2
 80080d6:	fb01 f004 	mul.w	r0, r1, r4
 80080da:	4428      	add	r0, r5
 80080dc:	fba1 3403 	umull	r3, r4, r1, r3
 80080e0:	1902      	adds	r2, r0, r4
 80080e2:	4614      	mov	r4, r2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f174 0200 	sbcs.w	r2, r4, #0
 80080ea:	da05      	bge.n	80080f8 <Pressure_Compute+0x168>
 80080ec:	498b      	ldr	r1, [pc, #556]	; (800831c <Pressure_Compute+0x38c>)
 80080ee:	f04f 0200 	mov.w	r2, #0
 80080f2:	185b      	adds	r3, r3, r1
 80080f4:	eb44 0402 	adc.w	r4, r4, r2
 80080f8:	f04f 0100 	mov.w	r1, #0
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	0dd9      	lsrs	r1, r3, #23
 8008102:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 8008106:	15e2      	asrs	r2, r4, #23
 8008108:	460b      	mov	r3, r1
 800810a:	4614      	mov	r4, r2
 800810c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008110:	617b      	str	r3, [r7, #20]

	//Second order compensation

	if((TEMP/100)<20){         //Low temp
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008118:	da69      	bge.n	80081ee <Pressure_Compute+0x25e>
		Ti = (3*((int64_t)dT)*((int64_t)dT))/(8589934592LL);
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	4619      	mov	r1, r3
 800811e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8008122:	460d      	mov	r5, r1
 8008124:	4616      	mov	r6, r2
 8008126:	196b      	adds	r3, r5, r5
 8008128:	eb46 0406 	adc.w	r4, r6, r6
 800812c:	461d      	mov	r5, r3
 800812e:	4626      	mov	r6, r4
 8008130:	eb11 0b05 	adds.w	fp, r1, r5
 8008134:	eb42 0c06 	adc.w	ip, r2, r6
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800813e:	fb03 f50c 	mul.w	r5, r3, ip
 8008142:	fb0b f004 	mul.w	r0, fp, r4
 8008146:	4428      	add	r0, r5
 8008148:	fbab 3403 	umull	r3, r4, fp, r3
 800814c:	1902      	adds	r2, r0, r4
 800814e:	4614      	mov	r4, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	f174 0200 	sbcs.w	r2, r4, #0
 8008156:	da03      	bge.n	8008160 <Pressure_Compute+0x1d0>
 8008158:	f113 33ff 	adds.w	r3, r3, #4294967295
 800815c:	f144 0401 	adc.w	r4, r4, #1
 8008160:	f04f 0100 	mov.w	r1, #0
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	1061      	asrs	r1, r4, #1
 800816a:	17e2      	asrs	r2, r4, #31
 800816c:	460b      	mov	r3, r1
 800816e:	4614      	mov	r4, r2
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
		OFFi = (3*(TEMP-2000)*(TEMP-2000))/2;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8008178:	4613      	mov	r3, r2
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	4413      	add	r3, r2
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 8008184:	fb02 f303 	mul.w	r3, r2, r3
 8008188:	0fda      	lsrs	r2, r3, #31
 800818a:	4413      	add	r3, r2
 800818c:	105b      	asrs	r3, r3, #1
 800818e:	643b      	str	r3, [r7, #64]	; 0x40
		SENSi = (5*(TEMP-2000)*(TEMP-2000))/8;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 80081a2:	fb02 f303 	mul.w	r3, r2, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da00      	bge.n	80081ac <Pressure_Compute+0x21c>
 80081aa:	3307      	adds	r3, #7
 80081ac:	10db      	asrs	r3, r3, #3
 80081ae:	647b      	str	r3, [r7, #68]	; 0x44
		if((TEMP/100)<-15){    //Very low temp
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f513 6fc8 	cmn.w	r3, #1600	; 0x640
 80081b6:	dc45      	bgt.n	8008244 <Pressure_Compute+0x2b4>
			OFFi = OFFi+7*(TEMP+1500l)*(TEMP+1500l);
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 80081be:	4613      	mov	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 80081ca:	fb02 f303 	mul.w	r3, r2, r3
 80081ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081d0:	4413      	add	r3, r2
 80081d2:	643b      	str	r3, [r7, #64]	; 0x40
			SENSi = SENSi+4*(TEMP+1500l)*(TEMP+1500l);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081e8:	4413      	add	r3, r2
 80081ea:	647b      	str	r3, [r7, #68]	; 0x44
 80081ec:	e02a      	b.n	8008244 <Pressure_Compute+0x2b4>
		}
	}
	else if((TEMP/100)>=20){    //High temp
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80081f4:	db26      	blt.n	8008244 <Pressure_Compute+0x2b4>
		Ti = 2*(dT*dT)/(137438953472LL);
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081fa:	fb02 f303 	mul.w	r3, r2, r3
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8008204:	2b00      	cmp	r3, #0
 8008206:	f174 0200 	sbcs.w	r2, r4, #0
 800820a:	da03      	bge.n	8008214 <Pressure_Compute+0x284>
 800820c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8008210:	f144 041f 	adc.w	r4, r4, #31
 8008214:	f04f 0100 	mov.w	r1, #0
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	1161      	asrs	r1, r4, #5
 800821e:	17e2      	asrs	r2, r4, #31
 8008220:	460b      	mov	r3, r1
 8008222:	4614      	mov	r4, r2
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
		OFFi = (1*(TEMP-2000)*(TEMP-2000))/16;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 8008232:	fb02 f303 	mul.w	r3, r2, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	da00      	bge.n	800823c <Pressure_Compute+0x2ac>
 800823a:	330f      	adds	r3, #15
 800823c:	111b      	asrs	r3, r3, #4
 800823e:	643b      	str	r3, [r7, #64]	; 0x40
		SENSi = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	647b      	str	r3, [r7, #68]	; 0x44
	}

	OFF2 = OFF-OFFi;           //Calculate pressure and temp second order
 8008244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008246:	461d      	mov	r5, r3
 8008248:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800824c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008250:	460b      	mov	r3, r1
 8008252:	4614      	mov	r4, r2
 8008254:	1b5b      	subs	r3, r3, r5
 8008256:	eb64 0406 	sbc.w	r4, r4, r6
 800825a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	SENS2 = SENS-SENSi;
 800825e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008260:	461d      	mov	r5, r3
 8008262:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8008266:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800826a:	460b      	mov	r3, r1
 800826c:	4614      	mov	r4, r2
 800826e:	1b5b      	subs	r3, r3, r5
 8008270:	eb64 0406 	sbc.w	r4, r4, r6
 8008274:	e9c7 3406 	strd	r3, r4, [r7, #24]

	*T = (TEMP-Ti)*10;
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827c:	1ad2      	subs	r2, r2, r3
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	461a      	mov	r2, r3
 8008288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800828a:	601a      	str	r2, [r3, #0]
//	char m[20];
//	sprintf(m, "Temp: %d\r\n", (int)TEMP);
//	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
	*P = (((D1*SENS2)/2097152l-OFF2)/8192l);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f04f 0400 	mov.w	r4, #0
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	fb04 f102 	mul.w	r1, r4, r2
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	fb03 f202 	mul.w	r2, r3, r2
 800829e:	440a      	add	r2, r1
 80082a0:	69b9      	ldr	r1, [r7, #24]
 80082a2:	fba1 3403 	umull	r3, r4, r1, r3
 80082a6:	4422      	add	r2, r4
 80082a8:	4614      	mov	r4, r2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f174 0200 	sbcs.w	r2, r4, #0
 80082b0:	da05      	bge.n	80082be <Pressure_Compute+0x32e>
 80082b2:	491b      	ldr	r1, [pc, #108]	; (8008320 <Pressure_Compute+0x390>)
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	185b      	adds	r3, r3, r1
 80082ba:	eb44 0402 	adc.w	r4, r4, r2
 80082be:	f04f 0100 	mov.w	r1, #0
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	0d59      	lsrs	r1, r3, #21
 80082c8:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 80082cc:	1562      	asrs	r2, r4, #21
 80082ce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80082d2:	1ac9      	subs	r1, r1, r3
 80082d4:	eb62 0204 	sbc.w	r2, r2, r4
 80082d8:	460d      	mov	r5, r1
 80082da:	4616      	mov	r6, r2
 80082dc:	462b      	mov	r3, r5
 80082de:	4634      	mov	r4, r6
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f174 0200 	sbcs.w	r2, r4, #0
 80082e6:	da06      	bge.n	80082f6 <Pressure_Compute+0x366>
 80082e8:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	185b      	adds	r3, r3, r1
 80082f2:	eb44 0402 	adc.w	r4, r4, r2
 80082f6:	f04f 0100 	mov.w	r1, #0
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	0b59      	lsrs	r1, r3, #13
 8008300:	ea41 41c4 	orr.w	r1, r1, r4, lsl #19
 8008304:	1362      	asrs	r2, r4, #13
 8008306:	460b      	mov	r3, r1
 8008308:	4614      	mov	r4, r2
 800830a:	461a      	mov	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	601a      	str	r2, [r3, #0]
}
 8008310:	bf00      	nop
 8008312:	374c      	adds	r7, #76	; 0x4c
 8008314:	46bd      	mov	sp, r7
 8008316:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 800831a:	4770      	bx	lr
 800831c:	007fffff 	.word	0x007fffff
 8008320:	001fffff 	.word	0x001fffff

08008324 <crc4>:



uint8_t crc4(uint16_t n_prom[]) {
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
	uint16_t n_rem = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	81fb      	strh	r3, [r7, #14]

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	801a      	strh	r2, [r3, #0]
	n_prom[7] = 0;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	330e      	adds	r3, #14
 8008342:	2200      	movs	r2, #0
 8008344:	801a      	strh	r2, [r3, #0]

	for ( uint8_t i = 0 ; i < 16; i++ ) {
 8008346:	2300      	movs	r3, #0
 8008348:	737b      	strb	r3, [r7, #13]
 800834a:	e03c      	b.n	80083c6 <crc4+0xa2>
		if ( i%2 == 1 ) {
 800834c:	7b7b      	ldrb	r3, [r7, #13]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00f      	beq.n	8008378 <crc4+0x54>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
 8008358:	7b7b      	ldrb	r3, [r7, #13]
 800835a:	085b      	lsrs	r3, r3, #1
 800835c:	b2db      	uxtb	r3, r3
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	4413      	add	r3, r2
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b21b      	sxth	r3, r3
 8008368:	b2db      	uxtb	r3, r3
 800836a:	b21a      	sxth	r2, r3
 800836c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008370:	4053      	eors	r3, r2
 8008372:	b21b      	sxth	r3, r3
 8008374:	81fb      	strh	r3, [r7, #14]
 8008376:	e00b      	b.n	8008390 <crc4+0x6c>
		} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
 8008378:	7b7b      	ldrb	r3, [r7, #13]
 800837a:	085b      	lsrs	r3, r3, #1
 800837c:	b2db      	uxtb	r3, r3
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	0a1b      	lsrs	r3, r3, #8
 8008388:	b29a      	uxth	r2, r3
 800838a:	89fb      	ldrh	r3, [r7, #14]
 800838c:	4053      	eors	r3, r2
 800838e:	81fb      	strh	r3, [r7, #14]
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 8008390:	2308      	movs	r3, #8
 8008392:	733b      	strb	r3, [r7, #12]
 8008394:	e011      	b.n	80083ba <crc4+0x96>
			if ( n_rem & 0x8000 ) {
 8008396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800839a:	2b00      	cmp	r3, #0
 800839c:	da07      	bge.n	80083ae <crc4+0x8a>
				n_rem = (n_rem << 1) ^ 0x3000;
 800839e:	89fb      	ldrh	r3, [r7, #14]
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	b21b      	sxth	r3, r3
 80083a4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80083a8:	b21b      	sxth	r3, r3
 80083aa:	81fb      	strh	r3, [r7, #14]
 80083ac:	e002      	b.n	80083b4 <crc4+0x90>
			} else {
				n_rem = (n_rem << 1);
 80083ae:	89fb      	ldrh	r3, [r7, #14]
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	81fb      	strh	r3, [r7, #14]
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 80083b4:	7b3b      	ldrb	r3, [r7, #12]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	733b      	strb	r3, [r7, #12]
 80083ba:	7b3b      	ldrb	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1ea      	bne.n	8008396 <crc4+0x72>
	for ( uint8_t i = 0 ; i < 16; i++ ) {
 80083c0:	7b7b      	ldrb	r3, [r7, #13]
 80083c2:	3301      	adds	r3, #1
 80083c4:	737b      	strb	r3, [r7, #13]
 80083c6:	7b7b      	ldrb	r3, [r7, #13]
 80083c8:	2b0f      	cmp	r3, #15
 80083ca:	d9bf      	bls.n	800834c <crc4+0x28>
			}
		}
	}

	n_rem = ((n_rem >> 12) & 0x000F);
 80083cc:	89fb      	ldrh	r3, [r7, #14]
 80083ce:	0b1b      	lsrs	r3, r3, #12
 80083d0:	81fb      	strh	r3, [r7, #14]

	return n_rem ^ 0x00;
 80083d2:	89fb      	ldrh	r3, [r7, #14]
 80083d4:	b2db      	uxtb	r3, r3
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083ea:	4b0f      	ldr	r3, [pc, #60]	; (8008428 <HAL_MspInit+0x44>)
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	4a0e      	ldr	r2, [pc, #56]	; (8008428 <HAL_MspInit+0x44>)
 80083f0:	f043 0301 	orr.w	r3, r3, #1
 80083f4:	6193      	str	r3, [r2, #24]
 80083f6:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <HAL_MspInit+0x44>)
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008402:	4b09      	ldr	r3, [pc, #36]	; (8008428 <HAL_MspInit+0x44>)
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	4a08      	ldr	r2, [pc, #32]	; (8008428 <HAL_MspInit+0x44>)
 8008408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800840c:	61d3      	str	r3, [r2, #28]
 800840e:	4b06      	ldr	r3, [pc, #24]	; (8008428 <HAL_MspInit+0x44>)
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	40021000 	.word	0x40021000

0800842c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08c      	sub	sp, #48	; 0x30
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008434:	f107 031c 	add.w	r3, r7, #28
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	605a      	str	r2, [r3, #4]
 800843e:	609a      	str	r2, [r3, #8]
 8008440:	60da      	str	r2, [r3, #12]
 8008442:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800844c:	d12d      	bne.n	80084aa <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800844e:	4b32      	ldr	r3, [pc, #200]	; (8008518 <HAL_ADC_MspInit+0xec>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	4a30      	ldr	r2, [pc, #192]	; (8008518 <HAL_ADC_MspInit+0xec>)
 8008456:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8008458:	4b2f      	ldr	r3, [pc, #188]	; (8008518 <HAL_ADC_MspInit+0xec>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d10b      	bne.n	8008478 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8008460:	4b2e      	ldr	r3, [pc, #184]	; (800851c <HAL_ADC_MspInit+0xf0>)
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	4a2d      	ldr	r2, [pc, #180]	; (800851c <HAL_ADC_MspInit+0xf0>)
 8008466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800846a:	6153      	str	r3, [r2, #20]
 800846c:	4b2b      	ldr	r3, [pc, #172]	; (800851c <HAL_ADC_MspInit+0xf0>)
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008474:	61bb      	str	r3, [r7, #24]
 8008476:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008478:	4b28      	ldr	r3, [pc, #160]	; (800851c <HAL_ADC_MspInit+0xf0>)
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	4a27      	ldr	r2, [pc, #156]	; (800851c <HAL_ADC_MspInit+0xf0>)
 800847e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008482:	6153      	str	r3, [r2, #20]
 8008484:	4b25      	ldr	r3, [pc, #148]	; (800851c <HAL_ADC_MspInit+0xf0>)
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = Voltage_ADC_Pin;
 8008490:	2304      	movs	r3, #4
 8008492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008494:	2303      	movs	r3, #3
 8008496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008498:	2300      	movs	r3, #0
 800849a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Voltage_ADC_GPIO_Port, &GPIO_InitStruct);
 800849c:	f107 031c 	add.w	r3, r7, #28
 80084a0:	4619      	mov	r1, r3
 80084a2:	481f      	ldr	r0, [pc, #124]	; (8008520 <HAL_ADC_MspInit+0xf4>)
 80084a4:	f7f9 ffec 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80084a8:	e031      	b.n	800850e <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a1d      	ldr	r2, [pc, #116]	; (8008524 <HAL_ADC_MspInit+0xf8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d12c      	bne.n	800850e <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80084b4:	4b18      	ldr	r3, [pc, #96]	; (8008518 <HAL_ADC_MspInit+0xec>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3301      	adds	r3, #1
 80084ba:	4a17      	ldr	r2, [pc, #92]	; (8008518 <HAL_ADC_MspInit+0xec>)
 80084bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80084be:	4b16      	ldr	r3, [pc, #88]	; (8008518 <HAL_ADC_MspInit+0xec>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d10b      	bne.n	80084de <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80084c6:	4b15      	ldr	r3, [pc, #84]	; (800851c <HAL_ADC_MspInit+0xf0>)
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	4a14      	ldr	r2, [pc, #80]	; (800851c <HAL_ADC_MspInit+0xf0>)
 80084cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084d0:	6153      	str	r3, [r2, #20]
 80084d2:	4b12      	ldr	r3, [pc, #72]	; (800851c <HAL_ADC_MspInit+0xf0>)
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084da:	613b      	str	r3, [r7, #16]
 80084dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <HAL_ADC_MspInit+0xf0>)
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	4a0e      	ldr	r2, [pc, #56]	; (800851c <HAL_ADC_MspInit+0xf0>)
 80084e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084e8:	6153      	str	r3, [r2, #20]
 80084ea:	4b0c      	ldr	r3, [pc, #48]	; (800851c <HAL_ADC_MspInit+0xf0>)
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Current_ADC_Pin;
 80084f6:	2302      	movs	r3, #2
 80084f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80084fa:	2303      	movs	r3, #3
 80084fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Current_ADC_GPIO_Port, &GPIO_InitStruct);
 8008502:	f107 031c 	add.w	r3, r7, #28
 8008506:	4619      	mov	r1, r3
 8008508:	4805      	ldr	r0, [pc, #20]	; (8008520 <HAL_ADC_MspInit+0xf4>)
 800850a:	f7f9 ffb9 	bl	8002480 <HAL_GPIO_Init>
}
 800850e:	bf00      	nop
 8008510:	3730      	adds	r7, #48	; 0x30
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000098 	.word	0x20000098
 800851c:	40021000 	.word	0x40021000
 8008520:	48000800 	.word	0x48000800
 8008524:	50000100 	.word	0x50000100

08008528 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08a      	sub	sp, #40	; 0x28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008530:	f107 0314 	add.w	r3, r7, #20
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	605a      	str	r2, [r3, #4]
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	60da      	str	r2, [r3, #12]
 800853e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a15      	ldr	r2, [pc, #84]	; (800859c <HAL_DAC_MspInit+0x74>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d124      	bne.n	8008594 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800854a:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <HAL_DAC_MspInit+0x78>)
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	4a14      	ldr	r2, [pc, #80]	; (80085a0 <HAL_DAC_MspInit+0x78>)
 8008550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008554:	61d3      	str	r3, [r2, #28]
 8008556:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <HAL_DAC_MspInit+0x78>)
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800855e:	613b      	str	r3, [r7, #16]
 8008560:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008562:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <HAL_DAC_MspInit+0x78>)
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	4a0e      	ldr	r2, [pc, #56]	; (80085a0 <HAL_DAC_MspInit+0x78>)
 8008568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800856c:	6153      	str	r3, [r2, #20]
 800856e:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <HAL_DAC_MspInit+0x78>)
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800857a:	2310      	movs	r3, #16
 800857c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800857e:	2303      	movs	r3, #3
 8008580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008586:	f107 0314 	add.w	r3, r7, #20
 800858a:	4619      	mov	r1, r3
 800858c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008590:	f7f9 ff76 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8008594:	bf00      	nop
 8008596:	3728      	adds	r7, #40	; 0x28
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40007400 	.word	0x40007400
 80085a0:	40021000 	.word	0x40021000

080085a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08c      	sub	sp, #48	; 0x30
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085ac:	f107 031c 	add.w	r3, r7, #28
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	609a      	str	r2, [r3, #8]
 80085b8:	60da      	str	r2, [r3, #12]
 80085ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a2f      	ldr	r2, [pc, #188]	; (8008680 <HAL_I2C_MspInit+0xdc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d128      	bne.n	8008618 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085c6:	4b2f      	ldr	r3, [pc, #188]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	4a2e      	ldr	r2, [pc, #184]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 80085cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085d0:	6153      	str	r3, [r2, #20]
 80085d2:	4b2c      	ldr	r3, [pc, #176]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085da:	61bb      	str	r3, [r7, #24]
 80085dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085de:	23c0      	movs	r3, #192	; 0xc0
 80085e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80085e2:	2312      	movs	r3, #18
 80085e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085e6:	2301      	movs	r3, #1
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085ea:	2303      	movs	r3, #3
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80085ee:	2304      	movs	r3, #4
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085f2:	f107 031c 	add.w	r3, r7, #28
 80085f6:	4619      	mov	r1, r3
 80085f8:	4823      	ldr	r0, [pc, #140]	; (8008688 <HAL_I2C_MspInit+0xe4>)
 80085fa:	f7f9 ff41 	bl	8002480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80085fe:	4b21      	ldr	r3, [pc, #132]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	4a20      	ldr	r2, [pc, #128]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 8008604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008608:	61d3      	str	r3, [r2, #28]
 800860a:	4b1e      	ldr	r3, [pc, #120]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8008616:	e02e      	b.n	8008676 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a1b      	ldr	r2, [pc, #108]	; (800868c <HAL_I2C_MspInit+0xe8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d129      	bne.n	8008676 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008622:	4b18      	ldr	r3, [pc, #96]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	4a17      	ldr	r2, [pc, #92]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 8008628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800862c:	6153      	str	r3, [r2, #20]
 800862e:	4b15      	ldr	r3, [pc, #84]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008636:	613b      	str	r3, [r7, #16]
 8008638:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800863a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800863e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008640:	2312      	movs	r3, #18
 8008642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008644:	2301      	movs	r3, #1
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008648:	2303      	movs	r3, #3
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800864c:	2304      	movs	r3, #4
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008650:	f107 031c 	add.w	r3, r7, #28
 8008654:	4619      	mov	r1, r3
 8008656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800865a:	f7f9 ff11 	bl	8002480 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800865e:	4b09      	ldr	r3, [pc, #36]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	4a08      	ldr	r2, [pc, #32]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 8008664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008668:	61d3      	str	r3, [r2, #28]
 800866a:	4b06      	ldr	r3, [pc, #24]	; (8008684 <HAL_I2C_MspInit+0xe0>)
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
}
 8008676:	bf00      	nop
 8008678:	3730      	adds	r7, #48	; 0x30
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	40005400 	.word	0x40005400
 8008684:	40021000 	.word	0x40021000
 8008688:	48000400 	.word	0x48000400
 800868c:	40005800 	.word	0x40005800

08008690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08c      	sub	sp, #48	; 0x30
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008698:	f107 031c 	add.w	r3, r7, #28
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	605a      	str	r2, [r3, #4]
 80086a2:	609a      	str	r2, [r3, #8]
 80086a4:	60da      	str	r2, [r3, #12]
 80086a6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b0:	d114      	bne.n	80086dc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80086b2:	4b34      	ldr	r3, [pc, #208]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	4a33      	ldr	r2, [pc, #204]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 80086b8:	f043 0301 	orr.w	r3, r3, #1
 80086bc:	61d3      	str	r3, [r2, #28]
 80086be:	4b31      	ldr	r3, [pc, #196]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80086ca:	2200      	movs	r2, #0
 80086cc:	210f      	movs	r1, #15
 80086ce:	201c      	movs	r0, #28
 80086d0:	f7f9 fbe9 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80086d4:	201c      	movs	r0, #28
 80086d6:	f7f9 fc02 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80086da:	e04e      	b.n	800877a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM3)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a29      	ldr	r2, [pc, #164]	; (8008788 <HAL_TIM_Base_MspInit+0xf8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d130      	bne.n	8008748 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80086e6:	4b27      	ldr	r3, [pc, #156]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	4a26      	ldr	r2, [pc, #152]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 80086ec:	f043 0302 	orr.w	r3, r3, #2
 80086f0:	61d3      	str	r3, [r2, #28]
 80086f2:	4b24      	ldr	r3, [pc, #144]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086fe:	4b21      	ldr	r3, [pc, #132]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	4a20      	ldr	r2, [pc, #128]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 8008704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008708:	6153      	str	r3, [r2, #20]
 800870a:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008712:	613b      	str	r3, [r7, #16]
 8008714:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ZAC_Wire_Pin;
 8008716:	2340      	movs	r3, #64	; 0x40
 8008718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800871a:	2302      	movs	r3, #2
 800871c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800871e:	2300      	movs	r3, #0
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008722:	2300      	movs	r3, #0
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008726:	2302      	movs	r3, #2
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ZAC_Wire_GPIO_Port, &GPIO_InitStruct);
 800872a:	f107 031c 	add.w	r3, r7, #28
 800872e:	4619      	mov	r1, r3
 8008730:	4816      	ldr	r0, [pc, #88]	; (800878c <HAL_TIM_Base_MspInit+0xfc>)
 8008732:	f7f9 fea5 	bl	8002480 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 14, 0);
 8008736:	2200      	movs	r2, #0
 8008738:	210e      	movs	r1, #14
 800873a:	201d      	movs	r0, #29
 800873c:	f7f9 fbb3 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008740:	201d      	movs	r0, #29
 8008742:	f7f9 fbcc 	bl	8001ede <HAL_NVIC_EnableIRQ>
}
 8008746:	e018      	b.n	800877a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a10      	ldr	r2, [pc, #64]	; (8008790 <HAL_TIM_Base_MspInit+0x100>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d113      	bne.n	800877a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	4a0b      	ldr	r2, [pc, #44]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 8008758:	f043 0304 	orr.w	r3, r3, #4
 800875c:	61d3      	str	r3, [r2, #28]
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <HAL_TIM_Base_MspInit+0xf4>)
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 800876a:	2200      	movs	r2, #0
 800876c:	210d      	movs	r1, #13
 800876e:	201e      	movs	r0, #30
 8008770:	f7f9 fb99 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008774:	201e      	movs	r0, #30
 8008776:	f7f9 fbb2 	bl	8001ede <HAL_NVIC_EnableIRQ>
}
 800877a:	bf00      	nop
 800877c:	3730      	adds	r7, #48	; 0x30
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	40021000 	.word	0x40021000
 8008788:	40000400 	.word	0x40000400
 800878c:	48000800 	.word	0x48000800
 8008790:	40000800 	.word	0x40000800

08008794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08a      	sub	sp, #40	; 0x28
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800879c:	f107 0314 	add.w	r3, r7, #20
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	605a      	str	r2, [r3, #4]
 80087a6:	609a      	str	r2, [r3, #8]
 80087a8:	60da      	str	r2, [r3, #12]
 80087aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a17      	ldr	r2, [pc, #92]	; (8008810 <HAL_UART_MspInit+0x7c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d128      	bne.n	8008808 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80087b6:	4b17      	ldr	r3, [pc, #92]	; (8008814 <HAL_UART_MspInit+0x80>)
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	4a16      	ldr	r2, [pc, #88]	; (8008814 <HAL_UART_MspInit+0x80>)
 80087bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087c0:	61d3      	str	r3, [r2, #28]
 80087c2:	4b14      	ldr	r3, [pc, #80]	; (8008814 <HAL_UART_MspInit+0x80>)
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ce:	4b11      	ldr	r3, [pc, #68]	; (8008814 <HAL_UART_MspInit+0x80>)
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	4a10      	ldr	r2, [pc, #64]	; (8008814 <HAL_UART_MspInit+0x80>)
 80087d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d8:	6153      	str	r3, [r2, #20]
 80087da:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <HAL_UART_MspInit+0x80>)
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80087e6:	230c      	movs	r3, #12
 80087e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ea:	2302      	movs	r3, #2
 80087ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80087f2:	2303      	movs	r3, #3
 80087f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80087f6:	2307      	movs	r3, #7
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087fa:	f107 0314 	add.w	r3, r7, #20
 80087fe:	4619      	mov	r1, r3
 8008800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008804:	f7f9 fe3c 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008808:	bf00      	nop
 800880a:	3728      	adds	r7, #40	; 0x28
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40004400 	.word	0x40004400
 8008814:	40021000 	.word	0x40021000

08008818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800881c:	bf00      	nop
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008826:	b480      	push	{r7}
 8008828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800882a:	e7fe      	b.n	800882a <HardFault_Handler+0x4>

0800882c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008830:	e7fe      	b.n	8008830 <MemManage_Handler+0x4>

08008832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008832:	b480      	push	{r7}
 8008834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008836:	e7fe      	b.n	8008836 <BusFault_Handler+0x4>

08008838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800883c:	e7fe      	b.n	800883c <UsageFault_Handler+0x4>

0800883e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800883e:	b480      	push	{r7}
 8008840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008842:	bf00      	nop
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008850:	bf00      	nop
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800885a:	b480      	push	{r7}
 800885c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800885e:	bf00      	nop
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800886c:	f7f8 f968 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008870:	bf00      	nop
 8008872:	bd80      	pop	{r7, pc}

08008874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008878:	4802      	ldr	r0, [pc, #8]	; (8008884 <TIM2_IRQHandler+0x10>)
 800887a:	f7fc fac5 	bl	8004e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800887e:	bf00      	nop
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20000b34 	.word	0x20000b34

08008888 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800888c:	4802      	ldr	r0, [pc, #8]	; (8008898 <TIM3_IRQHandler+0x10>)
 800888e:	f7fc fabb 	bl	8004e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008892:	bf00      	nop
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000ae4 	.word	0x20000ae4

0800889c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80088a0:	4802      	ldr	r0, [pc, #8]	; (80088ac <TIM4_IRQHandler+0x10>)
 80088a2:	f7fc fab1 	bl	8004e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80088a6:	bf00      	nop
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000a98 	.word	0x20000a98

080088b0 <EXTI4_IRQHandler>:
  * 		for RPI Ready pin
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0
	/* EXTI line interrupt detected */
	if(__HAL_GPIO_EXTI_GET_IT(RPI_Ready_Pin) != RESET)
 80088b4:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <EXTI4_IRQHandler+0x20>)
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <EXTI4_IRQHandler+0x1a>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(RPI_Ready_Pin);
 80088c0:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <EXTI4_IRQHandler+0x20>)
 80088c2:	2210      	movs	r2, #16
 80088c4:	615a      	str	r2, [r3, #20]
		RPI_Ready_Handler();
 80088c6:	f7fe f955 	bl	8006b74 <RPI_Ready_Handler>
	}
}
 80088ca:	bf00      	nop
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	40010400 	.word	0x40010400

080088d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80088dc:	4b11      	ldr	r3, [pc, #68]	; (8008924 <_sbrk+0x50>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d102      	bne.n	80088ea <_sbrk+0x16>
		heap_end = &end;
 80088e4:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <_sbrk+0x50>)
 80088e6:	4a10      	ldr	r2, [pc, #64]	; (8008928 <_sbrk+0x54>)
 80088e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80088ea:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <_sbrk+0x50>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80088f0:	4b0c      	ldr	r3, [pc, #48]	; (8008924 <_sbrk+0x50>)
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4413      	add	r3, r2
 80088f8:	466a      	mov	r2, sp
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d907      	bls.n	800890e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80088fe:	f000 fa11 	bl	8008d24 <__errno>
 8008902:	4602      	mov	r2, r0
 8008904:	230c      	movs	r3, #12
 8008906:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008908:	f04f 33ff 	mov.w	r3, #4294967295
 800890c:	e006      	b.n	800891c <_sbrk+0x48>
	}

	heap_end += incr;
 800890e:	4b05      	ldr	r3, [pc, #20]	; (8008924 <_sbrk+0x50>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4413      	add	r3, r2
 8008916:	4a03      	ldr	r2, [pc, #12]	; (8008924 <_sbrk+0x50>)
 8008918:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800891a:	68fb      	ldr	r3, [r7, #12]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	2000009c 	.word	0x2000009c
 8008928:	20000b98 	.word	0x20000b98

0800892c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008930:	4b1f      	ldr	r3, [pc, #124]	; (80089b0 <SystemInit+0x84>)
 8008932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008936:	4a1e      	ldr	r2, [pc, #120]	; (80089b0 <SystemInit+0x84>)
 8008938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800893c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008940:	4b1c      	ldr	r3, [pc, #112]	; (80089b4 <SystemInit+0x88>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a1b      	ldr	r2, [pc, #108]	; (80089b4 <SystemInit+0x88>)
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800894c:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <SystemInit+0x88>)
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	4918      	ldr	r1, [pc, #96]	; (80089b4 <SystemInit+0x88>)
 8008952:	4b19      	ldr	r3, [pc, #100]	; (80089b8 <SystemInit+0x8c>)
 8008954:	4013      	ands	r3, r2
 8008956:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008958:	4b16      	ldr	r3, [pc, #88]	; (80089b4 <SystemInit+0x88>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a15      	ldr	r2, [pc, #84]	; (80089b4 <SystemInit+0x88>)
 800895e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008966:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008968:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <SystemInit+0x88>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a11      	ldr	r2, [pc, #68]	; (80089b4 <SystemInit+0x88>)
 800896e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008972:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <SystemInit+0x88>)
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4a0e      	ldr	r2, [pc, #56]	; (80089b4 <SystemInit+0x88>)
 800897a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800897e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8008980:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <SystemInit+0x88>)
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	4a0b      	ldr	r2, [pc, #44]	; (80089b4 <SystemInit+0x88>)
 8008986:	f023 030f 	bic.w	r3, r3, #15
 800898a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800898c:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <SystemInit+0x88>)
 800898e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008990:	4908      	ldr	r1, [pc, #32]	; (80089b4 <SystemInit+0x88>)
 8008992:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <SystemInit+0x90>)
 8008994:	4013      	ands	r3, r2
 8008996:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8008998:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <SystemInit+0x88>)
 800899a:	2200      	movs	r2, #0
 800899c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800899e:	4b04      	ldr	r3, [pc, #16]	; (80089b0 <SystemInit+0x84>)
 80089a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089a4:	609a      	str	r2, [r3, #8]
#endif
}
 80089a6:	bf00      	nop
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	e000ed00 	.word	0xe000ed00
 80089b4:	40021000 	.word	0x40021000
 80089b8:	f87fc00c 	.word	0xf87fc00c
 80089bc:	ff00fccc 	.word	0xff00fccc

080089c0 <Temperature_Measure>:
#define Si7051_RESET			0xFE
#define Si7051_READ_HOLD		0xE3
#define Si7051_READ_NOHOLD		0xF3


float Temperature_Measure() {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af02      	add	r7, sp, #8
	// Reset the Sensor
	uint8_t outbuffer = Si7051_RESET;
 80089c6:	23fe      	movs	r3, #254	; 0xfe
 80089c8:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, Si7051_ADDR<<1, &outbuffer, 1, 1000);
 80089ca:	1cfa      	adds	r2, r7, #3
 80089cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	2301      	movs	r3, #1
 80089d4:	2180      	movs	r1, #128	; 0x80
 80089d6:	4829      	ldr	r0, [pc, #164]	; (8008a7c <Temperature_Measure+0xbc>)
 80089d8:	f7f9 ffb2 	bl	8002940 <HAL_I2C_Master_Transmit>
	// reset completion waiting
	HAL_Delay(10);
 80089dc:	200a      	movs	r0, #10
 80089de:	f7f8 f8cf 	bl	8000b80 <HAL_Delay>

	outbuffer = Si7051_READ_NOHOLD;
 80089e2:	23f3      	movs	r3, #243	; 0xf3
 80089e4:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, Si7051_ADDR<<1, &outbuffer, 1, 1000);
 80089e6:	1cfa      	adds	r2, r7, #3
 80089e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	2301      	movs	r3, #1
 80089f0:	2180      	movs	r1, #128	; 0x80
 80089f2:	4822      	ldr	r0, [pc, #136]	; (8008a7c <Temperature_Measure+0xbc>)
 80089f4:	f7f9 ffa4 	bl	8002940 <HAL_I2C_Master_Transmit>
	uint8_t buffer[3];
	HAL_StatusTypeDef rx_success = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73bb      	strb	r3, [r7, #14]
	while (rx_success != HAL_OK && i < 10) {
 8008a00:	e010      	b.n	8008a24 <Temperature_Measure+0x64>
		rx_success = HAL_I2C_Master_Receive(&hi2c2, Si7051_ADDR<<1, buffer, 3, 1000);
 8008a02:	463a      	mov	r2, r7
 8008a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	2180      	movs	r1, #128	; 0x80
 8008a0e:	481b      	ldr	r0, [pc, #108]	; (8008a7c <Temperature_Measure+0xbc>)
 8008a10:	f7fa f896 	bl	8002b40 <HAL_I2C_Master_Receive>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(5);
 8008a18:	2005      	movs	r0, #5
 8008a1a:	f7f8 f8b1 	bl	8000b80 <HAL_Delay>
		i++;
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	3301      	adds	r3, #1
 8008a22:	73bb      	strb	r3, [r7, #14]
	while (rx_success != HAL_OK && i < 10) {
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <Temperature_Measure+0x70>
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b09      	cmp	r3, #9
 8008a2e:	d9e8      	bls.n	8008a02 <Temperature_Measure+0x42>
	}
	uint16_t T_code = buffer[0]<<8 | buffer[1];
 8008a30:	783b      	ldrb	r3, [r7, #0]
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	b21a      	sxth	r2, r3
 8008a36:	787b      	ldrb	r3, [r7, #1]
 8008a38:	b21b      	sxth	r3, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	b21b      	sxth	r3, r3
 8008a3e:	81bb      	strh	r3, [r7, #12]
	uint8_t crc = buffer[2];
 8008a40:	78bb      	ldrb	r3, [r7, #2]
 8008a42:	72fb      	strb	r3, [r7, #11]

	float temperature = ((175.72f * ((float)T_code)) / 65536.0f) - 46.85f;
 8008a44:	89bb      	ldrh	r3, [r7, #12]
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008a80 <Temperature_Measure+0xc0>
 8008a52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008a56:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008a84 <Temperature_Measure+0xc4>
 8008a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008a5e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8008a88 <Temperature_Measure+0xc8>
 8008a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a66:	edc7 7a01 	vstr	s15, [r7, #4]
//	char m[40];
//	sprintf(m, "temperature: %d.%d\r\n", (int)temperature, ((int)(temperature*100))%100);
//	HAL_UART_Transmit(&huart2, (uint8_t*)m, strlen(m), 1000);
	return temperature;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	ee07 3a90 	vmov	s15, r3

}
 8008a70:	eeb0 0a67 	vmov.f32	s0, s15
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	2000011c 	.word	0x2000011c
 8008a80:	432fb852 	.word	0x432fb852
 8008a84:	47800000 	.word	0x47800000
 8008a88:	423b6666 	.word	0x423b6666

08008a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a92:	f107 0310 	add.w	r3, r7, #16
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	605a      	str	r2, [r3, #4]
 8008a9c:	609a      	str	r2, [r3, #8]
 8008a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008aa0:	1d3b      	adds	r3, r7, #4
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	605a      	str	r2, [r3, #4]
 8008aa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008aaa:	4b1e      	ldr	r3, [pc, #120]	; (8008b24 <MX_TIM2_Init+0x98>)
 8008aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008ab0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8008ab2:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <MX_TIM2_Init+0x98>)
 8008ab4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8008ab8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008aba:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <MX_TIM2_Init+0x98>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008ac0:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <MX_TIM2_Init+0x98>)
 8008ac2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ac8:	4b16      	ldr	r3, [pc, #88]	; (8008b24 <MX_TIM2_Init+0x98>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ace:	4b15      	ldr	r3, [pc, #84]	; (8008b24 <MX_TIM2_Init+0x98>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008ad4:	4813      	ldr	r0, [pc, #76]	; (8008b24 <MX_TIM2_Init+0x98>)
 8008ad6:	f7fc f8f1 	bl	8004cbc <HAL_TIM_Base_Init>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008ae0:	f7ff f92e 	bl	8007d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008aea:	f107 0310 	add.w	r3, r7, #16
 8008aee:	4619      	mov	r1, r3
 8008af0:	480c      	ldr	r0, [pc, #48]	; (8008b24 <MX_TIM2_Init+0x98>)
 8008af2:	f7fc fb44 	bl	800517e <HAL_TIM_ConfigClockSource>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8008afc:	f7ff f920 	bl	8007d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b00:	2300      	movs	r3, #0
 8008b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008b08:	1d3b      	adds	r3, r7, #4
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4805      	ldr	r0, [pc, #20]	; (8008b24 <MX_TIM2_Init+0x98>)
 8008b0e:	f7fc ff81 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8008b18:	f7ff f912 	bl	8007d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008b1c:	bf00      	nop
 8008b1e:	3720      	adds	r7, #32
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000b34 	.word	0x20000b34

08008b28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08c      	sub	sp, #48	; 0x30
 8008b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8008b2e:	f107 031c 	add.w	r3, r7, #28
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	605a      	str	r2, [r3, #4]
 8008b38:	609a      	str	r2, [r3, #8]
 8008b3a:	60da      	str	r2, [r3, #12]
 8008b3c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b3e:	f107 0310 	add.w	r3, r7, #16
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	605a      	str	r2, [r3, #4]
 8008b48:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008b4a:	463b      	mov	r3, r7
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	605a      	str	r2, [r3, #4]
 8008b52:	609a      	str	r2, [r3, #8]
 8008b54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008b56:	4b35      	ldr	r3, [pc, #212]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008b58:	4a35      	ldr	r2, [pc, #212]	; (8008c30 <MX_TIM3_Init+0x108>)
 8008b5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008b5c:	4b33      	ldr	r3, [pc, #204]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b62:	4b32      	ldr	r3, [pc, #200]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008b68:	4b30      	ldr	r3, [pc, #192]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b70:	4b2e      	ldr	r3, [pc, #184]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b76:	4b2d      	ldr	r3, [pc, #180]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008b7c:	482b      	ldr	r0, [pc, #172]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008b7e:	f7fc f89d 	bl	8004cbc <HAL_TIM_Base_Init>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8008b88:	f7ff f8da 	bl	8007d40 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8008b8c:	4827      	ldr	r0, [pc, #156]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008b8e:	f7fc f906 	bl	8004d9e <HAL_TIM_IC_Init>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8008b98:	f7ff f8d2 	bl	8007d40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8008ba0:	2350      	movs	r3, #80	; 0x50
 8008ba2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8008bac:	f107 031c 	add.w	r3, r7, #28
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	481e      	ldr	r0, [pc, #120]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008bb4:	f7fc fbc5 	bl	8005342 <HAL_TIM_SlaveConfigSynchronization>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8008bbe:	f7ff f8bf 	bl	8007d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008bca:	f107 0310 	add.w	r3, r7, #16
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4816      	ldr	r0, [pc, #88]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008bd2:	f7fc ff1f 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8008bdc:	f7ff f8b0 	bl	8007d40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008be0:	2300      	movs	r3, #0
 8008be2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008be4:	2301      	movs	r3, #1
 8008be6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008bf0:	463b      	mov	r3, r7
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	480d      	ldr	r0, [pc, #52]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008bf8:	f7fc fa25 	bl	8005046 <HAL_TIM_IC_ConfigChannel>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8008c02:	f7ff f89d 	bl	8007d40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8008c06:	2302      	movs	r3, #2
 8008c08:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8008c0e:	463b      	mov	r3, r7
 8008c10:	2204      	movs	r2, #4
 8008c12:	4619      	mov	r1, r3
 8008c14:	4805      	ldr	r0, [pc, #20]	; (8008c2c <MX_TIM3_Init+0x104>)
 8008c16:	f7fc fa16 	bl	8005046 <HAL_TIM_IC_ConfigChannel>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8008c20:	f7ff f88e 	bl	8007d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008c24:	bf00      	nop
 8008c26:	3730      	adds	r7, #48	; 0x30
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20000ae4 	.word	0x20000ae4
 8008c30:	40000400 	.word	0x40000400

08008c34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c3a:	f107 0310 	add.w	r3, r7, #16
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	605a      	str	r2, [r3, #4]
 8008c44:	609a      	str	r2, [r3, #8]
 8008c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c48:	1d3b      	adds	r3, r7, #4
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	605a      	str	r2, [r3, #4]
 8008c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008c52:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <MX_TIM4_Init+0x94>)
 8008c54:	4a1d      	ldr	r2, [pc, #116]	; (8008ccc <MX_TIM4_Init+0x98>)
 8008c56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8008c58:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <MX_TIM4_Init+0x94>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	; (8008cc8 <MX_TIM4_Init+0x94>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8008c64:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <MX_TIM4_Init+0x94>)
 8008c66:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8008c6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c6c:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <MX_TIM4_Init+0x94>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <MX_TIM4_Init+0x94>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008c78:	4813      	ldr	r0, [pc, #76]	; (8008cc8 <MX_TIM4_Init+0x94>)
 8008c7a:	f7fc f81f 	bl	8004cbc <HAL_TIM_Base_Init>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8008c84:	f7ff f85c 	bl	8007d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008c8e:	f107 0310 	add.w	r3, r7, #16
 8008c92:	4619      	mov	r1, r3
 8008c94:	480c      	ldr	r0, [pc, #48]	; (8008cc8 <MX_TIM4_Init+0x94>)
 8008c96:	f7fc fa72 	bl	800517e <HAL_TIM_ConfigClockSource>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8008ca0:	f7ff f84e 	bl	8007d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008cac:	1d3b      	adds	r3, r7, #4
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <MX_TIM4_Init+0x94>)
 8008cb2:	f7fc feaf 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8008cbc:	f7ff f840 	bl	8007d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8008cc0:	bf00      	nop
 8008cc2:	3720      	adds	r7, #32
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	20000a98 	.word	0x20000a98
 8008ccc:	40000800 	.word	0x40000800

08008cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008cd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008cd6:	e003      	b.n	8008ce0 <LoopCopyDataInit>

08008cd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008cd8:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008cda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008cdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008cde:	3104      	adds	r1, #4

08008ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008ce0:	480b      	ldr	r0, [pc, #44]	; (8008d10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008ce2:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008ce4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008ce6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008ce8:	d3f6      	bcc.n	8008cd8 <CopyDataInit>
	ldr	r2, =_sbss
 8008cea:	4a0b      	ldr	r2, [pc, #44]	; (8008d18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008cec:	e002      	b.n	8008cf4 <LoopFillZerobss>

08008cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008cee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008cf0:	f842 3b04 	str.w	r3, [r2], #4

08008cf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008cf4:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <LoopForever+0x16>)
	cmp	r2, r3
 8008cf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008cf8:	d3f9      	bcc.n	8008cee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008cfa:	f7ff fe17 	bl	800892c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008cfe:	f000 f817 	bl	8008d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008d02:	f7fe fbb9 	bl	8007478 <main>

08008d06 <LoopForever>:

LoopForever:
    b LoopForever
 8008d06:	e7fe      	b.n	8008d06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008d08:	2000ffff 	.word	0x2000ffff
	ldr	r3, =_sidata
 8008d0c:	080099a8 	.word	0x080099a8
	ldr	r0, =_sdata
 8008d10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008d14:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8008d18:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8008d1c:	20000b94 	.word	0x20000b94

08008d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008d20:	e7fe      	b.n	8008d20 <ADC1_2_IRQHandler>
	...

08008d24 <__errno>:
 8008d24:	4b01      	ldr	r3, [pc, #4]	; (8008d2c <__errno+0x8>)
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	2000000c 	.word	0x2000000c

08008d30 <__libc_init_array>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	4e0d      	ldr	r6, [pc, #52]	; (8008d68 <__libc_init_array+0x38>)
 8008d34:	4c0d      	ldr	r4, [pc, #52]	; (8008d6c <__libc_init_array+0x3c>)
 8008d36:	1ba4      	subs	r4, r4, r6
 8008d38:	10a4      	asrs	r4, r4, #2
 8008d3a:	2500      	movs	r5, #0
 8008d3c:	42a5      	cmp	r5, r4
 8008d3e:	d109      	bne.n	8008d54 <__libc_init_array+0x24>
 8008d40:	4e0b      	ldr	r6, [pc, #44]	; (8008d70 <__libc_init_array+0x40>)
 8008d42:	4c0c      	ldr	r4, [pc, #48]	; (8008d74 <__libc_init_array+0x44>)
 8008d44:	f000 fc26 	bl	8009594 <_init>
 8008d48:	1ba4      	subs	r4, r4, r6
 8008d4a:	10a4      	asrs	r4, r4, #2
 8008d4c:	2500      	movs	r5, #0
 8008d4e:	42a5      	cmp	r5, r4
 8008d50:	d105      	bne.n	8008d5e <__libc_init_array+0x2e>
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d58:	4798      	blx	r3
 8008d5a:	3501      	adds	r5, #1
 8008d5c:	e7ee      	b.n	8008d3c <__libc_init_array+0xc>
 8008d5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d62:	4798      	blx	r3
 8008d64:	3501      	adds	r5, #1
 8008d66:	e7f2      	b.n	8008d4e <__libc_init_array+0x1e>
 8008d68:	080099a0 	.word	0x080099a0
 8008d6c:	080099a0 	.word	0x080099a0
 8008d70:	080099a0 	.word	0x080099a0
 8008d74:	080099a4 	.word	0x080099a4

08008d78 <memset>:
 8008d78:	4402      	add	r2, r0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d100      	bne.n	8008d82 <memset+0xa>
 8008d80:	4770      	bx	lr
 8008d82:	f803 1b01 	strb.w	r1, [r3], #1
 8008d86:	e7f9      	b.n	8008d7c <memset+0x4>

08008d88 <siprintf>:
 8008d88:	b40e      	push	{r1, r2, r3}
 8008d8a:	b500      	push	{lr}
 8008d8c:	b09c      	sub	sp, #112	; 0x70
 8008d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d90:	9002      	str	r0, [sp, #8]
 8008d92:	9006      	str	r0, [sp, #24]
 8008d94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d98:	4809      	ldr	r0, [pc, #36]	; (8008dc0 <siprintf+0x38>)
 8008d9a:	9107      	str	r1, [sp, #28]
 8008d9c:	9104      	str	r1, [sp, #16]
 8008d9e:	4909      	ldr	r1, [pc, #36]	; (8008dc4 <siprintf+0x3c>)
 8008da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da4:	9105      	str	r1, [sp, #20]
 8008da6:	6800      	ldr	r0, [r0, #0]
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	a902      	add	r1, sp, #8
 8008dac:	f000 f866 	bl	8008e7c <_svfiprintf_r>
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	2200      	movs	r2, #0
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	b01c      	add	sp, #112	; 0x70
 8008db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dbc:	b003      	add	sp, #12
 8008dbe:	4770      	bx	lr
 8008dc0:	2000000c 	.word	0x2000000c
 8008dc4:	ffff0208 	.word	0xffff0208

08008dc8 <__ssputs_r>:
 8008dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dcc:	688e      	ldr	r6, [r1, #8]
 8008dce:	429e      	cmp	r6, r3
 8008dd0:	4682      	mov	sl, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	4690      	mov	r8, r2
 8008dd6:	4699      	mov	r9, r3
 8008dd8:	d837      	bhi.n	8008e4a <__ssputs_r+0x82>
 8008dda:	898a      	ldrh	r2, [r1, #12]
 8008ddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008de0:	d031      	beq.n	8008e46 <__ssputs_r+0x7e>
 8008de2:	6825      	ldr	r5, [r4, #0]
 8008de4:	6909      	ldr	r1, [r1, #16]
 8008de6:	1a6f      	subs	r7, r5, r1
 8008de8:	6965      	ldr	r5, [r4, #20]
 8008dea:	2302      	movs	r3, #2
 8008dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008df0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008df4:	f109 0301 	add.w	r3, r9, #1
 8008df8:	443b      	add	r3, r7
 8008dfa:	429d      	cmp	r5, r3
 8008dfc:	bf38      	it	cc
 8008dfe:	461d      	movcc	r5, r3
 8008e00:	0553      	lsls	r3, r2, #21
 8008e02:	d530      	bpl.n	8008e66 <__ssputs_r+0x9e>
 8008e04:	4629      	mov	r1, r5
 8008e06:	f000 fb2b 	bl	8009460 <_malloc_r>
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	b950      	cbnz	r0, 8008e24 <__ssputs_r+0x5c>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	f8ca 3000 	str.w	r3, [sl]
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e24:	463a      	mov	r2, r7
 8008e26:	6921      	ldr	r1, [r4, #16]
 8008e28:	f000 faa8 	bl	800937c <memcpy>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e36:	81a3      	strh	r3, [r4, #12]
 8008e38:	6126      	str	r6, [r4, #16]
 8008e3a:	6165      	str	r5, [r4, #20]
 8008e3c:	443e      	add	r6, r7
 8008e3e:	1bed      	subs	r5, r5, r7
 8008e40:	6026      	str	r6, [r4, #0]
 8008e42:	60a5      	str	r5, [r4, #8]
 8008e44:	464e      	mov	r6, r9
 8008e46:	454e      	cmp	r6, r9
 8008e48:	d900      	bls.n	8008e4c <__ssputs_r+0x84>
 8008e4a:	464e      	mov	r6, r9
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	4641      	mov	r1, r8
 8008e50:	6820      	ldr	r0, [r4, #0]
 8008e52:	f000 fa9e 	bl	8009392 <memmove>
 8008e56:	68a3      	ldr	r3, [r4, #8]
 8008e58:	1b9b      	subs	r3, r3, r6
 8008e5a:	60a3      	str	r3, [r4, #8]
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	441e      	add	r6, r3
 8008e60:	6026      	str	r6, [r4, #0]
 8008e62:	2000      	movs	r0, #0
 8008e64:	e7dc      	b.n	8008e20 <__ssputs_r+0x58>
 8008e66:	462a      	mov	r2, r5
 8008e68:	f000 fb54 	bl	8009514 <_realloc_r>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d1e2      	bne.n	8008e38 <__ssputs_r+0x70>
 8008e72:	6921      	ldr	r1, [r4, #16]
 8008e74:	4650      	mov	r0, sl
 8008e76:	f000 faa5 	bl	80093c4 <_free_r>
 8008e7a:	e7c8      	b.n	8008e0e <__ssputs_r+0x46>

08008e7c <_svfiprintf_r>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	461d      	mov	r5, r3
 8008e82:	898b      	ldrh	r3, [r1, #12]
 8008e84:	061f      	lsls	r7, r3, #24
 8008e86:	b09d      	sub	sp, #116	; 0x74
 8008e88:	4680      	mov	r8, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	d50f      	bpl.n	8008eb0 <_svfiprintf_r+0x34>
 8008e90:	690b      	ldr	r3, [r1, #16]
 8008e92:	b96b      	cbnz	r3, 8008eb0 <_svfiprintf_r+0x34>
 8008e94:	2140      	movs	r1, #64	; 0x40
 8008e96:	f000 fae3 	bl	8009460 <_malloc_r>
 8008e9a:	6020      	str	r0, [r4, #0]
 8008e9c:	6120      	str	r0, [r4, #16]
 8008e9e:	b928      	cbnz	r0, 8008eac <_svfiprintf_r+0x30>
 8008ea0:	230c      	movs	r3, #12
 8008ea2:	f8c8 3000 	str.w	r3, [r8]
 8008ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eaa:	e0c8      	b.n	800903e <_svfiprintf_r+0x1c2>
 8008eac:	2340      	movs	r3, #64	; 0x40
 8008eae:	6163      	str	r3, [r4, #20]
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eba:	2330      	movs	r3, #48	; 0x30
 8008ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ec0:	9503      	str	r5, [sp, #12]
 8008ec2:	f04f 0b01 	mov.w	fp, #1
 8008ec6:	4637      	mov	r7, r6
 8008ec8:	463d      	mov	r5, r7
 8008eca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ece:	b10b      	cbz	r3, 8008ed4 <_svfiprintf_r+0x58>
 8008ed0:	2b25      	cmp	r3, #37	; 0x25
 8008ed2:	d13e      	bne.n	8008f52 <_svfiprintf_r+0xd6>
 8008ed4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ed8:	d00b      	beq.n	8008ef2 <_svfiprintf_r+0x76>
 8008eda:	4653      	mov	r3, sl
 8008edc:	4632      	mov	r2, r6
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	f7ff ff71 	bl	8008dc8 <__ssputs_r>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f000 80a4 	beq.w	8009034 <_svfiprintf_r+0x1b8>
 8008eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eee:	4453      	add	r3, sl
 8008ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef2:	783b      	ldrb	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 809d 	beq.w	8009034 <_svfiprintf_r+0x1b8>
 8008efa:	2300      	movs	r3, #0
 8008efc:	f04f 32ff 	mov.w	r2, #4294967295
 8008f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	9307      	str	r3, [sp, #28]
 8008f08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f0c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f0e:	462f      	mov	r7, r5
 8008f10:	2205      	movs	r2, #5
 8008f12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008f16:	4850      	ldr	r0, [pc, #320]	; (8009058 <_svfiprintf_r+0x1dc>)
 8008f18:	f7f7 f96a 	bl	80001f0 <memchr>
 8008f1c:	9b04      	ldr	r3, [sp, #16]
 8008f1e:	b9d0      	cbnz	r0, 8008f56 <_svfiprintf_r+0xda>
 8008f20:	06d9      	lsls	r1, r3, #27
 8008f22:	bf44      	itt	mi
 8008f24:	2220      	movmi	r2, #32
 8008f26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f2a:	071a      	lsls	r2, r3, #28
 8008f2c:	bf44      	itt	mi
 8008f2e:	222b      	movmi	r2, #43	; 0x2b
 8008f30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f34:	782a      	ldrb	r2, [r5, #0]
 8008f36:	2a2a      	cmp	r2, #42	; 0x2a
 8008f38:	d015      	beq.n	8008f66 <_svfiprintf_r+0xea>
 8008f3a:	9a07      	ldr	r2, [sp, #28]
 8008f3c:	462f      	mov	r7, r5
 8008f3e:	2000      	movs	r0, #0
 8008f40:	250a      	movs	r5, #10
 8008f42:	4639      	mov	r1, r7
 8008f44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f48:	3b30      	subs	r3, #48	; 0x30
 8008f4a:	2b09      	cmp	r3, #9
 8008f4c:	d94d      	bls.n	8008fea <_svfiprintf_r+0x16e>
 8008f4e:	b1b8      	cbz	r0, 8008f80 <_svfiprintf_r+0x104>
 8008f50:	e00f      	b.n	8008f72 <_svfiprintf_r+0xf6>
 8008f52:	462f      	mov	r7, r5
 8008f54:	e7b8      	b.n	8008ec8 <_svfiprintf_r+0x4c>
 8008f56:	4a40      	ldr	r2, [pc, #256]	; (8009058 <_svfiprintf_r+0x1dc>)
 8008f58:	1a80      	subs	r0, r0, r2
 8008f5a:	fa0b f000 	lsl.w	r0, fp, r0
 8008f5e:	4318      	orrs	r0, r3
 8008f60:	9004      	str	r0, [sp, #16]
 8008f62:	463d      	mov	r5, r7
 8008f64:	e7d3      	b.n	8008f0e <_svfiprintf_r+0x92>
 8008f66:	9a03      	ldr	r2, [sp, #12]
 8008f68:	1d11      	adds	r1, r2, #4
 8008f6a:	6812      	ldr	r2, [r2, #0]
 8008f6c:	9103      	str	r1, [sp, #12]
 8008f6e:	2a00      	cmp	r2, #0
 8008f70:	db01      	blt.n	8008f76 <_svfiprintf_r+0xfa>
 8008f72:	9207      	str	r2, [sp, #28]
 8008f74:	e004      	b.n	8008f80 <_svfiprintf_r+0x104>
 8008f76:	4252      	negs	r2, r2
 8008f78:	f043 0302 	orr.w	r3, r3, #2
 8008f7c:	9207      	str	r2, [sp, #28]
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	783b      	ldrb	r3, [r7, #0]
 8008f82:	2b2e      	cmp	r3, #46	; 0x2e
 8008f84:	d10c      	bne.n	8008fa0 <_svfiprintf_r+0x124>
 8008f86:	787b      	ldrb	r3, [r7, #1]
 8008f88:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8a:	d133      	bne.n	8008ff4 <_svfiprintf_r+0x178>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	1d1a      	adds	r2, r3, #4
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	9203      	str	r2, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfb8      	it	lt
 8008f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f9c:	3702      	adds	r7, #2
 8008f9e:	9305      	str	r3, [sp, #20]
 8008fa0:	4d2e      	ldr	r5, [pc, #184]	; (800905c <_svfiprintf_r+0x1e0>)
 8008fa2:	7839      	ldrb	r1, [r7, #0]
 8008fa4:	2203      	movs	r2, #3
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f7f7 f922 	bl	80001f0 <memchr>
 8008fac:	b138      	cbz	r0, 8008fbe <_svfiprintf_r+0x142>
 8008fae:	2340      	movs	r3, #64	; 0x40
 8008fb0:	1b40      	subs	r0, r0, r5
 8008fb2:	fa03 f000 	lsl.w	r0, r3, r0
 8008fb6:	9b04      	ldr	r3, [sp, #16]
 8008fb8:	4303      	orrs	r3, r0
 8008fba:	3701      	adds	r7, #1
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	7839      	ldrb	r1, [r7, #0]
 8008fc0:	4827      	ldr	r0, [pc, #156]	; (8009060 <_svfiprintf_r+0x1e4>)
 8008fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fc6:	2206      	movs	r2, #6
 8008fc8:	1c7e      	adds	r6, r7, #1
 8008fca:	f7f7 f911 	bl	80001f0 <memchr>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d038      	beq.n	8009044 <_svfiprintf_r+0x1c8>
 8008fd2:	4b24      	ldr	r3, [pc, #144]	; (8009064 <_svfiprintf_r+0x1e8>)
 8008fd4:	bb13      	cbnz	r3, 800901c <_svfiprintf_r+0x1a0>
 8008fd6:	9b03      	ldr	r3, [sp, #12]
 8008fd8:	3307      	adds	r3, #7
 8008fda:	f023 0307 	bic.w	r3, r3, #7
 8008fde:	3308      	adds	r3, #8
 8008fe0:	9303      	str	r3, [sp, #12]
 8008fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe4:	444b      	add	r3, r9
 8008fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe8:	e76d      	b.n	8008ec6 <_svfiprintf_r+0x4a>
 8008fea:	fb05 3202 	mla	r2, r5, r2, r3
 8008fee:	2001      	movs	r0, #1
 8008ff0:	460f      	mov	r7, r1
 8008ff2:	e7a6      	b.n	8008f42 <_svfiprintf_r+0xc6>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	3701      	adds	r7, #1
 8008ff8:	9305      	str	r3, [sp, #20]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	250a      	movs	r5, #10
 8008ffe:	4638      	mov	r0, r7
 8009000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009004:	3a30      	subs	r2, #48	; 0x30
 8009006:	2a09      	cmp	r2, #9
 8009008:	d903      	bls.n	8009012 <_svfiprintf_r+0x196>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c8      	beq.n	8008fa0 <_svfiprintf_r+0x124>
 800900e:	9105      	str	r1, [sp, #20]
 8009010:	e7c6      	b.n	8008fa0 <_svfiprintf_r+0x124>
 8009012:	fb05 2101 	mla	r1, r5, r1, r2
 8009016:	2301      	movs	r3, #1
 8009018:	4607      	mov	r7, r0
 800901a:	e7f0      	b.n	8008ffe <_svfiprintf_r+0x182>
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	4622      	mov	r2, r4
 8009022:	4b11      	ldr	r3, [pc, #68]	; (8009068 <_svfiprintf_r+0x1ec>)
 8009024:	a904      	add	r1, sp, #16
 8009026:	4640      	mov	r0, r8
 8009028:	f3af 8000 	nop.w
 800902c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009030:	4681      	mov	r9, r0
 8009032:	d1d6      	bne.n	8008fe2 <_svfiprintf_r+0x166>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	065b      	lsls	r3, r3, #25
 8009038:	f53f af35 	bmi.w	8008ea6 <_svfiprintf_r+0x2a>
 800903c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800903e:	b01d      	add	sp, #116	; 0x74
 8009040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009044:	ab03      	add	r3, sp, #12
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	4622      	mov	r2, r4
 800904a:	4b07      	ldr	r3, [pc, #28]	; (8009068 <_svfiprintf_r+0x1ec>)
 800904c:	a904      	add	r1, sp, #16
 800904e:	4640      	mov	r0, r8
 8009050:	f000 f882 	bl	8009158 <_printf_i>
 8009054:	e7ea      	b.n	800902c <_svfiprintf_r+0x1b0>
 8009056:	bf00      	nop
 8009058:	0800996c 	.word	0x0800996c
 800905c:	08009972 	.word	0x08009972
 8009060:	08009976 	.word	0x08009976
 8009064:	00000000 	.word	0x00000000
 8009068:	08008dc9 	.word	0x08008dc9

0800906c <_printf_common>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	4691      	mov	r9, r2
 8009072:	461f      	mov	r7, r3
 8009074:	688a      	ldr	r2, [r1, #8]
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800907c:	4293      	cmp	r3, r2
 800907e:	bfb8      	it	lt
 8009080:	4613      	movlt	r3, r2
 8009082:	f8c9 3000 	str.w	r3, [r9]
 8009086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800908a:	4606      	mov	r6, r0
 800908c:	460c      	mov	r4, r1
 800908e:	b112      	cbz	r2, 8009096 <_printf_common+0x2a>
 8009090:	3301      	adds	r3, #1
 8009092:	f8c9 3000 	str.w	r3, [r9]
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	0699      	lsls	r1, r3, #26
 800909a:	bf42      	ittt	mi
 800909c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80090a0:	3302      	addmi	r3, #2
 80090a2:	f8c9 3000 	strmi.w	r3, [r9]
 80090a6:	6825      	ldr	r5, [r4, #0]
 80090a8:	f015 0506 	ands.w	r5, r5, #6
 80090ac:	d107      	bne.n	80090be <_printf_common+0x52>
 80090ae:	f104 0a19 	add.w	sl, r4, #25
 80090b2:	68e3      	ldr	r3, [r4, #12]
 80090b4:	f8d9 2000 	ldr.w	r2, [r9]
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	42ab      	cmp	r3, r5
 80090bc:	dc28      	bgt.n	8009110 <_printf_common+0xa4>
 80090be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80090c2:	6822      	ldr	r2, [r4, #0]
 80090c4:	3300      	adds	r3, #0
 80090c6:	bf18      	it	ne
 80090c8:	2301      	movne	r3, #1
 80090ca:	0692      	lsls	r2, r2, #26
 80090cc:	d42d      	bmi.n	800912a <_printf_common+0xbe>
 80090ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090d2:	4639      	mov	r1, r7
 80090d4:	4630      	mov	r0, r6
 80090d6:	47c0      	blx	r8
 80090d8:	3001      	adds	r0, #1
 80090da:	d020      	beq.n	800911e <_printf_common+0xb2>
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	68e5      	ldr	r5, [r4, #12]
 80090e0:	f8d9 2000 	ldr.w	r2, [r9]
 80090e4:	f003 0306 	and.w	r3, r3, #6
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	bf08      	it	eq
 80090ec:	1aad      	subeq	r5, r5, r2
 80090ee:	68a3      	ldr	r3, [r4, #8]
 80090f0:	6922      	ldr	r2, [r4, #16]
 80090f2:	bf0c      	ite	eq
 80090f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090f8:	2500      	movne	r5, #0
 80090fa:	4293      	cmp	r3, r2
 80090fc:	bfc4      	itt	gt
 80090fe:	1a9b      	subgt	r3, r3, r2
 8009100:	18ed      	addgt	r5, r5, r3
 8009102:	f04f 0900 	mov.w	r9, #0
 8009106:	341a      	adds	r4, #26
 8009108:	454d      	cmp	r5, r9
 800910a:	d11a      	bne.n	8009142 <_printf_common+0xd6>
 800910c:	2000      	movs	r0, #0
 800910e:	e008      	b.n	8009122 <_printf_common+0xb6>
 8009110:	2301      	movs	r3, #1
 8009112:	4652      	mov	r2, sl
 8009114:	4639      	mov	r1, r7
 8009116:	4630      	mov	r0, r6
 8009118:	47c0      	blx	r8
 800911a:	3001      	adds	r0, #1
 800911c:	d103      	bne.n	8009126 <_printf_common+0xba>
 800911e:	f04f 30ff 	mov.w	r0, #4294967295
 8009122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009126:	3501      	adds	r5, #1
 8009128:	e7c3      	b.n	80090b2 <_printf_common+0x46>
 800912a:	18e1      	adds	r1, r4, r3
 800912c:	1c5a      	adds	r2, r3, #1
 800912e:	2030      	movs	r0, #48	; 0x30
 8009130:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009134:	4422      	add	r2, r4
 8009136:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800913a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800913e:	3302      	adds	r3, #2
 8009140:	e7c5      	b.n	80090ce <_printf_common+0x62>
 8009142:	2301      	movs	r3, #1
 8009144:	4622      	mov	r2, r4
 8009146:	4639      	mov	r1, r7
 8009148:	4630      	mov	r0, r6
 800914a:	47c0      	blx	r8
 800914c:	3001      	adds	r0, #1
 800914e:	d0e6      	beq.n	800911e <_printf_common+0xb2>
 8009150:	f109 0901 	add.w	r9, r9, #1
 8009154:	e7d8      	b.n	8009108 <_printf_common+0x9c>
	...

08009158 <_printf_i>:
 8009158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800915c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009160:	460c      	mov	r4, r1
 8009162:	7e09      	ldrb	r1, [r1, #24]
 8009164:	b085      	sub	sp, #20
 8009166:	296e      	cmp	r1, #110	; 0x6e
 8009168:	4617      	mov	r7, r2
 800916a:	4606      	mov	r6, r0
 800916c:	4698      	mov	r8, r3
 800916e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009170:	f000 80b3 	beq.w	80092da <_printf_i+0x182>
 8009174:	d822      	bhi.n	80091bc <_printf_i+0x64>
 8009176:	2963      	cmp	r1, #99	; 0x63
 8009178:	d036      	beq.n	80091e8 <_printf_i+0x90>
 800917a:	d80a      	bhi.n	8009192 <_printf_i+0x3a>
 800917c:	2900      	cmp	r1, #0
 800917e:	f000 80b9 	beq.w	80092f4 <_printf_i+0x19c>
 8009182:	2958      	cmp	r1, #88	; 0x58
 8009184:	f000 8083 	beq.w	800928e <_printf_i+0x136>
 8009188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800918c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009190:	e032      	b.n	80091f8 <_printf_i+0xa0>
 8009192:	2964      	cmp	r1, #100	; 0x64
 8009194:	d001      	beq.n	800919a <_printf_i+0x42>
 8009196:	2969      	cmp	r1, #105	; 0x69
 8009198:	d1f6      	bne.n	8009188 <_printf_i+0x30>
 800919a:	6820      	ldr	r0, [r4, #0]
 800919c:	6813      	ldr	r3, [r2, #0]
 800919e:	0605      	lsls	r5, r0, #24
 80091a0:	f103 0104 	add.w	r1, r3, #4
 80091a4:	d52a      	bpl.n	80091fc <_printf_i+0xa4>
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6011      	str	r1, [r2, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da03      	bge.n	80091b6 <_printf_i+0x5e>
 80091ae:	222d      	movs	r2, #45	; 0x2d
 80091b0:	425b      	negs	r3, r3
 80091b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80091b6:	486f      	ldr	r0, [pc, #444]	; (8009374 <_printf_i+0x21c>)
 80091b8:	220a      	movs	r2, #10
 80091ba:	e039      	b.n	8009230 <_printf_i+0xd8>
 80091bc:	2973      	cmp	r1, #115	; 0x73
 80091be:	f000 809d 	beq.w	80092fc <_printf_i+0x1a4>
 80091c2:	d808      	bhi.n	80091d6 <_printf_i+0x7e>
 80091c4:	296f      	cmp	r1, #111	; 0x6f
 80091c6:	d020      	beq.n	800920a <_printf_i+0xb2>
 80091c8:	2970      	cmp	r1, #112	; 0x70
 80091ca:	d1dd      	bne.n	8009188 <_printf_i+0x30>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	f043 0320 	orr.w	r3, r3, #32
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	e003      	b.n	80091de <_printf_i+0x86>
 80091d6:	2975      	cmp	r1, #117	; 0x75
 80091d8:	d017      	beq.n	800920a <_printf_i+0xb2>
 80091da:	2978      	cmp	r1, #120	; 0x78
 80091dc:	d1d4      	bne.n	8009188 <_printf_i+0x30>
 80091de:	2378      	movs	r3, #120	; 0x78
 80091e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091e4:	4864      	ldr	r0, [pc, #400]	; (8009378 <_printf_i+0x220>)
 80091e6:	e055      	b.n	8009294 <_printf_i+0x13c>
 80091e8:	6813      	ldr	r3, [r2, #0]
 80091ea:	1d19      	adds	r1, r3, #4
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6011      	str	r1, [r2, #0]
 80091f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091f8:	2301      	movs	r3, #1
 80091fa:	e08c      	b.n	8009316 <_printf_i+0x1be>
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6011      	str	r1, [r2, #0]
 8009200:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009204:	bf18      	it	ne
 8009206:	b21b      	sxthne	r3, r3
 8009208:	e7cf      	b.n	80091aa <_printf_i+0x52>
 800920a:	6813      	ldr	r3, [r2, #0]
 800920c:	6825      	ldr	r5, [r4, #0]
 800920e:	1d18      	adds	r0, r3, #4
 8009210:	6010      	str	r0, [r2, #0]
 8009212:	0628      	lsls	r0, r5, #24
 8009214:	d501      	bpl.n	800921a <_printf_i+0xc2>
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	e002      	b.n	8009220 <_printf_i+0xc8>
 800921a:	0668      	lsls	r0, r5, #25
 800921c:	d5fb      	bpl.n	8009216 <_printf_i+0xbe>
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	4854      	ldr	r0, [pc, #336]	; (8009374 <_printf_i+0x21c>)
 8009222:	296f      	cmp	r1, #111	; 0x6f
 8009224:	bf14      	ite	ne
 8009226:	220a      	movne	r2, #10
 8009228:	2208      	moveq	r2, #8
 800922a:	2100      	movs	r1, #0
 800922c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009230:	6865      	ldr	r5, [r4, #4]
 8009232:	60a5      	str	r5, [r4, #8]
 8009234:	2d00      	cmp	r5, #0
 8009236:	f2c0 8095 	blt.w	8009364 <_printf_i+0x20c>
 800923a:	6821      	ldr	r1, [r4, #0]
 800923c:	f021 0104 	bic.w	r1, r1, #4
 8009240:	6021      	str	r1, [r4, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d13d      	bne.n	80092c2 <_printf_i+0x16a>
 8009246:	2d00      	cmp	r5, #0
 8009248:	f040 808e 	bne.w	8009368 <_printf_i+0x210>
 800924c:	4665      	mov	r5, ip
 800924e:	2a08      	cmp	r2, #8
 8009250:	d10b      	bne.n	800926a <_printf_i+0x112>
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	07db      	lsls	r3, r3, #31
 8009256:	d508      	bpl.n	800926a <_printf_i+0x112>
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	6862      	ldr	r2, [r4, #4]
 800925c:	429a      	cmp	r2, r3
 800925e:	bfde      	ittt	le
 8009260:	2330      	movle	r3, #48	; 0x30
 8009262:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009266:	f105 35ff 	addle.w	r5, r5, #4294967295
 800926a:	ebac 0305 	sub.w	r3, ip, r5
 800926e:	6123      	str	r3, [r4, #16]
 8009270:	f8cd 8000 	str.w	r8, [sp]
 8009274:	463b      	mov	r3, r7
 8009276:	aa03      	add	r2, sp, #12
 8009278:	4621      	mov	r1, r4
 800927a:	4630      	mov	r0, r6
 800927c:	f7ff fef6 	bl	800906c <_printf_common>
 8009280:	3001      	adds	r0, #1
 8009282:	d14d      	bne.n	8009320 <_printf_i+0x1c8>
 8009284:	f04f 30ff 	mov.w	r0, #4294967295
 8009288:	b005      	add	sp, #20
 800928a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800928e:	4839      	ldr	r0, [pc, #228]	; (8009374 <_printf_i+0x21c>)
 8009290:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009294:	6813      	ldr	r3, [r2, #0]
 8009296:	6821      	ldr	r1, [r4, #0]
 8009298:	1d1d      	adds	r5, r3, #4
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6015      	str	r5, [r2, #0]
 800929e:	060a      	lsls	r2, r1, #24
 80092a0:	d50b      	bpl.n	80092ba <_printf_i+0x162>
 80092a2:	07ca      	lsls	r2, r1, #31
 80092a4:	bf44      	itt	mi
 80092a6:	f041 0120 	orrmi.w	r1, r1, #32
 80092aa:	6021      	strmi	r1, [r4, #0]
 80092ac:	b91b      	cbnz	r3, 80092b6 <_printf_i+0x15e>
 80092ae:	6822      	ldr	r2, [r4, #0]
 80092b0:	f022 0220 	bic.w	r2, r2, #32
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	2210      	movs	r2, #16
 80092b8:	e7b7      	b.n	800922a <_printf_i+0xd2>
 80092ba:	064d      	lsls	r5, r1, #25
 80092bc:	bf48      	it	mi
 80092be:	b29b      	uxthmi	r3, r3
 80092c0:	e7ef      	b.n	80092a2 <_printf_i+0x14a>
 80092c2:	4665      	mov	r5, ip
 80092c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80092c8:	fb02 3311 	mls	r3, r2, r1, r3
 80092cc:	5cc3      	ldrb	r3, [r0, r3]
 80092ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80092d2:	460b      	mov	r3, r1
 80092d4:	2900      	cmp	r1, #0
 80092d6:	d1f5      	bne.n	80092c4 <_printf_i+0x16c>
 80092d8:	e7b9      	b.n	800924e <_printf_i+0xf6>
 80092da:	6813      	ldr	r3, [r2, #0]
 80092dc:	6825      	ldr	r5, [r4, #0]
 80092de:	6961      	ldr	r1, [r4, #20]
 80092e0:	1d18      	adds	r0, r3, #4
 80092e2:	6010      	str	r0, [r2, #0]
 80092e4:	0628      	lsls	r0, r5, #24
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	d501      	bpl.n	80092ee <_printf_i+0x196>
 80092ea:	6019      	str	r1, [r3, #0]
 80092ec:	e002      	b.n	80092f4 <_printf_i+0x19c>
 80092ee:	066a      	lsls	r2, r5, #25
 80092f0:	d5fb      	bpl.n	80092ea <_printf_i+0x192>
 80092f2:	8019      	strh	r1, [r3, #0]
 80092f4:	2300      	movs	r3, #0
 80092f6:	6123      	str	r3, [r4, #16]
 80092f8:	4665      	mov	r5, ip
 80092fa:	e7b9      	b.n	8009270 <_printf_i+0x118>
 80092fc:	6813      	ldr	r3, [r2, #0]
 80092fe:	1d19      	adds	r1, r3, #4
 8009300:	6011      	str	r1, [r2, #0]
 8009302:	681d      	ldr	r5, [r3, #0]
 8009304:	6862      	ldr	r2, [r4, #4]
 8009306:	2100      	movs	r1, #0
 8009308:	4628      	mov	r0, r5
 800930a:	f7f6 ff71 	bl	80001f0 <memchr>
 800930e:	b108      	cbz	r0, 8009314 <_printf_i+0x1bc>
 8009310:	1b40      	subs	r0, r0, r5
 8009312:	6060      	str	r0, [r4, #4]
 8009314:	6863      	ldr	r3, [r4, #4]
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	2300      	movs	r3, #0
 800931a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800931e:	e7a7      	b.n	8009270 <_printf_i+0x118>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	462a      	mov	r2, r5
 8009324:	4639      	mov	r1, r7
 8009326:	4630      	mov	r0, r6
 8009328:	47c0      	blx	r8
 800932a:	3001      	adds	r0, #1
 800932c:	d0aa      	beq.n	8009284 <_printf_i+0x12c>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	079b      	lsls	r3, r3, #30
 8009332:	d413      	bmi.n	800935c <_printf_i+0x204>
 8009334:	68e0      	ldr	r0, [r4, #12]
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	4298      	cmp	r0, r3
 800933a:	bfb8      	it	lt
 800933c:	4618      	movlt	r0, r3
 800933e:	e7a3      	b.n	8009288 <_printf_i+0x130>
 8009340:	2301      	movs	r3, #1
 8009342:	464a      	mov	r2, r9
 8009344:	4639      	mov	r1, r7
 8009346:	4630      	mov	r0, r6
 8009348:	47c0      	blx	r8
 800934a:	3001      	adds	r0, #1
 800934c:	d09a      	beq.n	8009284 <_printf_i+0x12c>
 800934e:	3501      	adds	r5, #1
 8009350:	68e3      	ldr	r3, [r4, #12]
 8009352:	9a03      	ldr	r2, [sp, #12]
 8009354:	1a9b      	subs	r3, r3, r2
 8009356:	42ab      	cmp	r3, r5
 8009358:	dcf2      	bgt.n	8009340 <_printf_i+0x1e8>
 800935a:	e7eb      	b.n	8009334 <_printf_i+0x1dc>
 800935c:	2500      	movs	r5, #0
 800935e:	f104 0919 	add.w	r9, r4, #25
 8009362:	e7f5      	b.n	8009350 <_printf_i+0x1f8>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1ac      	bne.n	80092c2 <_printf_i+0x16a>
 8009368:	7803      	ldrb	r3, [r0, #0]
 800936a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800936e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009372:	e76c      	b.n	800924e <_printf_i+0xf6>
 8009374:	0800997d 	.word	0x0800997d
 8009378:	0800998e 	.word	0x0800998e

0800937c <memcpy>:
 800937c:	b510      	push	{r4, lr}
 800937e:	1e43      	subs	r3, r0, #1
 8009380:	440a      	add	r2, r1
 8009382:	4291      	cmp	r1, r2
 8009384:	d100      	bne.n	8009388 <memcpy+0xc>
 8009386:	bd10      	pop	{r4, pc}
 8009388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800938c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009390:	e7f7      	b.n	8009382 <memcpy+0x6>

08009392 <memmove>:
 8009392:	4288      	cmp	r0, r1
 8009394:	b510      	push	{r4, lr}
 8009396:	eb01 0302 	add.w	r3, r1, r2
 800939a:	d807      	bhi.n	80093ac <memmove+0x1a>
 800939c:	1e42      	subs	r2, r0, #1
 800939e:	4299      	cmp	r1, r3
 80093a0:	d00a      	beq.n	80093b8 <memmove+0x26>
 80093a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80093aa:	e7f8      	b.n	800939e <memmove+0xc>
 80093ac:	4283      	cmp	r3, r0
 80093ae:	d9f5      	bls.n	800939c <memmove+0xa>
 80093b0:	1881      	adds	r1, r0, r2
 80093b2:	1ad2      	subs	r2, r2, r3
 80093b4:	42d3      	cmn	r3, r2
 80093b6:	d100      	bne.n	80093ba <memmove+0x28>
 80093b8:	bd10      	pop	{r4, pc}
 80093ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80093c2:	e7f7      	b.n	80093b4 <memmove+0x22>

080093c4 <_free_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4605      	mov	r5, r0
 80093c8:	2900      	cmp	r1, #0
 80093ca:	d045      	beq.n	8009458 <_free_r+0x94>
 80093cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093d0:	1f0c      	subs	r4, r1, #4
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	bfb8      	it	lt
 80093d6:	18e4      	addlt	r4, r4, r3
 80093d8:	f000 f8d2 	bl	8009580 <__malloc_lock>
 80093dc:	4a1f      	ldr	r2, [pc, #124]	; (800945c <_free_r+0x98>)
 80093de:	6813      	ldr	r3, [r2, #0]
 80093e0:	4610      	mov	r0, r2
 80093e2:	b933      	cbnz	r3, 80093f2 <_free_r+0x2e>
 80093e4:	6063      	str	r3, [r4, #4]
 80093e6:	6014      	str	r4, [r2, #0]
 80093e8:	4628      	mov	r0, r5
 80093ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ee:	f000 b8c8 	b.w	8009582 <__malloc_unlock>
 80093f2:	42a3      	cmp	r3, r4
 80093f4:	d90c      	bls.n	8009410 <_free_r+0x4c>
 80093f6:	6821      	ldr	r1, [r4, #0]
 80093f8:	1862      	adds	r2, r4, r1
 80093fa:	4293      	cmp	r3, r2
 80093fc:	bf04      	itt	eq
 80093fe:	681a      	ldreq	r2, [r3, #0]
 8009400:	685b      	ldreq	r3, [r3, #4]
 8009402:	6063      	str	r3, [r4, #4]
 8009404:	bf04      	itt	eq
 8009406:	1852      	addeq	r2, r2, r1
 8009408:	6022      	streq	r2, [r4, #0]
 800940a:	6004      	str	r4, [r0, #0]
 800940c:	e7ec      	b.n	80093e8 <_free_r+0x24>
 800940e:	4613      	mov	r3, r2
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	b10a      	cbz	r2, 8009418 <_free_r+0x54>
 8009414:	42a2      	cmp	r2, r4
 8009416:	d9fa      	bls.n	800940e <_free_r+0x4a>
 8009418:	6819      	ldr	r1, [r3, #0]
 800941a:	1858      	adds	r0, r3, r1
 800941c:	42a0      	cmp	r0, r4
 800941e:	d10b      	bne.n	8009438 <_free_r+0x74>
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	4401      	add	r1, r0
 8009424:	1858      	adds	r0, r3, r1
 8009426:	4282      	cmp	r2, r0
 8009428:	6019      	str	r1, [r3, #0]
 800942a:	d1dd      	bne.n	80093e8 <_free_r+0x24>
 800942c:	6810      	ldr	r0, [r2, #0]
 800942e:	6852      	ldr	r2, [r2, #4]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	4401      	add	r1, r0
 8009434:	6019      	str	r1, [r3, #0]
 8009436:	e7d7      	b.n	80093e8 <_free_r+0x24>
 8009438:	d902      	bls.n	8009440 <_free_r+0x7c>
 800943a:	230c      	movs	r3, #12
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	e7d3      	b.n	80093e8 <_free_r+0x24>
 8009440:	6820      	ldr	r0, [r4, #0]
 8009442:	1821      	adds	r1, r4, r0
 8009444:	428a      	cmp	r2, r1
 8009446:	bf04      	itt	eq
 8009448:	6811      	ldreq	r1, [r2, #0]
 800944a:	6852      	ldreq	r2, [r2, #4]
 800944c:	6062      	str	r2, [r4, #4]
 800944e:	bf04      	itt	eq
 8009450:	1809      	addeq	r1, r1, r0
 8009452:	6021      	streq	r1, [r4, #0]
 8009454:	605c      	str	r4, [r3, #4]
 8009456:	e7c7      	b.n	80093e8 <_free_r+0x24>
 8009458:	bd38      	pop	{r3, r4, r5, pc}
 800945a:	bf00      	nop
 800945c:	200000a0 	.word	0x200000a0

08009460 <_malloc_r>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	1ccd      	adds	r5, r1, #3
 8009464:	f025 0503 	bic.w	r5, r5, #3
 8009468:	3508      	adds	r5, #8
 800946a:	2d0c      	cmp	r5, #12
 800946c:	bf38      	it	cc
 800946e:	250c      	movcc	r5, #12
 8009470:	2d00      	cmp	r5, #0
 8009472:	4606      	mov	r6, r0
 8009474:	db01      	blt.n	800947a <_malloc_r+0x1a>
 8009476:	42a9      	cmp	r1, r5
 8009478:	d903      	bls.n	8009482 <_malloc_r+0x22>
 800947a:	230c      	movs	r3, #12
 800947c:	6033      	str	r3, [r6, #0]
 800947e:	2000      	movs	r0, #0
 8009480:	bd70      	pop	{r4, r5, r6, pc}
 8009482:	f000 f87d 	bl	8009580 <__malloc_lock>
 8009486:	4a21      	ldr	r2, [pc, #132]	; (800950c <_malloc_r+0xac>)
 8009488:	6814      	ldr	r4, [r2, #0]
 800948a:	4621      	mov	r1, r4
 800948c:	b991      	cbnz	r1, 80094b4 <_malloc_r+0x54>
 800948e:	4c20      	ldr	r4, [pc, #128]	; (8009510 <_malloc_r+0xb0>)
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	b91b      	cbnz	r3, 800949c <_malloc_r+0x3c>
 8009494:	4630      	mov	r0, r6
 8009496:	f000 f863 	bl	8009560 <_sbrk_r>
 800949a:	6020      	str	r0, [r4, #0]
 800949c:	4629      	mov	r1, r5
 800949e:	4630      	mov	r0, r6
 80094a0:	f000 f85e 	bl	8009560 <_sbrk_r>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d124      	bne.n	80094f2 <_malloc_r+0x92>
 80094a8:	230c      	movs	r3, #12
 80094aa:	6033      	str	r3, [r6, #0]
 80094ac:	4630      	mov	r0, r6
 80094ae:	f000 f868 	bl	8009582 <__malloc_unlock>
 80094b2:	e7e4      	b.n	800947e <_malloc_r+0x1e>
 80094b4:	680b      	ldr	r3, [r1, #0]
 80094b6:	1b5b      	subs	r3, r3, r5
 80094b8:	d418      	bmi.n	80094ec <_malloc_r+0x8c>
 80094ba:	2b0b      	cmp	r3, #11
 80094bc:	d90f      	bls.n	80094de <_malloc_r+0x7e>
 80094be:	600b      	str	r3, [r1, #0]
 80094c0:	50cd      	str	r5, [r1, r3]
 80094c2:	18cc      	adds	r4, r1, r3
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 f85c 	bl	8009582 <__malloc_unlock>
 80094ca:	f104 000b 	add.w	r0, r4, #11
 80094ce:	1d23      	adds	r3, r4, #4
 80094d0:	f020 0007 	bic.w	r0, r0, #7
 80094d4:	1ac3      	subs	r3, r0, r3
 80094d6:	d0d3      	beq.n	8009480 <_malloc_r+0x20>
 80094d8:	425a      	negs	r2, r3
 80094da:	50e2      	str	r2, [r4, r3]
 80094dc:	e7d0      	b.n	8009480 <_malloc_r+0x20>
 80094de:	428c      	cmp	r4, r1
 80094e0:	684b      	ldr	r3, [r1, #4]
 80094e2:	bf16      	itet	ne
 80094e4:	6063      	strne	r3, [r4, #4]
 80094e6:	6013      	streq	r3, [r2, #0]
 80094e8:	460c      	movne	r4, r1
 80094ea:	e7eb      	b.n	80094c4 <_malloc_r+0x64>
 80094ec:	460c      	mov	r4, r1
 80094ee:	6849      	ldr	r1, [r1, #4]
 80094f0:	e7cc      	b.n	800948c <_malloc_r+0x2c>
 80094f2:	1cc4      	adds	r4, r0, #3
 80094f4:	f024 0403 	bic.w	r4, r4, #3
 80094f8:	42a0      	cmp	r0, r4
 80094fa:	d005      	beq.n	8009508 <_malloc_r+0xa8>
 80094fc:	1a21      	subs	r1, r4, r0
 80094fe:	4630      	mov	r0, r6
 8009500:	f000 f82e 	bl	8009560 <_sbrk_r>
 8009504:	3001      	adds	r0, #1
 8009506:	d0cf      	beq.n	80094a8 <_malloc_r+0x48>
 8009508:	6025      	str	r5, [r4, #0]
 800950a:	e7db      	b.n	80094c4 <_malloc_r+0x64>
 800950c:	200000a0 	.word	0x200000a0
 8009510:	200000a4 	.word	0x200000a4

08009514 <_realloc_r>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	4607      	mov	r7, r0
 8009518:	4614      	mov	r4, r2
 800951a:	460e      	mov	r6, r1
 800951c:	b921      	cbnz	r1, 8009528 <_realloc_r+0x14>
 800951e:	4611      	mov	r1, r2
 8009520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009524:	f7ff bf9c 	b.w	8009460 <_malloc_r>
 8009528:	b922      	cbnz	r2, 8009534 <_realloc_r+0x20>
 800952a:	f7ff ff4b 	bl	80093c4 <_free_r>
 800952e:	4625      	mov	r5, r4
 8009530:	4628      	mov	r0, r5
 8009532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009534:	f000 f826 	bl	8009584 <_malloc_usable_size_r>
 8009538:	42a0      	cmp	r0, r4
 800953a:	d20f      	bcs.n	800955c <_realloc_r+0x48>
 800953c:	4621      	mov	r1, r4
 800953e:	4638      	mov	r0, r7
 8009540:	f7ff ff8e 	bl	8009460 <_malloc_r>
 8009544:	4605      	mov	r5, r0
 8009546:	2800      	cmp	r0, #0
 8009548:	d0f2      	beq.n	8009530 <_realloc_r+0x1c>
 800954a:	4631      	mov	r1, r6
 800954c:	4622      	mov	r2, r4
 800954e:	f7ff ff15 	bl	800937c <memcpy>
 8009552:	4631      	mov	r1, r6
 8009554:	4638      	mov	r0, r7
 8009556:	f7ff ff35 	bl	80093c4 <_free_r>
 800955a:	e7e9      	b.n	8009530 <_realloc_r+0x1c>
 800955c:	4635      	mov	r5, r6
 800955e:	e7e7      	b.n	8009530 <_realloc_r+0x1c>

08009560 <_sbrk_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4c06      	ldr	r4, [pc, #24]	; (800957c <_sbrk_r+0x1c>)
 8009564:	2300      	movs	r3, #0
 8009566:	4605      	mov	r5, r0
 8009568:	4608      	mov	r0, r1
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	f7ff f9b2 	bl	80088d4 <_sbrk>
 8009570:	1c43      	adds	r3, r0, #1
 8009572:	d102      	bne.n	800957a <_sbrk_r+0x1a>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	b103      	cbz	r3, 800957a <_sbrk_r+0x1a>
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	20000b90 	.word	0x20000b90

08009580 <__malloc_lock>:
 8009580:	4770      	bx	lr

08009582 <__malloc_unlock>:
 8009582:	4770      	bx	lr

08009584 <_malloc_usable_size_r>:
 8009584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009588:	1f18      	subs	r0, r3, #4
 800958a:	2b00      	cmp	r3, #0
 800958c:	bfbc      	itt	lt
 800958e:	580b      	ldrlt	r3, [r1, r0]
 8009590:	18c0      	addlt	r0, r0, r3
 8009592:	4770      	bx	lr

08009594 <_init>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr

080095a0 <_fini>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	bf00      	nop
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr
